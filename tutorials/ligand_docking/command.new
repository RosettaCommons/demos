# This is a test script of the demo, created by parsing testable commands given in the demo's README.md file.
# Commands that need to be tested should start with '$<'  to indicate that the line will be written to this file and tested.
# - Documentation XRW 2016 Team - 

cd %(workdir)s

[ -x %(bin)s/rosetta_scripts.%(binext)s ] || exit 1

# ligand_docking_tutorial


 %(minidir)s/scripts/python/public/molfile_to_params.py -n ETQ -p ETQ --conformers-in-one-file ligand_prep/eticlopride_conformers.sdf 2>&1 | egrep -vf /Users/raemisch/Rosetta/main/tests/integration/ignore_list > log1
test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

 cp answers/docking/3PBL_ETQ.pdb . 2>&1 | egrep -vf /Users/raemisch/Rosetta/main/tests/integration/ignore_list > log2
test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

 cp docking/dock.xml . 2>&1 | egrep -vf /Users/raemisch/Rosetta/main/tests/integration/ignore_list > log3
test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

 cp docking/options . 2>&1 | egrep -vf /Users/raemisch/Rosetta/main/tests/integration/ignore_list > log4
test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

 cp docking/crystal_complex.pdb . 2>&1 | egrep -vf /Users/raemisch/Rosetta/main/tests/integration/ignore_list > log5
test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

 %(bin)s/rosetta_scripts.%(binext)s @options  -database %(database)s -run:constant_seed -nodelay  2>&1 | egrep -vf /Users/raemisch/Rosetta/main/tests/integration/ignore_list > log6
test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so


