// This file has been generated by Py++.

#include "boost/python.hpp"

#include "core.hh"

#include "protocols.hh"

#include "core/pack/task/PackerTask_.hh"

namespace bp = boost::python;

struct ClassicRelax_wrapper : protocols::ClassicRelax, bp::wrapper< protocols::ClassicRelax > {

    ClassicRelax_wrapper(::core::scoring::ScoreFunctionOP _scorefxn, ::core::pose::Pose & _pose )
    : protocols::ClassicRelax( _scorefxn, boost::ref(_pose) )
      , bp::wrapper< protocols::ClassicRelax >(){
        // constructor
    
    }

    virtual void run(  ) {
        if( bp::override func_run = this->get_override( "run" ) )
            func_run(  );
        else
            this->protocols::ClassicRelax::run(  );
    }
    
    
    void default_run(  ) {
        protocols::ClassicRelax::run( );
    }

};

struct Mover_wrapper : protocols::moves::Mover, bp::wrapper< protocols::moves::Mover > {

    Mover_wrapper(::std::string const & type_in )
    : protocols::moves::Mover( type_in )
      , bp::wrapper< protocols::moves::Mover >(){
        // constructor
    
    }

    virtual void apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const {
      std::cerr << "Mover_wrapper::apply called!" << std::endl;
        bp::override func_apply = this->get_override( "apply" );
        func_apply( boost::ref(pose), boost::ref(mm) );
    }

    void set_type( ::std::string const & new_type ) const {
        protocols::moves::Mover::set_type( new_type );
    }

};

struct MoveSet_wrapper : protocols::moves::MoveSet, bp::wrapper< protocols::moves::MoveSet > {

    MoveSet_wrapper(protocols::moves::MoveSet const & arg )
    : protocols::moves::MoveSet( arg )
      , bp::wrapper< protocols::moves::MoveSet >(){
        // copy constructor
        
    }

    MoveSet_wrapper( )
    : protocols::moves::MoveSet( )
      , bp::wrapper< protocols::moves::MoveSet >(){
        // null constructor
    
    }

    virtual void apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(pose), boost::ref(mm) );
        else
            this->protocols::moves::MoveSet::apply( boost::ref(pose), boost::ref(mm) );
    }
    
    
    void default_apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
        protocols::moves::MoveSet::apply( boost::ref(pose), boost::ref(mm) );
    }

    void set_type( ::std::string const & new_type ) const {
        protocols::moves::Mover::set_type( new_type );
    }

};

struct PackMover_wrapper : protocols::moves::PackMover, bp::wrapper< protocols::moves::PackMover > {

    PackMover_wrapper(protocols::moves::PackMover const & arg )
    : protocols::moves::PackMover( arg )
      , bp::wrapper< protocols::moves::PackMover >(){
        // copy constructor
        
    }

    PackMover_wrapper(::core::scoring::ScoreFunctionOP const & scorefxn_in, ::core::pack::task::PackerTask const & task_in, ::protocols::moves::PackType const & pack_type_in=::protocols::moves::PackType_off )
    : protocols::moves::PackMover( boost::ref(scorefxn_in), boost::ref(task_in), pack_type_in )
      , bp::wrapper< protocols::moves::PackMover >(){
        // constructor
    
    }

    virtual void apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & arg1 ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(pose), boost::ref(arg1) );
        else
            this->protocols::moves::PackMover::apply( boost::ref(pose), boost::ref(arg1) );
    }
    
    
    void default_apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & arg1 ) const  {
        protocols::moves::PackMover::apply( boost::ref(pose), boost::ref(arg1) );
    }

    void set_type( ::std::string const & new_type ) const {
        protocols::moves::Mover::set_type( new_type );
    }

};

struct RigidBodyMover_wrapper : protocols::moves::RigidBodyMover, bp::wrapper< protocols::moves::RigidBodyMover > {

    RigidBodyMover_wrapper(protocols::moves::RigidBodyMover const & arg )
    : protocols::moves::RigidBodyMover( arg )
      , bp::wrapper< protocols::moves::RigidBodyMover >(){
        // copy constructor
        
    }

    RigidBodyMover_wrapper( )
    : protocols::moves::RigidBodyMover( )
      , bp::wrapper< protocols::moves::RigidBodyMover >(){
        // null constructor
    
    }

    virtual void apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(pose), boost::ref(mm) );
        else
            this->protocols::moves::RigidBodyMover::apply( boost::ref(pose), boost::ref(mm) );
    }
    
    
    void default_apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
        protocols::moves::RigidBodyMover::apply( boost::ref(pose), boost::ref(mm) );
    }

    void set_type( ::std::string const & new_type ) const {
        protocols::moves::Mover::set_type( new_type );
    }

};

struct RigidBodyPerturbMover_wrapper : protocols::moves::RigidBodyPerturbMover, bp::wrapper< protocols::moves::RigidBodyPerturbMover > {

    RigidBodyPerturbMover_wrapper(protocols::moves::RigidBodyPerturbMover const & arg )
    : protocols::moves::RigidBodyPerturbMover( arg )
      , bp::wrapper< protocols::moves::RigidBodyPerturbMover >(){
        // copy constructor
        
    }

    RigidBodyPerturbMover_wrapper()
    : protocols::moves::RigidBodyPerturbMover()
      , bp::wrapper< protocols::moves::RigidBodyPerturbMover >(){
        // null constructor
        
    }

    void set_type( ::std::string const & new_type ) const {
        protocols::moves::Mover::set_type( new_type );
    }

};

struct ShearMover_wrapper : protocols::moves::ShearMover, bp::wrapper< protocols::moves::ShearMover > {

    ShearMover_wrapper(protocols::moves::ShearMover const & arg )
    : protocols::moves::ShearMover( arg )
      , bp::wrapper< protocols::moves::ShearMover >(){
        // copy constructor
        
    }

    ShearMover_wrapper( )
    : protocols::moves::ShearMover( )
      , bp::wrapper< protocols::moves::ShearMover >(){
        // null constructor
    
    }

    virtual void apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(pose), boost::ref(mm) );
        else
            this->protocols::moves::ShearMover::apply( boost::ref(pose), boost::ref(mm) );
    }
    
    
    void default_apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
        protocols::moves::ShearMover::apply( boost::ref(pose), boost::ref(mm) );
    }

    void set_type( ::std::string const & new_type ) const {
        protocols::moves::Mover::set_type( new_type );
    }

};

struct SmallMover_wrapper : protocols::moves::SmallMover, bp::wrapper< protocols::moves::SmallMover > {

    SmallMover_wrapper(protocols::moves::SmallMover const & arg )
    : protocols::moves::SmallMover( arg )
      , bp::wrapper< protocols::moves::SmallMover >(){
        // copy constructor
        
    }

    SmallMover_wrapper( )
    : protocols::moves::SmallMover( )
      , bp::wrapper< protocols::moves::SmallMover >(){
        // null constructor
    
    }

    virtual void apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
        if( bp::override func_apply = this->get_override( "apply" ) )
            func_apply( boost::ref(pose), boost::ref(mm) );
        else
            this->protocols::moves::SmallMover::apply( boost::ref(pose), boost::ref(mm) );
    }
    
    
    void default_apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
        protocols::moves::SmallMover::apply( boost::ref(pose), boost::ref(mm) );
    }

    void set_type( ::std::string const & new_type ) const {
        protocols::moves::Mover::set_type( new_type );
    }

};

BOOST_PYTHON_MODULE(_test_relax){
    bp::enum_< core::chemical::AA>("AA")
        .value("aa_ala", core::chemical::aa_ala)
        .value("aa_cys", core::chemical::aa_cys)
        .value("aa_asp", core::chemical::aa_asp)
        .value("aa_glu", core::chemical::aa_glu)
        .value("aa_phe", core::chemical::aa_phe)
        .value("aa_gly", core::chemical::aa_gly)
        .value("aa_his", core::chemical::aa_his)
        .value("aa_ile", core::chemical::aa_ile)
        .value("aa_lys", core::chemical::aa_lys)
        .value("aa_leu", core::chemical::aa_leu)
        .value("aa_met", core::chemical::aa_met)
        .value("aa_asn", core::chemical::aa_asn)
        .value("aa_pro", core::chemical::aa_pro)
        .value("aa_gln", core::chemical::aa_gln)
        .value("aa_arg", core::chemical::aa_arg)
        .value("aa_ser", core::chemical::aa_ser)
        .value("aa_thr", core::chemical::aa_thr)
        .value("aa_val", core::chemical::aa_val)
        .value("aa_trp", core::chemical::aa_trp)
        .value("aa_tyr", core::chemical::aa_tyr)
        .value("num_canonical_aas", core::chemical::num_canonical_aas)
        .value("na_gua", core::chemical::na_gua)
        .value("na_ade", core::chemical::na_ade)
        .value("na_cyt", core::chemical::na_cyt)
        .value("na_thy", core::chemical::na_thy)
        .value("na_rgu", core::chemical::na_rgu)
        .value("na_rad", core::chemical::na_rad)
        .value("na_rcy", core::chemical::na_rcy)
        .value("na_ura", core::chemical::na_ura)
        .value("aa_unk", core::chemical::aa_unk)
        .value("num_aa_types", core::chemical::num_aa_types)
        .export_values()
        ;

    bp::enum_< core::pack::rotamer_set::BumpSelectorDecision>("BumpSelectorDecision")
        .value("KEEP_ROTAMER", core::pack::rotamer_set::KEEP_ROTAMER)
        .value("DELETE_ROTAMER", core::pack::rotamer_set::DELETE_ROTAMER)
        .value("DELETE_PREVIOUS_ROTAMER", core::pack::rotamer_set::DELETE_PREVIOUS_ROTAMER)
        .export_values()
        ;

    bp::enum_< core::scoring::etable::CPCrossoverBehavior>("CPCrossoverBehavior")
        .value("CP_CROSSOVER_3", core::scoring::etable::CP_CROSSOVER_3)
        .value("CP_CROSSOVER_4", core::scoring::etable::CP_CROSSOVER_4)
        .value("nCPCrossoverBehaviors", core::scoring::etable::nCPCrossoverBehaviors)
        .export_values()
        ;

    bp::enum_< core::scoring::etable::CPResidueConnectionType>("CPResidueConnectionType")
        .value("CP_NO_BONDS", core::scoring::etable::CP_NO_BONDS)
        .value("CP_ONE_INTERRESIDUE_BOND", core::scoring::etable::CP_ONE_INTERRESIDUE_BOND)
        .value("nCPResidueConnectionTypes", core::scoring::etable::nCPResidueConnectionTypes)
        .export_values()
        ;

    bp::enum_< core::scoring::CachedDataType>("CachedDataType")
        .value("ETABLE_NBLIST", core::scoring::ETABLE_NBLIST)
        .value("HBOND_SET", core::scoring::HBOND_SET)
        .value("ETABLE_TRIE_COLLECTION", core::scoring::ETABLE_TRIE_COLLECTION)
        .export_values()
        ;

    bp::enum_< core::scoring::ContextGraphType>("ContextGraphType")
        .value("ten_A_neighbor_graph", core::scoring::ten_A_neighbor_graph)
        .value("centroid_neighbor_graph", core::scoring::centroid_neighbor_graph)
        .value("num_context_graph_types", core::scoring::num_context_graph_types)
        .export_values()
        ;

    bp::enum_< core::id::DOF_Type>("DOF_Type")
        .value("PHI", core::id::PHI)
        .value("THETA", core::id::THETA)
        .value("D", core::id::D)
        .value("RB1", core::id::RB1)
        .value("RB2", core::id::RB2)
        .value("RB3", core::id::RB3)
        .value("RB4", core::id::RB4)
        .value("RB5", core::id::RB5)
        .value("RB6", core::id::RB6)
        .export_values()
        ;

    bp::enum_< core::scoring::methods::EnergyMethodType>("EnergyMethodType")
        .value("ci_2b", core::scoring::methods::ci_2b)
        .value("cd_2b", core::scoring::methods::cd_2b)
        .value("ci_1b", core::scoring::methods::ci_1b)
        .value("n_energy_method_types", core::scoring::methods::n_energy_method_types)
        .export_values()
        ;

    bp::enum_< core::scoring::methods::EnergyMethods>("EnergyMethods")
        .value("etable_method", core::scoring::methods::etable_method)
        .value("dunbrack_method", core::scoring::methods::dunbrack_method)
        .value("hbond_method", core::scoring::methods::hbond_method)
        .value("pair_e_method", core::scoring::methods::pair_e_method)
        .value("ramachandran_method", core::scoring::methods::ramachandran_method)
        .value("n_energy_methods", core::scoring::methods::n_energy_methods)
        .export_values()
        ;

    bp::enum_< core::pack::task::ExtraRotSample>("ExtraRotSample")
        .value("NO_EXTRA_CHI_SAMPLES", core::pack::task::NO_EXTRA_CHI_SAMPLES)
        .value("EX_ONE_STDDEV", core::pack::task::EX_ONE_STDDEV)
        .value("EX_ONE_HALF_STEP_STDDEV", core::pack::task::EX_ONE_HALF_STEP_STDDEV)
        .value("EX_TWO_FULL_STEP_STDDEVS", core::pack::task::EX_TWO_FULL_STEP_STDDEVS)
        .value("EX_TWO_HALF_STEP_STDDEVS", core::pack::task::EX_TWO_HALF_STEP_STDDEVS)
        .value("EX_FOUR_HALF_STEP_STDDEVS", core::pack::task::EX_FOUR_HALF_STEP_STDDEVS)
        .value("EX_THREE_THIRD_STEP_STDDEVS", core::pack::task::EX_THREE_THIRD_STEP_STDDEVS)
        .value("EX_SIX_QUARTER_STEP_STDDEVS", core::pack::task::EX_SIX_QUARTER_STEP_STDDEVS)
        .value("ExtraRotSampleCardinality", core::pack::task::ExtraRotSampleCardinality)
        .export_values()
        ;

    bp::enum_< core::scoring::hbonds::HBAccChemType>("HBAccChemType")
	.value("hbacc_NONE", core::scoring::hbonds::hbacc_NONE)
 	.value("hbacc_PBA", core::scoring::hbonds::hbacc_PBA)
	.value("hbacc_CXA", core::scoring::hbonds::hbacc_CXA)
	.value("hbacc_CXL", core::scoring::hbonds::hbacc_CXL)
	.value("hbacc_IMD", core::scoring::hbonds::hbacc_IMD)
	.value("hbacc_IME", core::scoring::hbonds::hbacc_IME)
	.value("hbacc_AHX", core::scoring::hbonds::hbacc_AHX)
	.value("hbacc_HXL", core::scoring::hbonds::hbacc_HXL)
	.value("hbacc_H2O", core::scoring::hbonds::hbacc_H2O)	  
	.value("hbacc_MAX", core::scoring::hbonds::hbacc_MAX)
	;

    bp::enum_< core::scoring::hbonds::HBDonChemType>("HBDonChemType")
        .value("hbdon_NONE", core::scoring::hbonds::hbdon_NONE)
	.value("hbdon_PBA", core::scoring::hbonds::hbdon_PBA)
	.value("hbdon_CXA", core::scoring::hbonds::hbdon_CXA)
	.value("hbdon_IMD", core::scoring::hbonds::hbdon_IMD)
	.value("hbdon_IME", core::scoring::hbonds::hbdon_IME)
	.value("hbdon_IND", core::scoring::hbonds::hbdon_IND)
	.value("hbdon_AMO", core::scoring::hbonds::hbdon_AMO)
	.value("hbdon_GDE", core::scoring::hbonds::hbdon_GDE)
	.value("hbdon_GDH", core::scoring::hbonds::hbdon_GDH)
	.value("hbdon_AHX", core::scoring::hbonds::hbdon_AHX)
	.value("hbdon_HXL", core::scoring::hbonds::hbdon_HXL)
	.value("hbdon_PHT", core::scoring::hbonds::hbdon_PHT)
	.value("hbdon_H2O", core::scoring::hbonds::hbdon_H2O)
	.value("hbdon_MAX", core::scoring::hbonds::hbdon_MAX)
	.export_values()
	;

    bp::enum_< core::scoring::hbonds::HBEvalType>("HBEvalType")
	.value("hbe_NONE", core::scoring::hbonds::hbe_NONE)
	.value("hbe_dPBAaPBAsepM1", core::scoring::hbonds::hbe_dPBAaPBAsepM1)
	.value("hbe_dPBAaPBAsepP1",core::scoring::hbonds::hbd_dPBAaPBAsepP1)    
	.value("hbe_dPBAaPBAsepP2turn", core::scoring::hbonds::hbe_dPBAaPBAP2turn)
	.value("hbe_dPBAaPBAsepP3turn", core::scoring::hbonds::hbe_dPBAaPBAsepP3turn) 
	.value("hbe_dPBAaPBAsepP4helix", core::scoring::hbonds::hbe_dPBAaPBAsepP4helix)
	.value("hbe_dPBAaPBAsepother", core::scoring::hbonds::hbe_dPBAaPBAsepother)  
        .value("hbe_dCXAaPBA", core::scoring::hbonds::hbe_dCXAaPBA)
        .value("hbe_dIMDaPBA", core::scoring::hbonds::hbe_dIMDaPBA)
        .value("hbe_dIMEaPBA", core::scoring::hbonds::hbe_dIMEaPBA)
        .value("hbe_dINDaPBA", core::scoring::hbonds::hbe_dINDaPBA)
        .value("hbe_dAMOaPBA", core::scoring::hbonds::hbe_dAMOaPBA)
        .value("hbe_dGDEaPBA", core::scoring::hbonds::hbe_dGDEaPBA)
        .value("hbe_dGDHaPBA", core::scoring::hbonds::hbe_dGDHaPBA)
        .value("hbe_dAHXaPBA", core::scoring::hbonds::hbe_dAHXaPBA)
        .value("hbe_dHXLaPBA", core::scoring::hbonds::hbe_dHXLaPBA)
        .value("hbe_dPHTaPBA", core::scoring::hbonds::hbe_dPHTaPBA)
        .value("hbe_dH2OaPBA", core::scoring::hbonds::hbe_dH2OaPBA)
        .value("hbe_dPBAaCXA", core::scoring::hbonds::hbe_dPBAaCXA)
        .value("hbe_dCXAaCXA", core::scoring::hbonds::hbe_dCXAaCXA)
        .value("hbe_dIMDaCXA", core::scoring::hbonds::hbe_dIMDaCXA)
        .value("hbe_dIMEaCXA", core::scoring::hbonds::hbe_dIMEaCXA)
        .value("hbe_dINDaCXA", core::scoring::hbonds::hbe_dINDaCXA)
        .value("hbe_dAMOaCXA", core::scoring::hbonds::hbe_dAMOaCXA)
        .value("hbe_dGDEaCXA", core::scoring::hbonds::hbe_dGDEaCXA)
        .value("hbe_dGDHaCXA", core::scoring::hbonds::hbe_dGDHaCXA)
        .value("hbe_dAHXaCXA", core::scoring::hbonds::hbe_dAHXaCXA)
        .value("hbe_dHXLaCXA", core::scoring::hbonds::hbe_dHXLaCXA)
        .value("hbe_dPHTaCXA", core::scoring::hbonds::hbe_dPHTaCXA)
        .value("hbe_dH2OaCXA", core::scoring::hbonds::hbe_dH2OaCXA)
        .value("hbe_dPBAaCXL", core::scoring::hbonds::hbe_dPBAaCXL)
        .value("hbe_dCXAaCXL", core::scoring::hbonds::hbe_dCXAaCXL)
        .value("hbe_dIMDaCXL", core::scoring::hbonds::hbe_dIMDaCXL)
        .value("hbe_dIMEaCXL", core::scoring::hbonds::hbe_dIMEaCXL)
        .value("hbe_dINDaCXL", core::scoring::hbonds::hbe_dINDaCXL)
        .value("hbe_dAMOaCXL", core::scoring::hbonds::hbe_dAMOaCXL)
        .value("hbe_dGDEaCXL", core::scoring::hbonds::hbe_dGDEaCXL)
        .value("hbe_dGDHaCXL", core::scoring::hbonds::hbe_dGDHaCXL)
        .value("hbe_dAHXaCXL", core::scoring::hbonds::hbe_dAHXaCXL)
        .value("hbe_dHXLaCXL", core::scoring::hbonds::hbe_dHXLaCXL)
        .value("hbe_dPHTaCXL", core::scoring::hbonds::hbe_dPHTaCXL)
        .value("hbe_dH2OaCXL", core::scoring::hbonds::hbe_dH2OaCXL)
        .value("hbe_dPBAaIMD", core::scoring::hbonds::hbe_dPBAaIMD)
        .value("hbe_dCXAaIMD", core::scoring::hbonds::hbe_dCXAaIMD)
        .value("hbe_dIMDaIMD", core::scoring::hbonds::hbe_dIMDaIMD)
        .value("hbe_dIMEaIMD", core::scoring::hbonds::hbe_dIMEaIMD)
        .value("hbe_dINDaIMD", core::scoring::hbonds::hbe_dINDaIMD)
        .value("hbe_dAMOaIMD", core::scoring::hbonds::hbe_dAMOaIMD)
        .value("hbe_dGDEaIMD", core::scoring::hbonds::hbe_dGDEaIMD)
        .value("hbe_dGDHaIMD", core::scoring::hbonds::hbe_dGDHaIMD)
        .value("hbe_dAHXaIMD", core::scoring::hbonds::hbe_dAHXaIMD)
        .value("hbe_dHXLaIMD", core::scoring::hbonds::hbe_dHXLaIMD)
        .value("hbe_dPHTaIMD", core::scoring::hbonds::hbe_dPHTaIMD)
        .value("hbe_dH2OaIMD", core::scoring::hbonds::hbe_dH2OaIMD)
        .value("hbe_dPBAaIME", core::scoring::hbonds::hbe_dPBAaIME)
        .value("hbe_dCXAaIME", core::scoring::hbonds::hbe_dCXAaIME)
        .value("hbe_dIMDaIME", core::scoring::hbonds::hbe_dIMDaIME)
        .value("hbe_dIMEaIME", core::scoring::hbonds::hbe_dIMEaIME)
        .value("hbe_dINDaIME", core::scoring::hbonds::hbe_dINDaIME)
        .value("hbe_dAMOaIME", core::scoring::hbonds::hbe_dAMOaIME)
        .value("hbe_dGDEaIME", core::scoring::hbonds::hbe_dGDEaIME)
        .value("hbe_dGDHaIME", core::scoring::hbonds::hbe_dGDHaIME)
        .value("hbe_dAHXaIME", core::scoring::hbonds::hbe_dAHXaIME)
        .value("hbe_dHXLaIME", core::scoring::hbonds::hbe_dHXLaIME)
        .value("hbe_dPHTaIME", core::scoring::hbonds::hbe_dPHTaIME)
        .value("hbe_dH2OaIME", core::scoring::hbonds::hbe_dH2OaIME)
        .value("hbe_dPBAaAHX", core::scoring::hbonds::hbe_dPBAaAHX)
        .value("hbe_dCXAaAHX", core::scoring::hbonds::hbe_dCXAaAHX)
        .value("hbe_dIMDaAHX", core::scoring::hbonds::hbe_dIMDaAHX)
        .value("hbe_dIMEaAHX", core::scoring::hbonds::hbe_dIMEaAHX)
        .value("hbe_dINDaAHX", core::scoring::hbonds::hbe_dINDaAHX)
        .value("hbe_dAMOaAHX", core::scoring::hbonds::hbe_dAMOaAHX)
        .value("hbe_dGDEaAHX", core::scoring::hbonds::hbe_dGDEaAHX)
        .value("hbe_dGDHaAHX", core::scoring::hbonds::hbe_dGDHaAHX)
        .value("hbe_dAHXaAHX", core::scoring::hbonds::hbe_dAHXaAHX)
        .value("hbe_dHXLaAHX", core::scoring::hbonds::hbe_dHXLaAHX)
        .value("hbe_dPHTaAHX", core::scoring::hbonds::hbe_dPHTaAHX)
        .value("hbe_dH2OaAHX", core::scoring::hbonds::hbe_dH2OaAHX)
        .value("hbe_dPBAaHXL", core::scoring::hbonds::hbe_dPBAaHXL)
        .value("hbe_dCXAaHXL", core::scoring::hbonds::hbe_dCXAaHXL)
        .value("hbe_dIMDaHXL", core::scoring::hbonds::hbe_dIMDaHXL)
        .value("hbe_dIMEaHXL", core::scoring::hbonds::hbe_dIMEaHXL)
        .value("hbe_dINDaHXL", core::scoring::hbonds::hbe_dINDaHXL)
        .value("hbe_dAMOaHXL", core::scoring::hbonds::hbe_dAMOaHXL)
        .value("hbe_dGDEaHXL", core::scoring::hbonds::hbe_dGDEaHXL)
        .value("hbe_dGDHaHXL", core::scoring::hbonds::hbe_dGDHaHXL)
        .value("hbe_dAHXaHXL", core::scoring::hbonds::hbe_dAHXaHXL)
        .value("hbe_dHXLaHXL", core::scoring::hbonds::hbe_dHXLaHXL)
        .value("hbe_dPHTaHXL", core::scoring::hbonds::hbe_dPHTaHXL)
        .value("hbe_dH2OaHXL", core::scoring::hbonds::hbe_dH2OaHXL)
        .value("hbe_dPBAaH2O", core::scoring::hbonds::hbe_dPBAaH2O)
        .value("hbe_dCXAaH2O", core::scoring::hbonds::hbe_dCXAaH2O)
        .value("hbe_dIMDaH2O", core::scoring::hbonds::hbe_dIMDaH2O)
        .value("hbe_dIMEaH2O", core::scoring::hbonds::hbe_dIMEaH2O)
        .value("hbe_dINDaH2O", core::scoring::hbonds::hbe_dINDaH2O)
        .value("hbe_dAMOaH2O", core::scoring::hbonds::hbe_dAMOaH2O)
        .value("hbe_dGDEaH2O", core::scoring::hbonds::hbe_dGDEaH2O)
        .value("hbe_dGDHaH2O", core::scoring::hbonds::hbe_dGDHaH2O)
        .value("hbe_dAHXaH2O", core::scoring::hbonds::hbe_dAHXaH2O)
        .value("hbe_dHXLaH2O", core::scoring::hbonds::hbe_dHXLaH2O)
        .value("hbe_dPHTaH2O", core::scoring::hbonds::hbe_dPHTaH2O)
        .value("hbe_dH2OaH2O", core::scoring::hbonds::hbe_dH2OaH2O)
        .value("hbe_MAX", core::scoring::hbonds::hbe_MAX)
	.export_values()
	;

    bp::enum_< core::scoring::hbonds::HBondWeightType>("HBondWeightType")
        .value("hbw_SR_BB", core::scoring::hbonds::hbw_SR_BB)
        .value("hbw_LR_BB", core::scoring::hbonds::hbw_LR_BB)
        .value("hbw_BB_SC", core::scoring::hbonds::hbw_BB_SC)
        .value("hbw_SC", core::scoring::hbonds::hbw_SC)
        .value("hbw_NONE", core::scoring::hbonds::hbw_NONE)
        .export_values()
        ;

    bp::enum_< core::chemical::Hybridization>("Hybridization")
        .value("SP2_HYBRID", core::chemical::SP2_HYBRID)
        .value("SP3_HYBRID", core::chemical::SP3_HYBRID)
        .value("RING_HYBRID", core::chemical::RING_HYBRID)
        .value("UNKNOWN_HYBRID", core::chemical::UNKNOWN_HYBRID)
        .export_values()
        ;

    bp::enum_< protocols::moves::PackType>("PackType")
        .value("PackType_off", protocols::moves::PackType_off)
        .value("PackType_rottrial", protocols::moves::PackType_rottrial)
        .value("PackType_full", protocols::moves::PackType_full)
        .export_values()
        ;

    bp::enum_< core::util::ProfTag>("ProfTag")
        .value("TEST1", core::util::TEST1)
        .value("TEST2", core::util::TEST2)
        .value("TEST3", core::util::TEST3)
        .value("TEST4", core::util::TEST4)
        .value("TEST5", core::util::TEST5)
        .value("ATOM_TREE_UPDATE_INTERNAL_COORDS", core::util::ATOM_TREE_UPDATE_INTERNAL_COORDS)
        .value("ATOM_TREE_UPDATE_XYZ_COORDS", core::util::ATOM_TREE_UPDATE_XYZ_COORDS)
        .value("ROTAMER_TRIALS", core::util::ROTAMER_TRIALS)
        .value("PACK_ROTAMERS", core::util::PACK_ROTAMERS)
        .value("UPDATE_RESIDUE_NEIGHBORS", core::util::UPDATE_RESIDUE_NEIGHBORS)
        .value("SETUP_NBLIST", core::util::SETUP_NBLIST)
        .value("SCORE", core::util::SCORE)
        .value("CCD_CLOSE", core::util::CCD_CLOSE)
        .value("TOTAL", core::util::TOTAL)
        .value("n_prof_tags", core::util::n_prof_tags)
        .export_values()
        ;

    bp::enum_< core::scoring::ProteinTorsion>("ProteinTorsion")
        .value("PHI", core::scoring::PHI)
        .value("PSI", core::scoring::PSI)
        .value("OMEGA", core::scoring::OMEGA)
        .value("CHI1", core::scoring::CHI1)
        .value("CHI2", core::scoring::CHI2)
        .value("CHI3", core::scoring::CHI3)
        .value("CHI4", core::scoring::CHI4)
        .value("protein_torsion_end", core::scoring::protein_torsion_end)
        .export_values()
        ;

    bp::enum_< core::scoring::ScoreFunctionParameter>("ScoreFunctionParameter")
        .value("hydrogen_interaction_cutoff", core::scoring::hydrogen_interaction_cutoff)
        .export_values()
        ;

    bp::enum_< core::scoring::ScoreFunctionVariant>("ScoreFunctionVariant")
        .value("loc_lj", core::scoring::loc_lj)
        .value("lk_sol", core::scoring::lk_sol)
        .export_values()
        ;

    bp::enum_< core::scoring::ScoreType>("ScoreType")
        .value("fa_atr", core::scoring::fa_atr)
        .value("fa_rep", core::scoring::fa_rep)
        .value("fa_sol", core::scoring::fa_sol)
        .value("n_ci_2b_score_types", core::scoring::n_ci_2b_score_types)
        .value("fa_pair", core::scoring::fa_pair)
        .value("fa_plane", core::scoring::fa_plane)
        .value("hbond_sr_bb", core::scoring::hbond_sr_bb)
        .value("hbond_lr_bb", core::scoring::hbond_lr_bb)
        .value("hbond_bb_sc", core::scoring::hbond_bb_sc)
        .value("hbond_sc", core::scoring::hbond_sc)
        .value("rama", core::scoring::rama)
        .value("fa_dun", core::scoring::fa_dun)
        .value("rb_scorefxn", core::scoring::rb_scorefxn)
        .value("rb_env", core::scoring::rb_env)
        .value("rb_pair", core::scoring::rb_pair)
        .value("rb_cont", core::scoring::rb_cont)
        .value("rb_cont_cap", core::scoring::rb_cont_cap)
        .value("rb_vdw", core::scoring::rb_vdw)
        .value("rb_site_cst", core::scoring::rb_site_cst)
        .value("rb_fab", core::scoring::rb_fab)
        .value("rb_fab_cap", core::scoring::rb_fab_cap)
        .value("rb_wsl_elec", core::scoring::rb_wsl_elec)
        .value("mm_twist", core::scoring::mm_twist)
        .value("mm_bend", core::scoring::mm_bend)
        .value("mm_stretch", core::scoring::mm_stretch)
        .value("chainbreak", core::scoring::chainbreak)
        .value("total_score", core::scoring::total_score)
        .value("n_score_types", core::scoring::n_score_types)
        .export_values()
        ;

    bp::enum_< core::graph::Strategy>("Strategy")
        .value("NAIVE", core::graph::NAIVE)
        .value("AUTOMATIC", core::graph::AUTOMATIC)
        .value("OCTREE", core::graph::OCTREE)
        .export_values()
        ;

    bp::enum_< core::id::TorsionType>("TorsionType")
        .value("BB", core::id::BB)
        .value("CHI", core::id::CHI)
        .value("JUMP", core::id::JUMP)
        .export_values()
        ;

    bp::class_< core::id::DOF_ID >( "DOF_ID" )    
        .def( bp::init< >() )    
        .def( bp::init< core::id::AtomID const &, core::id::DOF_Type const & >(( bp::arg("atom_id_in"), bp::arg("type_in") )) )    
        .def( 
            "atom_id"
            , (::core::id::AtomID const & ( ::core::id::DOF_ID::* )(  ) const)( &::core::id::DOF_ID::atom_id )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "atomno"
            , (int ( ::core::id::DOF_ID::* )(  ) const)( &::core::id::DOF_ID::atomno ) )    
        .def( 
            "rsd"
            , (int ( ::core::id::DOF_ID::* )(  ) const)( &::core::id::DOF_ID::rsd ) )    
        .def( 
            "type"
            , (::core::id::DOF_Type ( ::core::id::DOF_ID::* )(  ) const)( &::core::id::DOF_ID::type ) )    
        .def( 
            "valid"
            , (bool ( ::core::id::DOF_ID::* )(  ) const)( &::core::id::DOF_ID::valid ) );

    bp::class_< core::kinematics::MoveMap, utility::pointer::owning_ptr< ::core::kinematics::MoveMap > >( "MoveMap" )    
        .def( bp::init< >() )    
        .def( 
            "clear"
            , (void ( ::core::kinematics::MoveMap::* )(  ) )( &::core::kinematics::MoveMap::clear ) )    
        .def( 
            "dof_begin"
            , (::std::_Rb_tree_const_iterator<std::pair<core::id::DOF_ID const, bool> > ( ::core::kinematics::MoveMap::* )(  ) const)( &::core::kinematics::MoveMap::dof_begin ) )    
        .def( 
            "dof_end"
            , (::std::_Rb_tree_const_iterator<std::pair<core::id::DOF_ID const, bool> > ( ::core::kinematics::MoveMap::* )(  ) const)( &::core::kinematics::MoveMap::dof_end ) )    
        .def( 
            "get"
            , (bool ( ::core::kinematics::MoveMap::* )( ::core::id::TorsionID const & ) const)( &::core::kinematics::MoveMap::get )
            , ( bp::arg("id") ) )    
        .def( 
            "get"
            , (bool ( ::core::kinematics::MoveMap::* )( ::core::id::DOF_Type const & ) const)( &::core::kinematics::MoveMap::get )
            , ( bp::arg("t") ) )    
        .def( 
            "get"
            , (bool ( ::core::kinematics::MoveMap::* )( ::core::id::DOF_ID const & ) const)( &::core::kinematics::MoveMap::get )
            , ( bp::arg("id") ) )    
        .def( 
            "get"
            , (bool ( ::core::kinematics::MoveMap::* )( ::core::id::TorsionType const & ) const)( &::core::kinematics::MoveMap::get )
            , ( bp::arg("t") ) )    
        .def( 
            "get_bb"
            , (bool ( ::core::kinematics::MoveMap::* )( int const ) const)( &::core::kinematics::MoveMap::get_bb )
            , ( bp::arg("seqpos") ) )    
        .def( 
            "get_chi"
            , (bool ( ::core::kinematics::MoveMap::* )( int const ) const)( &::core::kinematics::MoveMap::get_chi )
            , ( bp::arg("seqpos") ) )    
        .def( 
            "get_jump"
            , (bool ( ::core::kinematics::MoveMap::* )( int const ) const)( &::core::kinematics::MoveMap::get_jump )
            , ( bp::arg("jump_number") ) )    
        .def( 
            "num_dofs"
            , (::size_t ( ::core::kinematics::MoveMap::* )(  ) )( &::core::kinematics::MoveMap::num_dofs ) )    
        .def( 
            "print_dofs"
            , (void ( ::core::kinematics::MoveMap::* )(  ) )( &::core::kinematics::MoveMap::print_dofs ) )    
        .def( 
            "set"
            , (void ( ::core::kinematics::MoveMap::* )( ::core::id::DOF_Type const &,bool const ) )( &::core::kinematics::MoveMap::set )
            , ( bp::arg("t"), bp::arg("setting") ) )    
        .def( 
            "set"
            , (void ( ::core::kinematics::MoveMap::* )( ::core::id::DOF_ID const &,bool const ) )( &::core::kinematics::MoveMap::set )
            , ( bp::arg("id"), bp::arg("setting") ) )    
        .def( 
            "set"
            , (void ( ::core::kinematics::MoveMap::* )( ::core::id::TorsionType const &,bool const ) )( &::core::kinematics::MoveMap::set )
            , ( bp::arg("t"), bp::arg("setting") ) )    
        .def( 
            "set"
            , (void ( ::core::kinematics::MoveMap::* )( ::core::id::TorsionID const &,bool const ) )( &::core::kinematics::MoveMap::set )
            , ( bp::arg("id"), bp::arg("setting") ) )    
        .def( 
            "set_bb"
            , (void ( ::core::kinematics::MoveMap::* )( int const,bool const ) )( &::core::kinematics::MoveMap::set_bb )
            , ( bp::arg("seqpos"), bp::arg("setting") ) )    
        .def( 
            "set_bb"
            , (void ( ::core::kinematics::MoveMap::* )( bool const ) )( &::core::kinematics::MoveMap::set_bb )
            , ( bp::arg("setting") ) )    
        .def( 
            "set_chi"
            , (void ( ::core::kinematics::MoveMap::* )( int const,bool const ) )( &::core::kinematics::MoveMap::set_chi )
            , ( bp::arg("seqpos"), bp::arg("setting") ) )    
        .def( 
            "set_chi"
            , (void ( ::core::kinematics::MoveMap::* )( bool const ) )( &::core::kinematics::MoveMap::set_chi )
            , ( bp::arg("setting") ) )    
        .def( 
            "set_jump"
            , (void ( ::core::kinematics::MoveMap::* )( int const,bool const ) )( &::core::kinematics::MoveMap::set_jump )
            , ( bp::arg("jump_number"), bp::arg("setting") ) )    
        .def( 
            "set_jump"
            , (void ( ::core::kinematics::MoveMap::* )( bool const ) )( &::core::kinematics::MoveMap::set_jump )
            , ( bp::arg("setting") ) )    
        .def( 
            "test_begin"
            , (::__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > ( ::core::kinematics::MoveMap::* )(  ) )( &::core::kinematics::MoveMap::test_begin ) )    
        .def( 
            "test_end"
            , (::__gnu_cxx::__normal_iterator<int const*, std::vector<int, std::allocator<int> > > ( ::core::kinematics::MoveMap::* )(  ) )( &::core::kinematics::MoveMap::test_end ) )    
        .def( 
            "vary_omega"
            , (void ( ::core::kinematics::MoveMap::* )( bool const ) )( &::core::kinematics::MoveMap::vary_omega )
            , ( bp::arg("setting") ) )    
        .def( 
            "vary_omega"
            , (bool ( ::core::kinematics::MoveMap::* )(  ) const)( &::core::kinematics::MoveMap::vary_omega ) )    
        .def("__iter__", bp::range( &core::kinematics::MoveMap::dof_begin, &core::kinematics::MoveMap::dof_end ));

    bp::class_< core::optimization::MinimizerOptions, utility::pointer::owning_ptr< ::core::optimization::MinimizerOptions > >( "MinimizerOptions", bp::init< std::string const &, double, bool, bp::optional< bool, bool > >(( bp::arg("min_type_in"), bp::arg("minimize_tolerance_in"), bp::arg("use_nblist_in"), bp::arg("deriv_check_in")=(bool const)(false), bp::arg("deriv_check_verbose_in")=(bool const)(false) )) )    
        .def( 
            "ax_init"
            , (::core::Real ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::ax_init ) )    
        .def( 
            "brent_abs_tolerance"
            , (::core::Real ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::brent_abs_tolerance ) )    
        .def( 
            "bx_init"
            , (::core::Real ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::bx_init ) )    
        .def( 
            "clone"
            , (::core::optimization::MinimizerOptionsOP ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::clone ) )    
        .def( 
            "deriv_check"
            , (bool ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::deriv_check ) )    
        .def( 
            "deriv_check_verbose"
            , (bool ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::deriv_check_verbose ) )    
        .def( 
            "min_type"
            , (::std::string const & ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::min_type )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "min_type"
            , (void ( ::core::optimization::MinimizerOptions::* )( ::std::string ) )( &::core::optimization::MinimizerOptions::min_type )
            , ( bp::arg("min_type_in") ) )    
        .def( 
            "min_type"
            , (::std::string & ( ::core::optimization::MinimizerOptions::* )(  ) )( &::core::optimization::MinimizerOptions::min_type )
            , bp::return_value_policy< bp::copy_non_const_reference >() )    
        .def( 
            "minimize_tolerance"
            , (::core::Real ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::minimize_tolerance ) )    
        .def( 
            "minimize_tolerance"
            , (::core::Real & ( ::core::optimization::MinimizerOptions::* )(  ) )( &::core::optimization::MinimizerOptions::minimize_tolerance )
            , bp::return_value_policy< bp::copy_non_const_reference >() )    
        .def( 
            "minimize_tolerance"
            , (void ( ::core::optimization::MinimizerOptions::* )( ::core::Real ) )( &::core::optimization::MinimizerOptions::minimize_tolerance )
            , ( bp::arg("minimize_tolerance_in") ) )    
        .def( 
            "threshold"
            , (::core::Real ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::threshold ) )    
        .def( 
            "threshold"
            , (::core::Real & ( ::core::optimization::MinimizerOptions::* )(  ) )( &::core::optimization::MinimizerOptions::threshold )
            , bp::return_value_policy< bp::copy_non_const_reference >() )    
        .def( 
            "threshold"
            , (void ( ::core::optimization::MinimizerOptions::* )( ::core::Real ) )( &::core::optimization::MinimizerOptions::threshold )
            , ( bp::arg("threshold_in") ) )    
        .def( 
            "use_nblist"
            , (bool ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::use_nblist ) )    
        .def( 
            "use_nblist"
            , (void ( ::core::optimization::MinimizerOptions::* )( bool ) )( &::core::optimization::MinimizerOptions::use_nblist )
            , ( bp::arg("use_nblist_in") ) )    
        .def( 
            "xx_init"
            , (::core::Real ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::xx_init ) );

    { //::core::pose::Pose
        typedef bp::class_< core::pose::Pose, utility::pointer::owning_ptr< ::core::pose::Pose > > Pose_exposer_t;
        Pose_exposer_t Pose_exposer = Pose_exposer_t( "Pose" );
        bp::scope Pose_scope( Pose_exposer );
        Pose_exposer.def( bp::init< >() );
        { //::core::pose::Pose::aa
        
            typedef ::core::chemical::AA const & ( ::core::pose::Pose::*aa_function_type )( int const ) const;
            
            Pose_exposer.def( 
                "aa"
                , aa_function_type( &::core::pose::Pose::aa )
                , ( bp::arg("seqpos") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::core::pose::Pose::append_residue
        
            typedef void ( ::core::pose::Pose::*append_residue_function_type )( ::core::conformation::ResidueCOP,bool const,int const,int const,int const ) ;
            
            Pose_exposer.def( 
                "append_residue"
                , append_residue_function_type( &::core::pose::Pose::append_residue )
                , ( bp::arg("new_rsd"), bp::arg("attach_by_jump")=(bool const)(false), bp::arg("jump_anchor_residue")=(int const)(0), bp::arg("jump_anchor_atomno")=(int const)(0), bp::arg("jump_root_atomno")=(int const)(0) ) );
        
        }
        { //::core::pose::Pose::atom_tree
        
            typedef ::core::kinematics::AtomTree const & ( ::core::pose::Pose::*atom_tree_function_type )(  ) const;
            
            Pose_exposer.def( 
                "atom_tree"
                , atom_tree_function_type( &::core::pose::Pose::atom_tree )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::core::pose::Pose::chain
        
            typedef int ( ::core::pose::Pose::*chain_function_type )( int const ) const;
            
            Pose_exposer.def( 
                "chain"
                , chain_function_type( &::core::pose::Pose::chain )
                , ( bp::arg("seqpos") ) );
        
        }
        { //::core::pose::Pose::chi
        
            typedef ::core::Real ( ::core::pose::Pose::*chi_function_type )( int const,int const ) const;
            
            Pose_exposer.def( 
                "chi"
                , chi_function_type( &::core::pose::Pose::chi )
                , ( bp::arg("chino"), bp::arg("seqpos") ) );
        
        }
        { //::core::pose::Pose::clear
        
            typedef void ( ::core::pose::Pose::*clear_function_type )(  ) ;
            
            Pose_exposer.def( 
                "clear"
                , clear_function_type( &::core::pose::Pose::clear ) );
        
        }
        { //::core::pose::Pose::conformation
        
            typedef ::core::conformation::Conformation const & ( ::core::pose::Pose::*conformation_function_type )(  ) const;
            
            Pose_exposer.def( 
                "conformation"
                , conformation_function_type( &::core::pose::Pose::conformation )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::core::pose::Pose::conformation
        
            typedef ::core::conformation::Conformation & ( ::core::pose::Pose::*conformation_function_type )(  ) ;
            
            Pose_exposer.def( 
                "conformation"
                , conformation_function_type( &::core::pose::Pose::conformation )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::core::pose::Pose::copy_segment
        
            typedef void ( ::core::pose::Pose::*copy_segment_function_type )( int const,::core::pose::Pose const &,int const,int const ) ;
            
            Pose_exposer.def( 
                "copy_segment"
                , copy_segment_function_type( &::core::pose::Pose::copy_segment )
                , ( bp::arg("size"), bp::arg("src"), bp::arg("begin"), bp::arg("src_begin") ) );
        
        }
        { //::core::pose::Pose::dof
        
            typedef ::core::Real ( ::core::pose::Pose::*dof_function_type )( ::core::id::DOF_ID const & ) const;
            
            Pose_exposer.def( 
                "dof"
                , dof_function_type( &::core::pose::Pose::dof )
                , ( bp::arg("id") ) );
        
        }
        { //::core::pose::Pose::dump_pdb
        
            typedef bool ( ::core::pose::Pose::*dump_pdb_function_type )( ::std::string const & ) const;
            
            Pose_exposer.def( 
                "dump_pdb"
                , dump_pdb_function_type( &::core::pose::Pose::dump_pdb )
                , ( bp::arg("file_name") ) );
        
        }
        { //::core::pose::Pose::energies
        
            typedef ::core::scoring::Energies const & ( ::core::pose::Pose::*energies_function_type )(  ) const;
            
            Pose_exposer.def( 
                "energies"
                , energies_function_type( &::core::pose::Pose::energies )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::core::pose::Pose::energies
        
            typedef ::core::scoring::Energies & ( ::core::pose::Pose::*energies_function_type )(  ) ;
            
            Pose_exposer.def( 
                "energies"
                , energies_function_type( &::core::pose::Pose::energies )
                , bp::return_value_policy< bp::copy_non_const_reference >() );
        
        }
        { //::core::pose::Pose::fold_tree
        
            typedef ::core::kinematics::FoldTree const & ( ::core::pose::Pose::*fold_tree_function_type )(  ) const;
            
            Pose_exposer.def( 
                "fold_tree"
                , fold_tree_function_type( &::core::pose::Pose::fold_tree )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::core::pose::Pose::fold_tree
        
            typedef void ( ::core::pose::Pose::*fold_tree_function_type )( ::core::kinematics::FoldTree const & ) ;
            
            Pose_exposer.def( 
                "fold_tree"
                , fold_tree_function_type( &::core::pose::Pose::fold_tree )
                , ( bp::arg("fold_tree_in") ) );
        
        }
        { //::core::pose::Pose::jump
        
            typedef ::core::kinematics::Jump const & ( ::core::pose::Pose::*jump_function_type )( int const ) const;
            
            Pose_exposer.def( 
                "jump"
                , jump_function_type( &::core::pose::Pose::jump )
                , ( bp::arg("jump_number") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::core::pose::Pose::jump
        
            typedef ::core::kinematics::Jump const & ( ::core::pose::Pose::*jump_function_type )( ::core::id::AtomID const & ) const;
            
            Pose_exposer.def( 
                "jump"
                , jump_function_type( &::core::pose::Pose::jump )
                , ( bp::arg("id") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::core::pose::Pose::n_residue
        
            typedef ::size_t ( ::core::pose::Pose::*n_residue_function_type )(  ) const;
            
            Pose_exposer.def( 
                "n_residue"
                , n_residue_function_type( &::core::pose::Pose::n_residue ) );
        
        }
        { //::core::pose::Pose::num_jump
        
            typedef int ( ::core::pose::Pose::*num_jump_function_type )(  ) const;
            
            Pose_exposer.def( 
                "num_jump"
                , num_jump_function_type( &::core::pose::Pose::num_jump ) );
        
        }
        { //::core::pose::Pose::omega
        
            typedef ::core::Real ( ::core::pose::Pose::*omega_function_type )( int const ) const;
            
            Pose_exposer.def( 
                "omega"
                , omega_function_type( &::core::pose::Pose::omega )
                , ( bp::arg("seqpos") ) );
        
        }
        { //::core::pose::Pose::phi
        
            typedef ::core::Real ( ::core::pose::Pose::*phi_function_type )( int const ) const;
            
            Pose_exposer.def( 
                "phi"
                , phi_function_type( &::core::pose::Pose::phi )
                , ( bp::arg("pos") ) );
        
        }
        { //::core::pose::Pose::psi
        
            typedef ::core::Real ( ::core::pose::Pose::*psi_function_type )( int const ) const;
            
            Pose_exposer.def( 
                "psi"
                , psi_function_type( &::core::pose::Pose::psi )
                , ( bp::arg("seqpos") ) );
        
        }
        { //::core::pose::Pose::replace_residue
        
            typedef void ( ::core::pose::Pose::*replace_residue_function_type )( int const,::core::conformation::Residue const &,bool const ) ;
            
            Pose_exposer.def( 
                "replace_residue"
                , replace_residue_function_type( &::core::pose::Pose::replace_residue )
                , ( bp::arg("seqpos"), bp::arg("new_rsd_in"), bp::arg("orient_backbone") ) );
        
        }
        { //::core::pose::Pose::residue
        
            typedef ::core::conformation::Residue const & ( ::core::pose::Pose::*residue_function_type )( int const ) const;
            
            Pose_exposer.def( 
                "residue"
                , residue_function_type( &::core::pose::Pose::residue )
                , ( bp::arg("seqpos") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::core::pose::Pose::scoring_begin
        
            typedef void ( ::core::pose::Pose::*scoring_begin_function_type )( ::core::scoring::ScoreFunctionInfoOP ) ;
            
            Pose_exposer.def( 
                "scoring_begin"
                , scoring_begin_function_type( &::core::pose::Pose::scoring_begin )
                , ( bp::arg("info") ) );
        
        }
        { //::core::pose::Pose::scoring_end
        
            typedef void ( ::core::pose::Pose::*scoring_end_function_type )(  ) ;
            
            Pose_exposer.def( 
                "scoring_end"
                , scoring_end_function_type( &::core::pose::Pose::scoring_end ) );
        
        }
        { //::core::pose::Pose::secstruct
        
            typedef char ( ::core::pose::Pose::*secstruct_function_type )( int const ) const;
            
            Pose_exposer.def( 
                "secstruct"
                , secstruct_function_type( &::core::pose::Pose::secstruct )
                , ( bp::arg("arg0") ) );
        
        }
        { //::core::pose::Pose::sequence
        
            typedef ::std::string ( ::core::pose::Pose::*sequence_function_type )(  ) const;
            
            Pose_exposer.def( 
                "sequence"
                , sequence_function_type( &::core::pose::Pose::sequence ) );
        
        }
        { //::core::pose::Pose::set_chi
        
            typedef void ( ::core::pose::Pose::*set_chi_function_type )( int const,int const,::core::Real const ) ;
            
            Pose_exposer.def( 
                "set_chi"
                , set_chi_function_type( &::core::pose::Pose::set_chi )
                , ( bp::arg("chino"), bp::arg("seqpos"), bp::arg("setting") ) );
        
        }
        { //::core::pose::Pose::set_dof
        
            typedef void ( ::core::pose::Pose::*set_dof_function_type )( ::core::id::DOF_ID const &,::core::Real const ) ;
            
            Pose_exposer.def( 
                "set_dof"
                , set_dof_function_type( &::core::pose::Pose::set_dof )
                , ( bp::arg("id"), bp::arg("setting") ) );
        
        }
        { //::core::pose::Pose::set_jump
        
            typedef void ( ::core::pose::Pose::*set_jump_function_type )( int const,::core::kinematics::Jump const & ) ;
            
            Pose_exposer.def( 
                "set_jump"
                , set_jump_function_type( &::core::pose::Pose::set_jump )
                , ( bp::arg("jump_number"), bp::arg("new_jump") ) );
        
        }
        { //::core::pose::Pose::set_jump
        
            typedef void ( ::core::pose::Pose::*set_jump_function_type )( ::core::id::AtomID const &,::core::kinematics::Jump const & ) ;
            
            Pose_exposer.def( 
                "set_jump"
                , set_jump_function_type( &::core::pose::Pose::set_jump )
                , ( bp::arg("id"), bp::arg("new_jump") ) );
        
        }
        { //::core::pose::Pose::set_omega
        
            typedef void ( ::core::pose::Pose::*set_omega_function_type )( int const,::core::Real const ) ;
            
            Pose_exposer.def( 
                "set_omega"
                , set_omega_function_type( &::core::pose::Pose::set_omega )
                , ( bp::arg("seqpos"), bp::arg("setting") ) );
        
        }
        { //::core::pose::Pose::set_phi
        
            typedef void ( ::core::pose::Pose::*set_phi_function_type )( int const,::core::Real const ) ;
            
            Pose_exposer.def( 
                "set_phi"
                , set_phi_function_type( &::core::pose::Pose::set_phi )
                , ( bp::arg("seqpos"), bp::arg("setting") ) );
        
        }
        { //::core::pose::Pose::set_psi
        
            typedef void ( ::core::pose::Pose::*set_psi_function_type )( int const,::core::Real const ) ;
            
            Pose_exposer.def( 
                "set_psi"
                , set_psi_function_type( &::core::pose::Pose::set_psi )
                , ( bp::arg("seqpos"), bp::arg("setting") ) );
        
        }
        { //::core::pose::Pose::set_torsion
        
            typedef void ( ::core::pose::Pose::*set_torsion_function_type )( ::core::id::TorsionID const &,::core::Real const ) ;
            
            Pose_exposer.def( 
                "set_torsion"
                , set_torsion_function_type( &::core::pose::Pose::set_torsion )
                , ( bp::arg("id"), bp::arg("setting") ) );
        
        }
        { //::core::pose::Pose::set_xyz
        
            typedef void ( ::core::pose::Pose::*set_xyz_function_type )( ::core::id::AtomID const &,::core::PointPosition const & ) ;
            
            Pose_exposer.def( 
                "set_xyz"
                , set_xyz_function_type( &::core::pose::Pose::set_xyz )
                , ( bp::arg("id"), bp::arg("point") ) );
        
        }
        { //::core::pose::Pose::torsion
        
            typedef ::core::Real ( ::core::pose::Pose::*torsion_function_type )( ::core::id::TorsionID const & ) const;
            
            Pose_exposer.def( 
                "torsion"
                , torsion_function_type( &::core::pose::Pose::torsion )
                , ( bp::arg("id") ) );
        
        }
        { //::core::pose::Pose::total_residue
        
            typedef ::size_t ( ::core::pose::Pose::*total_residue_function_type )(  ) const;
            
            Pose_exposer.def( 
                "total_residue"
                , total_residue_function_type( &::core::pose::Pose::total_residue ) );
        
        }
        { //::core::pose::Pose::update_actcoords
        
            typedef void ( ::core::pose::Pose::*update_actcoords_function_type )(  ) ;
            
            Pose_exposer.def( 
                "update_actcoords"
                , update_actcoords_function_type( &::core::pose::Pose::update_actcoords ) );
        
        }
        { //::core::pose::Pose::update_residue_neighbors
        
            typedef void ( ::core::pose::Pose::*update_residue_neighbors_function_type )(  ) ;
            
            Pose_exposer.def( 
                "update_residue_neighbors"
                , update_residue_neighbors_function_type( &::core::pose::Pose::update_residue_neighbors ) );
        
        }
        { //::core::pose::Pose::xyz
        
            typedef ::core::PointPosition const & ( ::core::pose::Pose::*xyz_function_type )( ::core::id::AtomID const & ) const;
            
            Pose_exposer.def( 
                "xyz"
                , xyz_function_type( &::core::pose::Pose::xyz )
                , ( bp::arg("id") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
    }

    { //::core::scoring::ScoreFunction
        typedef bp::class_< core::scoring::ScoreFunction, utility::pointer::owning_ptr< ::core::scoring::ScoreFunction > > ScoreFunction_exposer_t;
        ScoreFunction_exposer_t ScoreFunction_exposer = ScoreFunction_exposer_t( "ScoreFunction" );
        bp::scope ScoreFunction_scope( ScoreFunction_exposer );
        ScoreFunction_exposer.def( bp::init< >() );
        ScoreFunction_exposer.def( bp::init< core::scoring::ScoreFunction const & >(( bp::arg("arg0") )) );
        { //::core::scoring::ScoreFunction::accumulate_residue_total_energies
        
            typedef void ( ::core::scoring::ScoreFunction::*accumulate_residue_total_energies_function_type )( ::core::pose::Pose & ) const;
            
            ScoreFunction_exposer.def( 
                "accumulate_residue_total_energies"
                , accumulate_residue_total_energies_function_type( &::core::scoring::ScoreFunction::accumulate_residue_total_energies )
                , ( bp::arg("pose") ) );
        
        }
        { //::core::scoring::ScoreFunction::bump_check_backbone
        
            typedef void ( ::core::scoring::ScoreFunction::*bump_check_backbone_function_type )( ::core::conformation::Residue const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::EnergyMap & ) const;
            
            ScoreFunction_exposer.def( 
                "bump_check_backbone"
                , bump_check_backbone_function_type( &::core::scoring::ScoreFunction::bump_check_backbone )
                , ( bp::arg("rsd1"), bp::arg("rsd2"), bp::arg("pose"), bp::arg("emap") ) );
        
        }
        { //::core::scoring::ScoreFunction::bump_check_full
        
            typedef void ( ::core::scoring::ScoreFunction::*bump_check_full_function_type )( ::core::conformation::Residue const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::EnergyMap & ) const;
            
            ScoreFunction_exposer.def( 
                "bump_check_full"
                , bump_check_full_function_type( &::core::scoring::ScoreFunction::bump_check_full )
                , ( bp::arg("rsd1"), bp::arg("rsd2"), bp::arg("pose"), bp::arg("emap") ) );
        
        }
        { //::core::scoring::ScoreFunction::cd_2b_types
        
            typedef ::core::scoring::ScoreTypes const & ( ::core::scoring::ScoreFunction::*cd_2b_types_function_type )(  ) const;
            
            ScoreFunction_exposer.def( 
                "cd_2b_types"
                , cd_2b_types_function_type( &::core::scoring::ScoreFunction::cd_2b_types )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::core::scoring::ScoreFunction::ci_1b_types
        
            typedef ::core::scoring::ScoreTypes const & ( ::core::scoring::ScoreFunction::*ci_1b_types_function_type )(  ) const;
            
            ScoreFunction_exposer.def( 
                "ci_1b_types"
                , ci_1b_types_function_type( &::core::scoring::ScoreFunction::ci_1b_types )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::core::scoring::ScoreFunction::ci_2b_types
        
            typedef ::core::scoring::ScoreTypes const & ( ::core::scoring::ScoreFunction::*ci_2b_types_function_type )(  ) const;
            
            ScoreFunction_exposer.def( 
                "ci_2b_types"
                , ci_2b_types_function_type( &::core::scoring::ScoreFunction::ci_2b_types )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::core::scoring::ScoreFunction::clone
        
            typedef ::core::scoring::ScoreFunctionOP ( ::core::scoring::ScoreFunction::*clone_function_type )(  ) const;
            
            ScoreFunction_exposer.def( 
                "clone"
                , clone_function_type( &::core::scoring::ScoreFunction::clone ) );
        
        }
        { //::core::scoring::ScoreFunction::eval_atom_derivative
        
            typedef void ( ::core::scoring::ScoreFunction::*eval_atom_derivative_function_type )( ::core::id::AtomID const &,::core::pose::Pose const &,::core::Vector &,::core::Vector & ) const;
            
            ScoreFunction_exposer.def( 
                "eval_atom_derivative"
                , eval_atom_derivative_function_type( &::core::scoring::ScoreFunction::eval_atom_derivative )
                , ( bp::arg("atom_id"), bp::arg("pose"), bp::arg("F1"), bp::arg("F2") ) );
        
        }
        { //::core::scoring::ScoreFunction::eval_cd_2b
        
            typedef void ( ::core::scoring::ScoreFunction::*eval_cd_2b_function_type )( ::core::conformation::Residue const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::EnergyMap & ) const;
            
            ScoreFunction_exposer.def( 
                "eval_cd_2b"
                , eval_cd_2b_function_type( &::core::scoring::ScoreFunction::eval_cd_2b )
                , ( bp::arg("rsd1"), bp::arg("rsd2"), bp::arg("pose"), bp::arg("emap") ) );
        
        }
        { //::core::scoring::ScoreFunction::eval_ci_1b
        
            typedef void ( ::core::scoring::ScoreFunction::*eval_ci_1b_function_type )( ::core::conformation::Residue const &,::core::scoring::EnergyMap & ) const;
            
            ScoreFunction_exposer.def( 
                "eval_ci_1b"
                , eval_ci_1b_function_type( &::core::scoring::ScoreFunction::eval_ci_1b )
                , ( bp::arg("rsd"), bp::arg("emap") ) );
        
        }
        { //::core::scoring::ScoreFunction::eval_ci_2b
        
            typedef void ( ::core::scoring::ScoreFunction::*eval_ci_2b_function_type )( ::core::conformation::Residue const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::EnergyMap & ) const;
            
            ScoreFunction_exposer.def( 
                "eval_ci_2b"
                , eval_ci_2b_function_type( &::core::scoring::ScoreFunction::eval_ci_2b )
                , ( bp::arg("rsd1"), bp::arg("rsd2"), bp::arg("pose"), bp::arg("emap") ) );
        
        }
        { //::core::scoring::ScoreFunction::eval_dof_derivative
        
            typedef ::core::Real ( ::core::scoring::ScoreFunction::*eval_dof_derivative_function_type )( ::core::id::DOF_ID const &,::core::id::TorsionID const &,::core::pose::Pose const & ) const;
            
            ScoreFunction_exposer.def( 
                "eval_dof_derivative"
                , eval_dof_derivative_function_type( &::core::scoring::ScoreFunction::eval_dof_derivative )
                , ( bp::arg("dof_id"), bp::arg("torsion_id"), bp::arg("pose") ) );
        
        }
        { //::core::scoring::ScoreFunction::eval_onebody_energies
        
            typedef void ( ::core::scoring::ScoreFunction::*eval_onebody_energies_function_type )( ::core::pose::Pose & ) const;
            
            ScoreFunction_exposer.def( 
                "eval_onebody_energies"
                , eval_onebody_energies_function_type( &::core::scoring::ScoreFunction::eval_onebody_energies )
                , ( bp::arg("pose") ) );
        
        }
        { //::core::scoring::ScoreFunction::eval_twobody_neighbor_energies
        
            typedef void ( ::core::scoring::ScoreFunction::*eval_twobody_neighbor_energies_function_type )( ::core::pose::Pose & ) const;
            
            ScoreFunction_exposer.def( 
                "eval_twobody_neighbor_energies"
                , eval_twobody_neighbor_energies_function_type( &::core::scoring::ScoreFunction::eval_twobody_neighbor_energies )
                , ( bp::arg("pose") ) );
        
        }
        { //::core::scoring::ScoreFunction::evaluate_rotamer_background_energies
        
            typedef void ( ::core::scoring::ScoreFunction::*evaluate_rotamer_background_energies_function_type )( ::core::pack::rotamer_set::RotamerSet const &,::core::conformation::Residue const &,::core::pose::Pose const &,::utility::vector1<double, std::allocator<double> > & ) const;
            
            ScoreFunction_exposer.def( 
                "evaluate_rotamer_background_energies"
                , evaluate_rotamer_background_energies_function_type( &::core::scoring::ScoreFunction::evaluate_rotamer_background_energies )
                , ( bp::arg("set1"), bp::arg("residue2"), bp::arg("pose"), bp::arg("energy_vector") ) );
        
        }
        { //::core::scoring::ScoreFunction::evaluate_rotamer_pair_energies
        
            typedef void ( ::core::scoring::ScoreFunction::*evaluate_rotamer_pair_energies_function_type )( ::core::pack::rotamer_set::RotamerSet const &,::core::pack::rotamer_set::RotamerSet const &,::core::pose::Pose const &,::ObjexxFCL::FArray2D<double> & ) const;
            
            ScoreFunction_exposer.def( 
                "evaluate_rotamer_pair_energies"
                , evaluate_rotamer_pair_energies_function_type( &::core::scoring::ScoreFunction::evaluate_rotamer_pair_energies )
                , ( bp::arg("set1"), bp::arg("set1"), bp::arg("pose"), bp::arg("energy_table") ) );
        
        }
        { //::core::scoring::ScoreFunction::get_weight
        
            typedef ::core::Real ( ::core::scoring::ScoreFunction::*get_weight_function_type )( ::core::scoring::ScoreType const & ) const;
            
            ScoreFunction_exposer.def( 
                "get_weight"
                , get_weight_function_type( &::core::scoring::ScoreFunction::get_weight )
                , ( bp::arg("t") ) );
        
        }
        { //::core::scoring::ScoreFunction::has_nonzero_weight
        
            typedef bool ( ::core::scoring::ScoreFunction::*has_nonzero_weight_function_type )( ::core::scoring::ScoreType const & ) const;
            
            ScoreFunction_exposer.def( 
                "has_nonzero_weight"
                , has_nonzero_weight_function_type( &::core::scoring::ScoreFunction::has_nonzero_weight )
                , ( bp::arg("t") ) );
        
        }
        { //::core::scoring::ScoreFunction::has_zero_weight
        
            typedef bool ( ::core::scoring::ScoreFunction::*has_zero_weight_function_type )( ::core::scoring::ScoreType const & ) const;
            
            ScoreFunction_exposer.def( 
                "has_zero_weight"
                , has_zero_weight_function_type( &::core::scoring::ScoreFunction::has_zero_weight )
                , ( bp::arg("t") ) );
        
        }
        { //::core::scoring::ScoreFunction::indicate_required_context_graphs
        
            typedef void ( ::core::scoring::ScoreFunction::*indicate_required_context_graphs_function_type )( ::utility::vector1<bool, std::allocator<bool> > & ) const;
            
            ScoreFunction_exposer.def( 
                "indicate_required_context_graphs"
                , indicate_required_context_graphs_function_type( &::core::scoring::ScoreFunction::indicate_required_context_graphs )
                , ( bp::arg("context_graphs_required") ) );
        
        }
        { //::core::scoring::ScoreFunction::info
        
            typedef ::core::scoring::ScoreFunctionInfoOP ( ::core::scoring::ScoreFunction::*info_function_type )(  ) const;
            
            ScoreFunction_exposer.def( 
                "info"
                , info_function_type( &::core::scoring::ScoreFunction::info ) );
        
        }
        { //::core::scoring::ScoreFunction::max_atomic_interaction_cutoff
        
            typedef ::core::Distance ( ::core::scoring::ScoreFunction::*max_atomic_interaction_cutoff_function_type )(  ) const;
            
            ScoreFunction_exposer.def( 
                "max_atomic_interaction_cutoff"
                , max_atomic_interaction_cutoff_function_type( &::core::scoring::ScoreFunction::max_atomic_interaction_cutoff ) );
        
        }
        { //::core::scoring::ScoreFunction::operator()
        
            typedef ::core::Real ( ::core::scoring::ScoreFunction::*__call___function_type )( ::core::pose::Pose & ) const;
            
            ScoreFunction_exposer.def( 
                "__call__"
                , __call___function_type( &::core::scoring::ScoreFunction::operator() )
                , ( bp::arg("pose") ) );
        
        }
        { //::core::scoring::ScoreFunction::operator[]
        
            typedef ::core::Real ( ::core::scoring::ScoreFunction::*__getitem___function_type )( ::core::scoring::ScoreType const & ) const;
            
            ScoreFunction_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::core::scoring::ScoreFunction::operator[] )
                , ( bp::arg("t") ) );
        
        }
        { //::core::scoring::ScoreFunction::prepare_rotamers_for_packing
        
            typedef void ( ::core::scoring::ScoreFunction::*prepare_rotamers_for_packing_function_type )( ::core::pose::Pose const &,::core::pack::rotamer_set::RotamerSet & ) const;
            
            ScoreFunction_exposer.def( 
                "prepare_rotamers_for_packing"
                , prepare_rotamers_for_packing_function_type( &::core::scoring::ScoreFunction::prepare_rotamers_for_packing )
                , ( bp::arg("pose"), bp::arg("set") ) );
        
        }
        { //::core::scoring::ScoreFunction::score_types_by_method_type
        
            typedef ::core::scoring::ScoreTypes const & ( ::core::scoring::ScoreFunction::*score_types_by_method_type_function_type )( ::core::scoring::methods::EnergyMethodType const & ) const;
            
            ScoreFunction_exposer.def( 
                "score_types_by_method_type"
                , score_types_by_method_type_function_type( &::core::scoring::ScoreFunction::score_types_by_method_type )
                , ( bp::arg("t") )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::core::scoring::ScoreFunction::set_etable
        
            typedef void ( ::core::scoring::ScoreFunction::*set_etable_function_type )( ::std::string const & ) ;
            
            ScoreFunction_exposer.def( 
                "set_etable"
                , set_etable_function_type( &::core::scoring::ScoreFunction::set_etable )
                , ( bp::arg("etable_name") ) );
        
        }
        { //::core::scoring::ScoreFunction::set_weight
        
            typedef void ( ::core::scoring::ScoreFunction::*set_weight_function_type )( ::core::scoring::ScoreType const &,::core::Real const & ) ;
            
            ScoreFunction_exposer.def( 
                "set_weight"
                , set_weight_function_type( &::core::scoring::ScoreFunction::set_weight )
                , ( bp::arg("t"), bp::arg("setting") ) );
        
        }
        { //::core::scoring::ScoreFunction::setup_for_derivatives
        
            typedef void ( ::core::scoring::ScoreFunction::*setup_for_derivatives_function_type )( ::core::pose::Pose & ) const;
            
            ScoreFunction_exposer.def( 
                "setup_for_derivatives"
                , setup_for_derivatives_function_type( &::core::scoring::ScoreFunction::setup_for_derivatives )
                , ( bp::arg("pose") ) );
        
        }
        { //::core::scoring::ScoreFunction::setup_for_minimizing
        
            typedef void ( ::core::scoring::ScoreFunction::*setup_for_minimizing_function_type )( ::core::pose::Pose &,::core::optimization::MinimizerMap const & ) const;
            
            ScoreFunction_exposer.def( 
                "setup_for_minimizing"
                , setup_for_minimizing_function_type( &::core::scoring::ScoreFunction::setup_for_minimizing )
                , ( bp::arg("pose"), bp::arg("min_map") ) );
        
        }
        { //::core::scoring::ScoreFunction::setup_for_packing
        
            typedef void ( ::core::scoring::ScoreFunction::*setup_for_packing_function_type )( ::core::pose::Pose & ) const;
            
            ScoreFunction_exposer.def( 
                "setup_for_packing"
                , setup_for_packing_function_type( &::core::scoring::ScoreFunction::setup_for_packing )
                , ( bp::arg("pose") ) );
        
        }
        { //::core::scoring::ScoreFunction::update_residue_for_packing
        
            typedef void ( ::core::scoring::ScoreFunction::*update_residue_for_packing_function_type )( ::core::pose::Pose &,::size_t ) const;
            
            ScoreFunction_exposer.def( 
                "update_residue_for_packing"
                , update_residue_for_packing_function_type( &::core::scoring::ScoreFunction::update_residue_for_packing )
                , ( bp::arg("pose"), bp::arg("resid") ) );
        
        }
        { //::core::scoring::ScoreFunction::weights
        
            typedef ::core::scoring::EnergyMap const & ( ::core::scoring::ScoreFunction::*weights_function_type )(  ) const;
            
            ScoreFunction_exposer.def( 
                "weights"
                , weights_function_type( &::core::scoring::ScoreFunction::weights )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
    }

    bp::class_< ClassicRelax_wrapper, utility::pointer::owning_ptr< ::protocols::ClassicRelax >, boost::noncopyable >( "ClassicRelax", bp::init< core::scoring::ScoreFunctionOP, core::pose::Pose & >(( bp::arg("_scorefxn"), bp::arg("_pose") )) )    
        .def( 
            "moves1"
            , (::protocols::moves::MoveSetOP ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::moves1 ) )    
        .def( 
            "moves2"
            , (::protocols::moves::MoveSetOP ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::moves2 ) )    
        .def( 
            "moves3"
            , (::protocols::moves::MoveSetOP ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::moves3 ) )    
        .def( 
            "run"
            , (void ( ::protocols::ClassicRelax::* )(  ) )(&::protocols::ClassicRelax::run)
            , (void ( ClassicRelax_wrapper::* )(  ) )(&ClassicRelax_wrapper::default_run) )    
        .def( 
            "set_default"
            , (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default ) )    
        .def( 
            "set_default_full_packer"
            , (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default_full_packer ) )    
        .def( 
            "set_default_move_map"
            , (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default_move_map ) )    
        .def( 
            "set_default_moveset_phase1"
            , (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default_moveset_phase1 ) )    
        .def( 
            "set_default_moveset_phase2"
            , (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default_moveset_phase2 ) )    
        .def( 
            "set_default_moveset_phase3"
            , (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default_moveset_phase3 ) )    
        .def( 
            "set_default_pack_task"
            , (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default_pack_task ) );

    bp::class_< protocols::DockingHighRes >( "DockingHighRes", bp::init< core::pose::PoseOP, int >(( bp::arg("pose_in"), bp::arg("rb_jump") )) )    
        .def( 
            "bb"
            , (bool const ( ::protocols::DockingHighRes::* )(  ) )( &::protocols::DockingHighRes::bb ) )    
        .def( 
            "chi"
            , (bool const ( ::protocols::DockingHighRes::* )(  ) )( &::protocols::DockingHighRes::chi ) )    
        .def( 
            "mcm_protocol"
            , (void ( ::protocols::DockingHighRes::* )(  ) )( &::protocols::DockingHighRes::mcm_protocol ) )    
        .def( 
            "minimize_trial"
            , (void ( ::protocols::DockingHighRes::* )(  ) )( &::protocols::DockingHighRes::minimize_trial ) )    
        .def( 
            "rot_magnitude"
            , (::protocols::moves::Real const ( ::protocols::DockingHighRes::* )(  ) )( &::protocols::DockingHighRes::rot_magnitude ) )    
        .def( 
            "trans_magnitude"
            , (::protocols::moves::Real const ( ::protocols::DockingHighRes::* )(  ) )( &::protocols::DockingHighRes::trans_magnitude ) );

    bp::class_< protocols::moves::MonteCarlo, utility::pointer::owning_ptr< ::protocols::moves::MonteCarlo > >( "MonteCarlo", bp::init< core::pose::Pose const &, core::scoring::ScoreFunction const &, double >(( bp::arg("init_pose"), bp::arg("scorefxn"), bp::arg("temperature") )) )    
        .def( 
            "best_pose"
            , (::core::pose::Pose const & ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::best_pose )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "best_score"
            , (::protocols::moves::Real ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::best_score ) )    
        .def( 
            "boltzmann"
            , (bool ( ::protocols::moves::MonteCarlo::* )( ::core::pose::Pose &,::std::string const & ) )( &::protocols::moves::MonteCarlo::boltzmann )
            , ( bp::arg("pose"), bp::arg("move_type")="unk" ) )    
        .def( 
            "low_pose"
            , (::core::pose::Pose const & ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::low_pose )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "low_score"
            , (::protocols::moves::Real ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::low_score ) )    
        .def( 
            "mc_accepted"
            , (int ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::mc_accepted ) )    
        .def( 
            "recover_low"
            , (void ( ::protocols::moves::MonteCarlo::* )( ::core::pose::Pose & ) )( &::protocols::moves::MonteCarlo::recover_low )
            , ( bp::arg("pose") ) )    
        .def( 
            "reset"
            , (void ( ::protocols::moves::MonteCarlo::* )( ::core::pose::Pose const & ) )( &::protocols::moves::MonteCarlo::reset )
            , ( bp::arg("pose") ) )    
        .def( 
            "reset_counters"
            , (void ( ::protocols::moves::MonteCarlo::* )(  ) )( &::protocols::moves::MonteCarlo::reset_counters ) )    
        .def( 
            "score_function"
            , (void ( ::protocols::moves::MonteCarlo::* )( ::core::scoring::ScoreFunction const & ) )( &::protocols::moves::MonteCarlo::score_function )
            , ( bp::arg("scorefxn") ) )    
        .def( 
            "score_function"
            , (::core::scoring::ScoreFunction const & ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::score_function )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "set_autotemp"
            , (void ( ::protocols::moves::MonteCarlo::* )( bool const,::protocols::moves::Real const ) )( &::protocols::moves::MonteCarlo::set_autotemp )
            , ( bp::arg("setting"), bp::arg("quench_temp") ) )    
        .def( 
            "set_temperature"
            , (void ( ::protocols::moves::MonteCarlo::* )( ::protocols::moves::Real const ) )( &::protocols::moves::MonteCarlo::set_temperature )
            , ( bp::arg("temp") ) )    
        .def( 
            "show_counters"
            , (void ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::show_counters ) )    
        .def( 
            "show_scores"
            , (void ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::show_scores ) );

    bp::class_< Mover_wrapper, utility::pointer::owning_ptr<Mover_wrapper>, boost::noncopyable >( "Mover", bp::init< std::string const & >(( bp::arg("type_in") )) )    
        .def( 
            "acceptance_rate"
            , (::protocols::moves::Real ( ::protocols::moves::Mover::* )(  ) const)( &::protocols::moves::Mover::acceptance_rate ) )    
        .def( 
            "apply"
            , bp::pure_virtual( (void ( ::protocols::moves::Mover::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&::protocols::moves::Mover::apply) )
            , ( bp::arg("pose"), bp::arg("mm") ) )    
        .def( 
            "get_type"
            , (::std::string const & ( ::protocols::moves::Mover::* )(  ) const)( &::protocols::moves::Mover::get_type )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "get_weight"
            , (::protocols::moves::Real ( ::protocols::moves::Mover::* )(  ) const)( &::protocols::moves::Mover::get_weight ) )    
        .def( 
            "set_accepted"
            , (void ( ::protocols::moves::Mover::* )( bool ) const)( &::protocols::moves::Mover::set_accepted )
            , ( bp::arg("result") ) )    
        .def( 
            "set_type"
            , (void ( Mover_wrapper::* )( ::std::string const & ) const)(&Mover_wrapper::set_type)
            , ( bp::arg("new_type") ) )    
        .def( 
            "set_weight"
            , (void ( ::protocols::moves::Mover::* )( ::protocols::moves::Real ) )( &::protocols::moves::Mover::set_weight )
            , ( bp::arg("new_weight") ) )    
        .def( 
            "type"
            , (::std::string const & ( ::protocols::moves::Mover::* )(  ) const)( &::protocols::moves::Mover::type )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< MoveSet_wrapper, bp::bases< protocols::moves::Mover >, utility::pointer::owning_ptr< ::protocols::moves::MoveSet > >( "MoveSet" )    
        .def( bp::init< >() )    
        .def( 
            "add_move"
            , (void ( ::protocols::moves::MoveSet::* )( ::protocols::moves::MoverOP const & ) )( &::protocols::moves::MoveSet::add_move )
            , ( bp::arg("new_move") ) )    
        .def( 
            "apply"
            , (void ( ::protocols::moves::MoveSet::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&::protocols::moves::MoveSet::apply)
            , (void ( MoveSet_wrapper::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&MoveSet_wrapper::default_apply)
            , ( bp::arg("pose"), bp::arg("mm") ) )    
        .def( 
            "clear"
            , (void ( ::protocols::moves::MoveSet::* )(  ) )( &::protocols::moves::MoveSet::clear ) )    
        .def( 
            "set_type"
            , (void ( MoveSet_wrapper::* )( ::std::string const & ) const)(&MoveSet_wrapper::set_type)
            , ( bp::arg("new_type") ) );

    bp::class_< PackMover_wrapper, bp::bases< protocols::moves::Mover >, utility::pointer::owning_ptr< ::protocols::moves::PackMover > >( "PackMover", bp::init< core::scoring::ScoreFunctionOP const &, core::pack::task::PackerTask const &, bp::optional< protocols::moves::PackType const & > >(( bp::arg("scorefxn_in"), bp::arg("task_in"), bp::arg("pack_type_in")=::protocols::moves::PackType_off )) )    
        .def( 
            "apply"
            , (void ( ::protocols::moves::PackMover::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&::protocols::moves::PackMover::apply)
            , (void ( PackMover_wrapper::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&PackMover_wrapper::default_apply)
            , ( bp::arg("pose"), bp::arg("arg1") ) )    
        .def( 
            "pack_type"
            , (::protocols::moves::PackType ( ::protocols::moves::PackMover::* )(  ) )( &::protocols::moves::PackMover::pack_type ) )    
        .def( 
            "pack_type"
            , (void ( ::protocols::moves::PackMover::* )( ::protocols::moves::PackType ) )( &::protocols::moves::PackMover::pack_type )
            , ( bp::arg("pt") ) )    
        .def( 
            "set_type"
            , (void ( PackMover_wrapper::* )( ::std::string const & ) const)(&PackMover_wrapper::set_type)
            , ( bp::arg("new_type") ) );

    bp::class_< protocols::moves::ProtocolOptions >( "ProtocolOptions", bp::init< core::optimization::MinimizerOptions const &, protocols::moves::RottrialOptions const & >(( bp::arg("minimizer_options_in"), bp::arg("rottrial_options_in") )) )    
        .def( 
            "minimizer_options"
            , (::core::optimization::MinimizerOptions const & ( ::protocols::moves::ProtocolOptions::* )(  ) const)( &::protocols::moves::ProtocolOptions::minimizer_options )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "minimizer_options"
            , (void ( ::protocols::moves::ProtocolOptions::* )( ::core::optimization::MinimizerOptions const & ) )( &::protocols::moves::ProtocolOptions::minimizer_options )
            , ( bp::arg("minimizer_options_in") ) )    
        .def( 
            "rottrial_options"
            , (::protocols::moves::RottrialOptions const & ( ::protocols::moves::ProtocolOptions::* )(  ) const)( &::protocols::moves::ProtocolOptions::rottrial_options )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "rottrial_options"
            , (void ( ::protocols::moves::ProtocolOptions::* )( ::protocols::moves::RottrialOptions const & ) )( &::protocols::moves::ProtocolOptions::rottrial_options )
            , ( bp::arg("rottrial_options_in") ) );

    bp::class_< RigidBodyMover_wrapper, bp::bases< protocols::moves::Mover >, utility::pointer::owning_ptr< ::protocols::moves::RigidBodyMover > >( "RigidBodyMover" )    
        .def( bp::init< >() )    
        .def( 
            "apply"
            , (void ( ::protocols::moves::RigidBodyMover::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&::protocols::moves::RigidBodyMover::apply)
            , (void ( RigidBodyMover_wrapper::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&RigidBodyMover_wrapper::default_apply)
            , ( bp::arg("pose"), bp::arg("mm") ) )    
        .def( 
            "jump_number"
            , (void ( ::protocols::moves::RigidBodyMover::* )( int const ) )( &::protocols::moves::RigidBodyMover::jump_number )
            , ( bp::arg("jump_number_in") ) )    
        .def( 
            "jump_number"
            , (int ( ::protocols::moves::RigidBodyMover::* )(  ) const)( &::protocols::moves::RigidBodyMover::jump_number ) )    
        .def( 
            "set_center"
            , (void ( ::protocols::moves::RigidBodyMover::* )( ::core::Vector const ) )( &::protocols::moves::RigidBodyMover::set_center )
            , ( bp::arg("rot_center_in") ) )    
        .def( 
            "set_magnitudes"
            , (void ( ::protocols::moves::RigidBodyMover::* )( ::std::string const,::protocols::moves::Real const ) )( &::protocols::moves::RigidBodyMover::set_magnitudes )
            , ( bp::arg("type"), bp::arg("magnitude") ) )    
        .def( 
            "set_type"
            , (void ( RigidBodyMover_wrapper::* )( ::std::string const & ) const)(&RigidBodyMover_wrapper::set_type)
            , ( bp::arg("new_type") ) );

    bp::class_< RigidBodyPerturbMover_wrapper, bp::bases< protocols::moves::RigidBodyMover >, utility::pointer::owning_ptr< ::protocols::moves::RigidBodyPerturbMover > >( "RigidBodyPerturbMover" )    
        .def( 
            "set_type"
            , (void ( RigidBodyPerturbMover_wrapper::* )( ::std::string const & ) const)(&RigidBodyPerturbMover_wrapper::set_type)
            , ( bp::arg("new_type") ) );

    bp::class_< protocols::moves::RottrialOptions, utility::pointer::owning_ptr< ::protocols::moves::RottrialOptions > >( "RottrialOptions", bp::init< core::pack::task::PackerTask const &, double >(( bp::arg("task_in"), bp::arg("energycut_in") )) )    
        .def( 
            "clone"
            , (::protocols::moves::RottrialOptionsOP ( ::protocols::moves::RottrialOptions::* )(  ) const)( &::protocols::moves::RottrialOptions::clone ) )    
        .def( 
            "energycut"
            , (::protocols::moves::Real ( ::protocols::moves::RottrialOptions::* )(  ) const)( &::protocols::moves::RottrialOptions::energycut ) )    
        .def( 
            "task"
            , (::core::pack::task::PackerTask const & ( ::protocols::moves::RottrialOptions::* )(  ) const)( &::protocols::moves::RottrialOptions::task )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< ShearMover_wrapper, bp::bases< protocols::moves::Mover >, utility::pointer::owning_ptr< ::protocols::moves::ShearMover > >( "ShearMover" )    
        .def( bp::init< >() )    
        .def( 
            "apply"
            , (void ( ::protocols::moves::ShearMover::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&::protocols::moves::ShearMover::apply)
            , (void ( ShearMover_wrapper::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&ShearMover_wrapper::default_apply)
            , ( bp::arg("pose"), bp::arg("mm") ) )    
        .def( 
            "nmoves"
            , (void ( ::protocols::moves::ShearMover::* )( ::size_t const ) )( &::protocols::moves::ShearMover::nmoves )
            , ( bp::arg("nmoves_in") ) )    
        .def( 
            "set_angle_max"
            , (void ( ::protocols::moves::ShearMover::* )( char const,::protocols::moves::Real const ) )( &::protocols::moves::ShearMover::set_angle_max )
            , ( bp::arg("type"), bp::arg("angle") ) )    
        .def( 
            "set_type"
            , (void ( ShearMover_wrapper::* )( ::std::string const & ) const)(&ShearMover_wrapper::set_type)
            , ( bp::arg("new_type") ) );

    bp::class_< SmallMover_wrapper, bp::bases< protocols::moves::Mover >, utility::pointer::owning_ptr< ::protocols::moves::SmallMover > >( "SmallMover" )    
        .def( bp::init< >() )    
        .def( 
            "apply"
            , (void ( ::protocols::moves::SmallMover::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&::protocols::moves::SmallMover::apply)
            , (void ( SmallMover_wrapper::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&SmallMover_wrapper::default_apply)
            , ( bp::arg("pose"), bp::arg("mm") ) )    
        .def( 
            "nmoves"
            , (void ( ::protocols::moves::SmallMover::* )( ::size_t const ) )( &::protocols::moves::SmallMover::nmoves )
            , ( bp::arg("nmoves_in") ) )    
        .def( 
            "set_angle_max"
            , (void ( ::protocols::moves::SmallMover::* )( char const,::protocols::moves::Real const ) )( &::protocols::moves::SmallMover::set_angle_max )
            , ( bp::arg("type"), bp::arg("angle") ) )    
        .def( 
            "set_type"
            , (void ( SmallMover_wrapper::* )( ::std::string const & ) const)(&SmallMover_wrapper::set_type)
            , ( bp::arg("new_type") ) );

    bp::class_< protocols::smanager::Score >( "Score" )    
        .def_readwrite( "RMS", &protocols::smanager::Score::RMS )    
        .def_readwrite( "file_name", &protocols::smanager::Score::file_name )    
        .def_readwrite( "score", &protocols::smanager::Score::score );

    bp::class_< protocols::smanager::ScoreManager >( "ScoreManager" )    
        .def( bp::init< >() )    
        .def( 
            "add"
            , (void ( ::protocols::smanager::ScoreManager::* )( ::protocols::smanager::Score &,::core::pose::Pose const & ) )( &::protocols::smanager::ScoreManager::add )
            , ( bp::arg("s"), bp::arg("pose") ) )    
        .def( 
            "write_score_file"
            , (void ( ::protocols::smanager::ScoreManager::* )( ::std::string ) )( &::protocols::smanager::ScoreManager::write_score_file )
            , ( bp::arg("fname") ) );

    { //::core::init
    
        typedef void ( *init_function_type )( ::std::string const & );
        
        bp::def( 
            "init"
            , init_function_type( &::core::init )
            , ( bp::arg("dbloc") ) );
    
    }

    { //::core::init
    
        typedef void ( *init_function_type )( int,char * * );
        
        bp::def( 
            "init"
            , init_function_type( &::core::init )
            , ( bp::arg("argc"), bp::arg("argv") ) );
    
    }

    { //::core::io::pdb::pose_from_pdb
    
        typedef void ( *pose_from_pdb_function_type )( ::core::pose::Pose &,::std::string const & );
        
        bp::def( 
            "pose_from_pdb"
            , pose_from_pdb_function_type( &::core::io::pdb::pose_from_pdb )
            , ( bp::arg("pose"), bp::arg("filename") ) );
    
    }

    { //::core::io::pdb::pose_from_pdb
    
        typedef void ( *pose_from_pdb_function_type )( ::core::pose::Pose &,::core::chemical::ResidueTypeSet const &,::std::string const & );
        
        bp::def( 
            "pose_from_pdb"
            , pose_from_pdb_function_type( &::core::io::pdb::pose_from_pdb )
            , ( bp::arg("pose"), bp::arg("residue_set"), bp::arg("filename") ) );
    
    }
    
    using namespace utility::pointer;
    using namespace protocols::moves;
    bp::implicitly_convertible< owning_ptr<SmallMover>, owning_ptr<Mover> >();
    bp::implicitly_convertible< owning_ptr<ShearMover>, owning_ptr<Mover> >();    
    bp::implicitly_convertible< owning_ptr<RigidBodyPerturbMover>, owning_ptr<Mover> >();        
    bp::implicitly_convertible< owning_ptr<RigidBodyMover>, owning_ptr<Mover> >();    
    bp::implicitly_convertible< owning_ptr<PackMover>, owning_ptr<Mover> >();        
    bp::implicitly_convertible< owning_ptr<MoveSet>, owning_ptr<Mover> >();            
    bp::implicitly_convertible< owning_ptr<MoveSet>, owning_ptr<Mover> >();                
    bp::implicitly_convertible< owning_ptr<Mover_wrapper>, owning_ptr<Mover> >();    


    
}
