# you can include comments by starting a line with a "#"


# The state vectors are defined on these lines.
# If you want to include multiple states for AA, e.g.
# add more lines to input_files/AA.states
# -- extra states can point to the same PDB
# to repack one PDB in duplicate
# -- or they can point to different PDBs reflecting
# alternate plausible binding conformations
STATE_VECTOR   A    input_files/A.states
STATE_VECTOR   B    input_files/B.states
STATE_VECTOR   AA   input_files/AA.states
STATE_VECTOR   BB   input_files/BB.states
STATE_VECTOR   AB   input_files/AB.states

SCALAR_EXPRESSION best_A = vmin( A )
SCALAR_EXPRESSION best_B = vmin( B )
SCALAR_EXPRESSION best_AA = vmin( AA )
SCALAR_EXPRESSION best_BB = vmin( BB )
SCALAR_EXPRESSION best_AB = vmin( AB )

# Notes on selection logic here:
# The binding energy of the homodimer is never greater than 0.  It gets to 0, and then
# the homodimer does not bind.  If a state says the binding energy is positive, then
# that state is reflecting an unoccupied region of conformation space; the real
# binding energy cannot be positive.  So: why do we say 0 * best_AA instead of 0?
# Because we will eventually identify the states that contributed to the fitness function
# at the conclusion of the run by recursing through the expression tree and taking
# branches (e.g. those within the "ite" clause) that are actually productive.
# Now.  The logic of this traversal is smart enough to say "I took the 'then' branch
# of the 'ite' function, so I'll continue descending into the 'then' branch and ignore
# the 'else' branch.  But it's not smart enough to say "Ah, I've multiplied the energy
# of this state by 0, so really, this state does not contribute to the fitness of the system."
# Basically, I'm exploiting a loophole of a less-than-perfect recursive descent scheme.

SCALAR_EXPRESSION dGbind_AA = ite( gt( best_AA - 2*best_A, 0 ), 0 * best_AA, best_AA - 2*best_A )
SCALAR_EXPRESSION dGbind_BB = ite( gt( best_BB - 2*best_B, 0 ), 0 * best_BB, best_BB - 2*best_B )
SCALAR_EXPRESSION dGbind_AB = best_AB - best_A - best_B )

SCALAR_EXPRESSION ddG_AA = dGbind_AB - dGbind_AA
SCALAR_EXPRESSION ddG_BB = dGbind_AB - dGbind_BB

ENTITY_FUNCTION entfunc input_files/1L6X_7intres_native.entfunc

# This is just one possible fitness function.  There are infinite possibilities.

FITNESS best_AB + ddG_AA + ddG_BB + entfunc
