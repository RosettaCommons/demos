// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington CoMotion, email: license@uw.edu.

/*!

@page robust How to make Rosetta robust against malformed PDBs

@author Steven Lewis smlewi@gmail.com

This document was orginally written 6 Apr 2010 by Steven Lewis; last edited 3/22/13

@section purpose What is robust?
Rosetta's PDB reader is fragile.  There are lots of PDBs that cannot be read in by Rosetta (several thousand fail to read in at all), and many more that cannot be scored for some reason.  Unfortunately, these bad PDBs tend to cause Rosetta to crash rather than exit gracefully.  This document describes how to "robustify" Rosetta so that it will not crash when encountering a bad PDB.

@section when When would I use it?
You might want to robustify Rosetta if you are going to do a small-nstruct, large -l experiment.  In my case, I ran with -nstruct 1 against literally the entire PDB.

@section why_not Why are these not set up by default?
The changes that have to be made cause a significant performance hit to Rosetta (particularly the vectorL change).  These should not be left on by default.  A better question is, why does no one improve the PDB reader to more gracefully catch these errors.  The answer to that is: why don't you do it, and make this page obsolete?

@section how Okay, I'm convinced, how do I do it?
You NEED to make a few changes:

@li run your code under jd2
@li replace all assert() statements in utility/vectorL with runtime_assert statements.  This causes out-of-bounds errors in the Rosetta workhorse vector1 class to be caught in the assert instead of segfaulting.  You could also compile in debug mode, or leave the NDEBUG statements in release mode.  The point is that bounds checking must be on.  (This is what causes the performance hit)
@li replace all assert()s in the Conformation class with runtime_assert, or equivalent.

This combination of changes will cause vector overruns to throw exceptions inside runtime_assert, instead of crashing or causing segfaults.  jd2 will catch the exceptions and treat the failed PDB as a failed job, print an error message, and cleanly move on to the next PDB in your list.

There are some other suggested changes:
@li pass the -in::file::obey_ENDMDL flag.  This causes the PDB reader to stop reading multimodel NMR-derived PDBs after the first model.
@li pass the -jd2:delete_old_poses flag, which reduces memory use in multiple-input runs, so that single-use input PDBs are not retained in memory.
@li @verbatim -ignore_unrecognized_res @endverbatim is a good choice to prevent ligand from crashing the PDB reader.

@section bad_pdbs How many PDBs are bad?
The PDB as of mid-November 2012 contained 86008 PDBs.  Of these, 6460 crash in the PDB reader.  Another 40 crashed from vector1 runtime_asserts, and 6 from containing only single-residue chains, somewhere in the AnchorFinder executable.  (These 46 may not be universally malformed, depending on what AnchorFinder does differently from your application).
*/
