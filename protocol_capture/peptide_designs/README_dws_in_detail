How to generate tail designs:

1) Generate fragments - you can do this on Robetta at http://robetta.bakerlab.org/fragmentsubmit.jsp
I named my fragment files aag00003_04.200_v1_3 and aag00009_04.200_v1_3

2) Make starting structure using createTemplate.pl and the g000.zones file.  I also included a fasta file (see g000_.fasta) because I felt that setting the sequence improved the quality of the centroid models more effectively than using constraints.  (i.e. createTemplate.pl -zonesfile g000.zones -fastafile g000_.fasta -parentpdb gpep_nat.pdb -outpdb g000.pdb).  The resulting file should look something like g000.pdb.  The side-chains are removed from all sequence positions, and the region that will be redesigned is removed.  NOTE: The input file has the sequence positions re-numbered in "Rosetta numbers", so the original pdb starts with sequence position 30, contains a "TER" between chain A and B, and chain B starts with sequence position 496.  But my modified pdb (gpep_nat.pdb) starts with position 1, with no "TER" between chains A and B, and the numbering is sequential through B.

input: g000.zones, g000_.fasta, gpep_nat.pdb
output: g000.pdb

3) Making centroid models
   a) copy fragments to working directory
   b) make a loop file to specity what residues can move.  See g000.loops as an example.  In the loop file, the 1st numer is the # of positions to be built, second number is sequence position to start design, with the final number being the sequence position where the design will end. 
   c) make constraint file to make the designed region fall into the desired location OR direct the redesigned peptide toward the desired orientation using the starting sequence.  I did the latter.  In other words, part 2) above can generate a pdb file with all alanines in the region that will be designed OR the sequence can be specified with a fasta file (see above) so that big hydrophobics fall in buried regions and hydrophilics fall in solvent exposed regions, etc.  An example of a constraint file is g000_.cst.
   d) copy over starting structure g000.pdb from 2).  
** e) run command line: rosetta.mactel aa input_pdb _ -s g000.pdb -loops 

intput: g000.loops, g000.cst (I didn't use constraints)
output example: aag000_0001.pdb

4) Merge centroid designs with fullatom starting structure (in this case gpep1.pdb) using merge_pdb.csh like this: merge_pdb.csh gpep1_nat.pdb [list of pdbfiles].  You will need to edit merge_pdb.csh if you want to change which residues are being merged.  For example, if you start the design at sequence position 342, like we do here, check your gpep_nat.pdb file (original all-atom pdb file) for the line # for the last atom in sequence position 341 and put this # in after "head -", then check your centroid files for the first atom at position 342 and put this # after "tail -".  This step is so that you don't have to repack all of the gpep1.pdb positions during the fullatom simulations.  (NOTE: When bilding with centroid mode, we don't use a TER in between chains A and B.  The TER needs to be added back in.  Another merge file can be used for this.)

intput: gpep_nat.pdb, list_of_pdbs (example of pdbs in list - aag000_0001.pdb)
output example: aag000_0001.m.pdb~ and with the TER added, aag000_0001.m.pdb

5) Making Fullatom models - 
** run command line: rosetta.mactel -design -l list_of_pdbs (the *.m.pdb merged files from step 4 above WITH a TER added between chains A and B) -tail -begin 342 -end 351 -chain_ -series bb -protein g000 -resfile tail.resfile -ex1 -ex2 -extrachi_cutoff 1 -exOH -no_his_his_pairE -tight_hb -try_both_his_tautomers -linmem_ig 10 -output_hbond_info -decoystats -group_uns 

(note: -linmem_ig 10 is optional.  I used it because I was running on a BlueGene and each node had very limited memory.  And -output_hbond_info, -decoystats and -group_uns is optional.  I used those so the output pdbs could be used with Ron Jacak's h-bond pymol plugin)  
(NOTE: Interesting "feature" that seems to have appeared in this verion - this call to Rosetta is looking for fragment files named aag000l03_05.200_v1_3 and aag000l09_05.200_v1_3, whereas the fragment files I used when building centroid models (3) were named aag00003_04.200_v1_3 and aag00009_04.200_v1_3.  I just renamed the fragment files so I could get this done quickly.)  

input: g000_resfile
output example: aag000_0001.m_0001.pdb

See example of resfile (g000_resfile).  In this file the sequence positions of the designed region are allowed to vary, and any neighboring sequence positions on the target protein are allowed to relax.  

version of rosetta++ that should work - revision 29304, last changed 2009-03-12.






