This script is similar to scan_and_design.xml. 
Rather than computing all of the scans separately (meaning 3 minimization steps need to be undertaken for each design), 
it aggregates all of the filters in a compound statement and evaluates them at once after a single minimization. 
Cuts run time by ~%55. However, the output is a bit less useful, as only a single resfile is output 
(containing the intersection of all filters), and the energetic values provided in the log need to be sifted through.

Scan all interface residues on chain B (designed chain) and report all substitutions that do not 
destabilize the monomer (in the unbound state) as well as do not reduce binding affinity or add strain. 
Use bb/rb/sc minimization before evaluating these energetic parameters.

Run this script on input structures that have been prepacked with bb minimization on chain B. 
It is crucial to have a proper reference state for all of the energetic calculations here!

More generally, this script can be used to scan across a set of residues with a filter. 
It will create a detailed list of the consequences of mutations in each allowed position 
as well as output a resfile containing all allowable residues according to the filter. 
After each mutation a user-defined relax mover is called.

Potential uses: scan all positions in a set of scaffolds to identify mutations that won't destabilize 
the protein too much; residue scans (ala, trp, etc.) on a large set of proteins.

Running: rosetta_scripts -database  -s  -parser:protocol  -ex1 -ex2 -include_input_sc

Run each input file in a separate directory to ensure that the resfiles that are output do not override one another.

<dock_design>
        <TASKOPERATIONS>
                <InitializeFromCommandline name=init/>
                <ProteinInterfaceDesign name=pido allow_all_aas=1 design_all_aas=1/>
                <ProteinInterfaceDesign name=repack_interface design_chain1=0 design_chain2=0/>
		The two resfiles below will be written out as intermediate files by the ScanFilter functions, below.
		<ReadResfile name=stabilizing_mutations filename="stabilize.resfile"/>
		<ReadResfile name=binding_mutations filename="binding.resfile"/>
		<ReadResfile name=strain_reducing_mutations filename="strain_reduction.resfile"/>
		Histidines are a source of trouble for Rosetta energetics at the interface. Better to avoid them completely
		<RestrictAbsentCanonicalAAS name=nohis keep_aas="ACDEFGIKLMNPQRSTVWY"/> 
        </TASKOPERATIONS>
	<MOVERS>
                <AtomTree name=docking_tree docking_ft=1/> connect chains by their geometric centres. Good for minimization
                <MinMover name=min_all bb=0 chi=1 jump=1> minimize sc, rb, and bb (of chain 2 only)
			<MoveMap>
				<Chain number=1 bb=0 chi=1/> disallow bb minimization on target chain
			</MoveMap>
		</MinMover>
		<PackRotamersMover name=pack_interface task_operations=init,repack_interface/>
		before running the baseline calculation in filter scan, you need to relax the ppk'ed structure
		<ParsedProtocol name=relax_before_baseline> 
			<Add mover=docking_tree/>
			<Add mover=pack_interface/>
			<Add mover=min_all/>
		</ParsedProtocol>
	</MOVERS>

        <FILTERS>
		The difference in energy between the bound conformation in the unbound form and the unbound and relaxed form
                <BindingStrain name=strain task_operations=repack_interface confidence=0/> 
                <Delta name=delta_strain filter=strain upper=1 lower=0 range=0.2 relax_mover=relax_before_baseline/>
                <ScoreType name=total_score score_type=total_score threshold=0.0/>
		 I think that 1 repeat should suffice as the calculations on minimized designs are actually rather stable.
		<Ddg name=ddg confidence=0.0 repeats=1/>
		Delta filter measures a filter's value with respect to a baseline that is computed on the input structure. 
		Here, we're measuring the difference in monomer stability (of chain 2 in the unbound state) wrt the input structure. 
		range - how much slack do you allow. If you only want true stabilizing mutations, still use something a notch above 0, 
		b/c numerical inaccuracies will otherwise sometimes preclude the native residue.
		<Delta name=delta_score filter=total_score upper=1 lower=0 range=0.2 unbound=1 jump=1 relax_mover=relax_before_baseline/> 
		Here, measuring the binding energy gain
		<Delta name=delta_ddg filter=ddg upper=1 lower=0 range=0.2 relax_mover=relax_before_baseline/> 
        </FILTERS>
        <MOVERS>
		Introduce random mutations according to the binding_mutations resfile
		<RandomMutation name=mut task_operations=init,pido,binding_mutations,nohis/> 
		<ParsedProtocol name=mut_min>
			<Add mover=mut/>
			<Add mover=min_all/>
		</ParsedProtocol>
		multicriterion MC optimization of binding energy & monomer stability
		<GenericMonteCarlo name=MC mover_name=mut_min filter_name=delta_score trials=200 temperature=1.0 preapply=0> 
			<Filters>
				<AND filter_name=delta_ddg temperature=0.5 rank=1/> strict
				<AND filter_name=delta_strain temperature=2/> be relatively lenient here
			</Filters>
		</GenericMonteCarlo>
        </MOVERS>
	<FILTERS>
		<CompoundStatement name=all_deltas>
			<AND filter_name=delta_score/>
			<AND filter_name=delta_strain/>
			<AND filter_name=delta_ddg/>
		</CompoundStatement>
		produces a resfile restricting along all filters
		<FilterScan name=scan_all_filters relax_mover=min_all task_operations=pido,init,nohis filter=all_deltas triage_filter=all_deltas resfile_name="all_deltas.resfile"/> 
		<Time name=scan_stabilizing_timer/>
		<Time name=scan_all_filters_timer/>
		<Time name=scan_binding_timer/>
		<Time name=MC_timer/>
	</FILTERS>
        <PROTOCOLS>
		<Add mover=docking_tree/>
		<Add filter=scan_all_filters_timer/>
		<Add filter=scan_all_filters/> slowest (two repacks x repeats)
		<Add filter=scan_all_filters_timer/>
		<Add filter=MC_timer/>
		<Add mover=MC/>
		<Add filter=MC_timer/>
        </PROTOCOLS>
</dock_design>
