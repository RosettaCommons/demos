# Available variables include:
#   workdir     the directory where test input files have been copied,
#               and where test output files should end up.
#   source      directory where Rosetta lives (Rosetta/main/source) (was minidir in older integration.py script, for example)
#   database    where the Rosetta database lives (Rosetta/main/database)
#   bin         where the Rosetta binaries live (Rosetta/main/source/bin)
#   binext      the extension on binary files, like ".linuxgccrelease"


cd %(workdir)s

[ -x %(bin)s/FlexPepDocking.%(binext)s ] || exit 1

%(bin)s/FlexPepDocking.%(binext)s @prepack_flags -database %(database)s -run:constant_seed -nodelay  2>&1 \
    | egrep -vf ../../ignore_list \
    > prepack.log

%(bin)s/FlexPepDocking.%(binext)s @flags -database %(database)s -run:constant_seed -nodelay  2>&1 \
    | egrep -vf ../../ignore_list \
    > refinement.log

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so


#Check for output
[ -r 1AWR_0001.pdb ] || exit 1
[ -r 1AWR.ex.ppk_0001.pdb ] || exit 1

# Here's a typical test for a Mini binary, assuming there's a "flags" file
# in this directory too:
#
## %(bin)s/MY_MINI_PROGRAM.%(binext)s @flags -database %(database)s -run:constant_seed -nodelay  2>&1 \
##     | egrep -v 'Finished.+in [0-9]+ seconds.' \
##     | egrep -v 'Dunbrack library took .+ seconds to load' \
##     > log
#
# Or if you don't care whether the logging output changes:
#
## %(bin)s/MY_MINI_PROGRAM.%(binext)s @flags -database %(database)s -run:constant_seed -nodelay  2>&1 \
##     > /dev/null
#
