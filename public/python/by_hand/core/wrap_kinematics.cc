// This file has been generated by Py++.
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

#include "boost/python.hpp"

#include "boost/python/suite/indexing/vector_indexing_suite.hpp"

#include "boost/python/suite/indexing/map_indexing_suite.hpp"

#include "core_all.hh"

namespace bp = boost::python;

struct Atom_wrapper : core::kinematics::Atom, bp::wrapper< core::kinematics::Atom > {

		virtual void append_atom( ::core::kinematics::Atom * arg0 ){
				bp::override func_append_atom = this->get_override( "append_atom" );
				func_append_atom( boost::python::ptr(arg0) );
		}

		virtual ::core::kinematics::AtomID const & atom_id(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual ::__gnu_cxx::__normal_iterator<core::kinematics::Atom* const*, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > atoms_begin(  ) const {
				bp::override func_atoms_begin = this->get_override( "atoms_begin" );
				return func_atoms_begin(  );
		}

		virtual ::__gnu_cxx::__normal_iterator<core::kinematics::Atom**, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > atoms_begin(  ){
				bp::override func_atoms_begin = this->get_override( "atoms_begin" );
				return func_atoms_begin(  );
		}

		virtual ::__gnu_cxx::__normal_iterator<core::kinematics::Atom* const*, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > atoms_end(  ) const {
				bp::override func_atoms_end = this->get_override( "atoms_end" );
				return func_atoms_end(  );
		}

		virtual ::__gnu_cxx::__normal_iterator<core::kinematics::Atom**, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > atoms_end(  ){
				bp::override func_atoms_end = this->get_override( "atoms_end" );
				return func_atoms_end(  );
		}

		virtual ::core::kinematics::Atom const * child( int const k ) const {
				bp::override func_child = this->get_override( "child" );
				return func_child( k );
		}

		virtual ::core::kinematics::Atom * child( int const k ){
				bp::override func_child = this->get_override( "child" );
				return func_child( k );
		}

		virtual ::core::kinematics::Atom * clone( ::core::kinematics::Atom * parent_in ) const {
				bp::override func_clone = this->get_override( "clone" );
				return func_clone( boost::python::ptr(parent_in) );
		}

		virtual void copy_coords( ::core::kinematics::Atom const & src ){
				bp::override func_copy_coords = this->get_override( "copy_coords" );
				func_copy_coords( boost::ref(src) );
		}

		virtual void delete_atom( ::core::kinematics::Atom * arg0 ){
				bp::override func_delete_atom = this->get_override( "delete_atom" );
				func_delete_atom( boost::python::ptr(arg0) );
		}

		virtual ::core::Real dihedral_between_bonded_children( ::core::kinematics::Atom const * child1, ::core::kinematics::Atom const * child2 ) const {
				bp::override func_dihedral_between_bonded_children = this->get_override( "dihedral_between_bonded_children" );
				return func_dihedral_between_bonded_children( boost::python::ptr(child1), boost::python::ptr(child2) );
		}

		virtual ::core::Length distance( ::core::kinematics::Atom const & atom ) const {
				bp::override func_distance = this->get_override( "distance" );
				return func_distance( boost::ref(atom) );
		}

		virtual ::core::Length distance_squared( ::core::kinematics::Atom const & atom ) const {
				bp::override func_distance_squared = this->get_override( "distance_squared" );
				return func_distance_squared( boost::ref(atom) );
		}

		virtual ::core::Real dof( ::core::kinematics::DOF_Type const type ) const {
				bp::override func_dof = this->get_override( "dof" );
				return func_dof( type );
		}

		virtual bool downstream( ::core::kinematics::Atom const * atom1 ) const {
				bp::override func_downstream = this->get_override( "downstream" );
				return func_downstream( boost::python::ptr(atom1) );
		}

		virtual void erase(  ){
				bp::override func_erase = this->get_override( "erase" );
				func_erase(  );
		}

		virtual void get_dof_axis_and_end_pos( ::core::Vector & axis, ::core::PointPosition & end_pos, ::core::kinematics::DOF_Type const type ) const {
				bp::override func_get_dof_axis_and_end_pos = this->get_override( "get_dof_axis_and_end_pos" );
				func_get_dof_axis_and_end_pos( boost::ref(axis), boost::ref(end_pos), type );
		}

		virtual ::core::kinematics::Stub get_input_stub(  ) const {
				bp::override func_get_input_stub = this->get_override( "get_input_stub" );
				return func_get_input_stub(  );
		}

		virtual ::core::kinematics::Atom const * get_nonjump_atom( int const i ) const {
				bp::override func_get_nonjump_atom = this->get_override( "get_nonjump_atom" );
				return func_get_nonjump_atom( i );
		}

		virtual ::core::kinematics::Stub get_stub(  ) const {
				bp::override func_get_stub = this->get_override( "get_stub" );
				return func_get_stub(  );
		}

		virtual ::core::kinematics::AtomID const & id(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual void id( ::core::kinematics::AtomID const & id_in ){
				bp::override func_id = this->get_override( "id" );
				func_id( boost::ref(id_in) );
		}

		virtual ::core::kinematics::Atom const * input_stub_atom0(  ) const {
				bp::override func_input_stub_atom0 = this->get_override( "input_stub_atom0" );
				return func_input_stub_atom0(  );
		}

		virtual ::core::kinematics::AtomID const & input_stub_atom0_id(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual ::core::kinematics::Atom const * input_stub_atom1(  ) const {
				bp::override func_input_stub_atom1 = this->get_override( "input_stub_atom1" );
				return func_input_stub_atom1(  );
		}

		virtual ::core::kinematics::AtomID const & input_stub_atom1_id(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual ::core::kinematics::Atom const * input_stub_atom2(  ) const {
				bp::override func_input_stub_atom2 = this->get_override( "input_stub_atom2" );
				return func_input_stub_atom2(  );
		}

		virtual ::core::kinematics::AtomID const & input_stub_atom2_id(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual ::core::kinematics::Atom const * input_stub_atom3(  ) const {
				bp::override func_input_stub_atom3 = this->get_override( "input_stub_atom3" );
				return func_input_stub_atom3(  );
		}

		virtual ::core::kinematics::AtomID const & input_stub_atom3_id(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual void insert_atom( ::core::kinematics::Atom * arg0 ){
				bp::override func_insert_atom = this->get_override( "insert_atom" );
				func_insert_atom( boost::python::ptr(arg0) );
		}

		virtual void insert_atom( ::core::kinematics::Atom * arg0, int const arg1 ){
				bp::override func_insert_atom = this->get_override( "insert_atom" );
				func_insert_atom( boost::python::ptr(arg0), arg1 );
		}

		virtual bool is_jump(  ) const {
				bp::override func_is_jump = this->get_override( "is_jump" );
				return func_is_jump(  );
		}

		virtual ::core::kinematics::Jump const & jump(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual void jump( ::core::kinematics::Jump const & jump_in ){
				bp::override func_jump = this->get_override( "jump" );
				func_jump( boost::ref(jump_in) );
		}

		virtual bool keep_dof_fixed( ::core::kinematics::DOF_Type const arg0 ) const  {
				if( bp::override func_keep_dof_fixed = this->get_override( "keep_dof_fixed" ) )
						return func_keep_dof_fixed( arg0 );
				else
						return this->core::kinematics::Atom::keep_dof_fixed( arg0 );
		}


		bool default_keep_dof_fixed( ::core::kinematics::DOF_Type const arg0 ) const  {
				return core::kinematics::Atom::keep_dof_fixed( arg0 );
		}

		virtual ::size_t n_atom(  ) const {
				bp::override func_n_atom = this->get_override( "n_atom" );
				return func_n_atom(  );
		}

		virtual int n_children(  ) const {
				bp::override func_n_children = this->get_override( "n_children" );
				return func_n_children(  );
		}

		virtual ::core::kinematics::Atom * next_child( ::core::kinematics::Atom const * child ){
				bp::override func_next_child = this->get_override( "next_child" );
				return func_next_child( boost::python::ptr(child) );
		}

		virtual ::core::kinematics::Atom const * parent(  ) const {
				bp::override func_parent = this->get_override( "parent" );
				return func_parent(  );
		}

		virtual void parent( ::core::kinematics::Atom * parent_in ){
				bp::override func_parent = this->get_override( "parent" );
				func_parent( boost::python::ptr(parent_in) );
		}

		virtual ::core::kinematics::Atom * parent(  ){
				bp::override func_parent = this->get_override( "parent" );
				return func_parent(  );
		}

		virtual ::core::PointPosition const & position(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual void position( ::core::PointPosition const & position_a ){
				bp::override func_position = this->get_override( "position" );
				func_position( boost::ref(position_a) );
		}

		virtual ::core::kinematics::Atom const * previous_child( ::core::kinematics::Atom const * child ) const {
				bp::override func_previous_child = this->get_override( "previous_child" );
				return func_previous_child( boost::python::ptr(child) );
		}

		virtual ::core::kinematics::Atom const * previous_sibling(  ) const {
				bp::override func_previous_sibling = this->get_override( "previous_sibling" );
				return func_previous_sibling(  );
		}

		virtual void replace_atom( ::core::kinematics::Atom * const old_atom, ::core::kinematics::Atom * const new_atom ){
				bp::override func_replace_atom = this->get_override( "replace_atom" );
				func_replace_atom( old_atom, new_atom );
		}

		virtual void set_dof( ::core::kinematics::DOF_Type const type, ::core::Real const value ){
				bp::override func_set_dof = this->get_override( "set_dof" );
				func_set_dof( type, value );
		}

		virtual void setup_min_map( ::core::kinematics::DOF_ID & last_torsion, ::core::kinematics::DOF_ID_Mask const & move_map, ::core::optimization::MinimizerMap & min_map ) const {
				bp::override func_setup_min_map = this->get_override( "setup_min_map" );
				func_setup_min_map( boost::ref(last_torsion), boost::ref(move_map), boost::ref(min_map) );
		}

		virtual void show(  ) const {
				bp::override func_show = this->get_override( "show" );
				func_show(  );
		}

		virtual ::core::kinematics::Atom const * stub_atom1(  ) const {
				bp::override func_stub_atom1 = this->get_override( "stub_atom1" );
				return func_stub_atom1(  );
		}

		virtual ::core::kinematics::AtomID const & stub_atom1_id(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual ::core::kinematics::Atom const * stub_atom2(  ) const {
				bp::override func_stub_atom2 = this->get_override( "stub_atom2" );
				return func_stub_atom2(  );
		}

		virtual ::core::kinematics::AtomID const & stub_atom2_id(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual ::core::kinematics::Atom const * stub_atom3(  ) const {
				bp::override func_stub_atom3 = this->get_override( "stub_atom3" );
				return func_stub_atom3(  );
		}

		virtual ::core::kinematics::AtomID const & stub_atom3_id(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual bool stub_defined(  ) const {
				bp::override func_stub_defined = this->get_override( "stub_defined" );
				return func_stub_defined(  );
		}

		virtual void update_atom_pointer( ::core::kinematics::AtomPointers & atom_pointer ){
				bp::override func_update_atom_pointer = this->get_override( "update_atom_pointer" );
				func_update_atom_pointer( boost::ref(atom_pointer) );
		}

		virtual void update_domain_map( int & current_color, int & biggest_color, ::core::kinematics::DomainMap & domain_map, ::core::kinematics::AtomID_Mask const & dof_moved, ::core::kinematics::AtomID_Mask const & atom_moved ) const {
				bp::override func_update_domain_map = this->get_override( "update_domain_map" );
				func_update_domain_map( current_color, biggest_color, boost::ref(domain_map), boost::ref(dof_moved), boost::ref(atom_moved) );
		}

		virtual void update_internal_coords( ::core::kinematics::Stub & stub, bool const recursive=true ){
				bp::override func_update_internal_coords = this->get_override( "update_internal_coords" );
				func_update_internal_coords( boost::ref(stub), recursive );
		}

		virtual void update_internal_coords( bool const recursive ){
				bp::override func_update_internal_coords = this->get_override( "update_internal_coords" );
				func_update_internal_coords( recursive );
		}

		virtual void update_stub( ::core::kinematics::Stub & stub ) const {
				bp::override func_update_stub = this->get_override( "update_stub" );
				func_update_stub( boost::ref(stub) );
		}

		virtual void update_xyz_coords( ::core::kinematics::Stub & stub ){
				bp::override func_update_xyz_coords = this->get_override( "update_xyz_coords" );
				func_update_xyz_coords( boost::ref(stub) );
		}

		virtual ::core::Length const & x(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual ::core::PointPosition const & xyz(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual void xyz( ::core::PointPosition const & position_a ){
				bp::override func_xyz = this->get_override( "xyz" );
				func_xyz( boost::ref(position_a) );
		}

		virtual ::core::Length const & y(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual ::core::Length const & z(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

};

struct Atom__wrapper : core::kinematics::Atom_, bp::wrapper< core::kinematics::Atom_ > {

		virtual void append_atom( ::core::kinematics::Atom * arg0 ) {
				if( bp::override func_append_atom = this->get_override( "append_atom" ) )
						func_append_atom( boost::python::ptr(arg0) );
				else
						this->core::kinematics::Atom_::append_atom( boost::python::ptr(arg0) );
		}


		void default_append_atom( ::core::kinematics::Atom * arg0 ) {
				core::kinematics::Atom_::append_atom( boost::python::ptr(arg0) );
		}

		virtual ::__gnu_cxx::__normal_iterator<core::kinematics::Atom* const*, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > atoms_begin(  ) const  {
				if( bp::override func_atoms_begin = this->get_override( "atoms_begin" ) )
						return func_atoms_begin(  );
				else
						return this->core::kinematics::Atom_::atoms_begin(  );
		}


		::__gnu_cxx::__normal_iterator<core::kinematics::Atom* const*, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > default_atoms_begin(  ) const  {
				return core::kinematics::Atom_::atoms_begin( );
		}

		virtual ::__gnu_cxx::__normal_iterator<core::kinematics::Atom**, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > atoms_begin(  ) {
				if( bp::override func_atoms_begin = this->get_override( "atoms_begin" ) )
						return func_atoms_begin(  );
				else
						return this->core::kinematics::Atom_::atoms_begin(  );
		}


		::__gnu_cxx::__normal_iterator<core::kinematics::Atom**, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > default_atoms_begin(  ) {
				return core::kinematics::Atom_::atoms_begin( );
		}

		virtual ::__gnu_cxx::__normal_iterator<core::kinematics::Atom* const*, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > atoms_end(  ) const  {
				if( bp::override func_atoms_end = this->get_override( "atoms_end" ) )
						return func_atoms_end(  );
				else
						return this->core::kinematics::Atom_::atoms_end(  );
		}


		::__gnu_cxx::__normal_iterator<core::kinematics::Atom* const*, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > default_atoms_end(  ) const  {
				return core::kinematics::Atom_::atoms_end( );
		}

		virtual ::__gnu_cxx::__normal_iterator<core::kinematics::Atom**, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > atoms_end(  ) {
				if( bp::override func_atoms_end = this->get_override( "atoms_end" ) )
						return func_atoms_end(  );
				else
						return this->core::kinematics::Atom_::atoms_end(  );
		}


		::__gnu_cxx::__normal_iterator<core::kinematics::Atom**, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > default_atoms_end(  ) {
				return core::kinematics::Atom_::atoms_end( );
		}

		virtual ::core::kinematics::Atom const * child( int const k ) const  {
				if( bp::override func_child = this->get_override( "child" ) )
						return func_child( k );
				else
						return this->core::kinematics::Atom_::child( k );
		}


		::core::kinematics::Atom const * default_child( int const k ) const  {
				return core::kinematics::Atom_::child( k );
		}

		virtual ::core::kinematics::Atom * child( int const k ) {
				if( bp::override func_child = this->get_override( "child" ) )
						return func_child( k );
				else
						return this->core::kinematics::Atom_::child( k );
		}


		::core::kinematics::Atom * default_child( int const k ) {
				return core::kinematics::Atom_::child( k );
		}

		virtual void delete_atom( ::core::kinematics::Atom * arg0 ) {
				if( bp::override func_delete_atom = this->get_override( "delete_atom" ) )
						func_delete_atom( boost::python::ptr(arg0) );
				else
						this->core::kinematics::Atom_::delete_atom( boost::python::ptr(arg0) );
		}


		void default_delete_atom( ::core::kinematics::Atom * arg0 ) {
				core::kinematics::Atom_::delete_atom( boost::python::ptr(arg0) );
		}

		virtual ::core::Real dihedral_between_bonded_children( ::core::kinematics::Atom const * child1, ::core::kinematics::Atom const * child2 ) const  {
				if( bp::override func_dihedral_between_bonded_children = this->get_override( "dihedral_between_bonded_children" ) )
						return func_dihedral_between_bonded_children( boost::python::ptr(child1), boost::python::ptr(child2) );
				else
						return this->core::kinematics::Atom_::dihedral_between_bonded_children( boost::python::ptr(child1), boost::python::ptr(child2) );
		}


		::core::Real default_dihedral_between_bonded_children( ::core::kinematics::Atom const * child1, ::core::kinematics::Atom const * child2 ) const  {
				return core::kinematics::Atom_::dihedral_between_bonded_children( boost::python::ptr(child1), boost::python::ptr(child2) );
		}

		virtual ::core::Length distance( ::core::kinematics::Atom const & atom ) const  {
				if( bp::override func_distance = this->get_override( "distance" ) )
						return func_distance( boost::ref(atom) );
				else
						return this->core::kinematics::Atom_::distance( boost::ref(atom) );
		}


		::core::Length default_distance( ::core::kinematics::Atom const & atom ) const  {
				return core::kinematics::Atom_::distance( boost::ref(atom) );
		}

		virtual ::core::Length distance_squared( ::core::kinematics::Atom const & atom ) const  {
				if( bp::override func_distance_squared = this->get_override( "distance_squared" ) )
						return func_distance_squared( boost::ref(atom) );
				else
						return this->core::kinematics::Atom_::distance_squared( boost::ref(atom) );
		}


		::core::Length default_distance_squared( ::core::kinematics::Atom const & atom ) const  {
				return core::kinematics::Atom_::distance_squared( boost::ref(atom) );
		}

		virtual bool downstream( ::core::kinematics::Atom const * atom1 ) const  {
				if( bp::override func_downstream = this->get_override( "downstream" ) )
						return func_downstream( boost::python::ptr(atom1) );
				else
						return this->core::kinematics::Atom_::downstream( boost::python::ptr(atom1) );
		}


		bool default_downstream( ::core::kinematics::Atom const * atom1 ) const  {
				return core::kinematics::Atom_::downstream( boost::python::ptr(atom1) );
		}

		virtual void erase(  ) {
				if( bp::override func_erase = this->get_override( "erase" ) )
						func_erase(  );
				else
						this->core::kinematics::Atom_::erase(  );
		}


		void default_erase(  ) {
				core::kinematics::Atom_::erase( );
		}

		virtual ::core::kinematics::Stub get_input_stub(  ) const  {
				if( bp::override func_get_input_stub = this->get_override( "get_input_stub" ) )
						return func_get_input_stub(  );
				else
						return this->core::kinematics::Atom_::get_input_stub(  );
		}


		::core::kinematics::Stub default_get_input_stub(  ) const  {
				return core::kinematics::Atom_::get_input_stub( );
		}

		virtual ::core::kinematics::Atom const * get_nonjump_atom( int const i ) const  {
				if( bp::override func_get_nonjump_atom = this->get_override( "get_nonjump_atom" ) )
						return func_get_nonjump_atom( i );
				else
						return this->core::kinematics::Atom_::get_nonjump_atom( i );
		}


		::core::kinematics::Atom const * default_get_nonjump_atom( int const i ) const  {
				return core::kinematics::Atom_::get_nonjump_atom( i );
		}

		virtual ::core::kinematics::Stub get_stub(  ) const  {
				if( bp::override func_get_stub = this->get_override( "get_stub" ) )
						return func_get_stub(  );
				else
						return this->core::kinematics::Atom_::get_stub(  );
		}


		::core::kinematics::Stub default_get_stub(  ) const  {
				return core::kinematics::Atom_::get_stub( );
		}

		virtual void id( ::core::kinematics::AtomID const & id_in ) {
				if( bp::override func_id = this->get_override( "id" ) )
						func_id( boost::ref(id_in) );
				else
						this->core::kinematics::Atom_::id( boost::ref(id_in) );
		}


		void default_id( ::core::kinematics::AtomID const & id_in ) {
				core::kinematics::Atom_::id( boost::ref(id_in) );
		}

		virtual ::core::kinematics::Atom const * input_stub_atom0(  ) const  {
				if( bp::override func_input_stub_atom0 = this->get_override( "input_stub_atom0" ) )
						return func_input_stub_atom0(  );
				else
						return this->core::kinematics::Atom_::input_stub_atom0(  );
		}


		::core::kinematics::Atom const * default_input_stub_atom0(  ) const  {
				return core::kinematics::Atom_::input_stub_atom0( );
		}

		virtual ::core::kinematics::Atom const * input_stub_atom1(  ) const  {
				if( bp::override func_input_stub_atom1 = this->get_override( "input_stub_atom1" ) )
						return func_input_stub_atom1(  );
				else
						return this->core::kinematics::Atom_::input_stub_atom1(  );
		}


		::core::kinematics::Atom const * default_input_stub_atom1(  ) const  {
				return core::kinematics::Atom_::input_stub_atom1( );
		}

		virtual ::core::kinematics::Atom const * input_stub_atom2(  ) const  {
				if( bp::override func_input_stub_atom2 = this->get_override( "input_stub_atom2" ) )
						return func_input_stub_atom2(  );
				else
						return this->core::kinematics::Atom_::input_stub_atom2(  );
		}


		::core::kinematics::Atom const * default_input_stub_atom2(  ) const  {
				return core::kinematics::Atom_::input_stub_atom2( );
		}

		virtual ::core::kinematics::Atom const * input_stub_atom3(  ) const  {
				if( bp::override func_input_stub_atom3 = this->get_override( "input_stub_atom3" ) )
						return func_input_stub_atom3(  );
				else
						return this->core::kinematics::Atom_::input_stub_atom3(  );
		}


		::core::kinematics::Atom const * default_input_stub_atom3(  ) const  {
				return core::kinematics::Atom_::input_stub_atom3( );
		}

		virtual void insert_atom( ::core::kinematics::Atom * arg0 ) {
				if( bp::override func_insert_atom = this->get_override( "insert_atom" ) )
						func_insert_atom( boost::python::ptr(arg0) );
				else
						this->core::kinematics::Atom_::insert_atom( boost::python::ptr(arg0) );
		}


		void default_insert_atom( ::core::kinematics::Atom * arg0 ) {
				core::kinematics::Atom_::insert_atom( boost::python::ptr(arg0) );
		}

		virtual void insert_atom( ::core::kinematics::Atom * arg0, int const arg1 ) {
				if( bp::override func_insert_atom = this->get_override( "insert_atom" ) )
						func_insert_atom( boost::python::ptr(arg0), arg1 );
				else
						this->core::kinematics::Atom_::insert_atom( boost::python::ptr(arg0), arg1 );
		}


		void default_insert_atom( ::core::kinematics::Atom * arg0, int const arg1 ) {
				core::kinematics::Atom_::insert_atom( boost::python::ptr(arg0), arg1 );
		}

		virtual bool keep_dof_fixed( ::core::kinematics::DOF_Type const arg0 ) const  {
				if( bp::override func_keep_dof_fixed = this->get_override( "keep_dof_fixed" ) )
						return func_keep_dof_fixed( arg0 );
				else
						return this->core::kinematics::Atom_::keep_dof_fixed( arg0 );
		}


		bool default_keep_dof_fixed( ::core::kinematics::DOF_Type const arg0 ) const  {
				return core::kinematics::Atom_::keep_dof_fixed( arg0 );
		}

		virtual ::size_t n_atom(  ) const  {
				if( bp::override func_n_atom = this->get_override( "n_atom" ) )
						return func_n_atom(  );
				else
						return this->core::kinematics::Atom_::n_atom(  );
		}


		::size_t default_n_atom(  ) const  {
				return core::kinematics::Atom_::n_atom( );
		}

		virtual int n_children(  ) const  {
				if( bp::override func_n_children = this->get_override( "n_children" ) )
						return func_n_children(  );
				else
						return this->core::kinematics::Atom_::n_children(  );
		}


		int default_n_children(  ) const  {
				return core::kinematics::Atom_::n_children( );
		}

		virtual ::core::kinematics::Atom * next_child( ::core::kinematics::Atom const * child ) {
				if( bp::override func_next_child = this->get_override( "next_child" ) )
						return func_next_child( boost::python::ptr(child) );
				else
						return this->core::kinematics::Atom_::next_child( boost::python::ptr(child) );
		}


		::core::kinematics::Atom * default_next_child( ::core::kinematics::Atom const * child ) {
				return core::kinematics::Atom_::next_child( boost::python::ptr(child) );
		}

		virtual ::core::kinematics::Atom const * parent(  ) const  {
				if( bp::override func_parent = this->get_override( "parent" ) )
						return func_parent(  );
				else
						return this->core::kinematics::Atom_::parent(  );
		}


		::core::kinematics::Atom const * default_parent(  ) const  {
				return core::kinematics::Atom_::parent( );
		}

		virtual void parent( ::core::kinematics::Atom * parent_in ) {
				if( bp::override func_parent = this->get_override( "parent" ) )
						func_parent( boost::python::ptr(parent_in) );
				else
						this->core::kinematics::Atom_::parent( boost::python::ptr(parent_in) );
		}


		void default_parent( ::core::kinematics::Atom * parent_in ) {
				core::kinematics::Atom_::parent( boost::python::ptr(parent_in) );
		}

		virtual ::core::kinematics::Atom * parent(  ) {
				if( bp::override func_parent = this->get_override( "parent" ) )
						return func_parent(  );
				else
						return this->core::kinematics::Atom_::parent(  );
		}


		::core::kinematics::Atom * default_parent(  ) {
				return core::kinematics::Atom_::parent( );
		}

		virtual void position( ::core::PointPosition const & position_a ) {
				if( bp::override func_position = this->get_override( "position" ) )
						func_position( boost::ref(position_a) );
				else
						this->core::kinematics::Atom_::position( boost::ref(position_a) );
		}


		void default_position( ::core::PointPosition const & position_a ) {
				core::kinematics::Atom_::position( boost::ref(position_a) );
		}

		virtual ::core::kinematics::Atom const * previous_child( ::core::kinematics::Atom const * child ) const  {
				if( bp::override func_previous_child = this->get_override( "previous_child" ) )
						return func_previous_child( boost::python::ptr(child) );
				else
						return this->core::kinematics::Atom_::previous_child( boost::python::ptr(child) );
		}


		::core::kinematics::Atom const * default_previous_child( ::core::kinematics::Atom const * child ) const  {
				return core::kinematics::Atom_::previous_child( boost::python::ptr(child) );
		}

		virtual ::core::kinematics::Atom const * previous_sibling(  ) const  {
				if( bp::override func_previous_sibling = this->get_override( "previous_sibling" ) )
						return func_previous_sibling(  );
				else
						return this->core::kinematics::Atom_::previous_sibling(  );
		}


		::core::kinematics::Atom const * default_previous_sibling(  ) const  {
				return core::kinematics::Atom_::previous_sibling( );
		}

		virtual void replace_atom( ::core::kinematics::Atom * const old_atom, ::core::kinematics::Atom * const new_atom ) {
				if( bp::override func_replace_atom = this->get_override( "replace_atom" ) )
						func_replace_atom( old_atom, new_atom );
				else
						this->core::kinematics::Atom_::replace_atom( old_atom, new_atom );
		}


		void default_replace_atom( ::core::kinematics::Atom * const old_atom, ::core::kinematics::Atom * const new_atom ) {
				core::kinematics::Atom_::replace_atom( old_atom, new_atom );
		}

		virtual void show(  ) const  {
				if( bp::override func_show = this->get_override( "show" ) )
						func_show(  );
				else
						this->core::kinematics::Atom_::show(  );
		}


		void default_show(  ) const  {
				core::kinematics::Atom_::show( );
		}

		virtual bool stub_defined(  ) const  {
				if( bp::override func_stub_defined = this->get_override( "stub_defined" ) )
						return func_stub_defined(  );
				else
						return this->core::kinematics::Atom_::stub_defined(  );
		}


		bool default_stub_defined(  ) const  {
				return core::kinematics::Atom_::stub_defined( );
		}

		virtual void update_atom_pointer( ::core::kinematics::AtomPointers & atom_pointer ) {
				if( bp::override func_update_atom_pointer = this->get_override( "update_atom_pointer" ) )
						func_update_atom_pointer( boost::ref(atom_pointer) );
				else
						this->core::kinematics::Atom_::update_atom_pointer( boost::ref(atom_pointer) );
		}


		void default_update_atom_pointer( ::core::kinematics::AtomPointers & atom_pointer ) {
				core::kinematics::Atom_::update_atom_pointer( boost::ref(atom_pointer) );
		}

		virtual void update_domain_map( int & current_color, int & biggest_color, ::core::kinematics::DomainMap & domain_map, ::core::kinematics::AtomID_Mask const & dof_moved, ::core::kinematics::AtomID_Mask const & atom_moved ) const  {
				if( bp::override func_update_domain_map = this->get_override( "update_domain_map" ) )
						func_update_domain_map( current_color, biggest_color, boost::ref(domain_map), boost::ref(dof_moved), boost::ref(atom_moved) );
				else
						this->core::kinematics::Atom_::update_domain_map( current_color, biggest_color, boost::ref(domain_map), boost::ref(dof_moved), boost::ref(atom_moved) );
		}


		void default_update_domain_map( int & current_color, int & biggest_color, ::core::kinematics::DomainMap & domain_map, ::core::kinematics::AtomID_Mask const & dof_moved, ::core::kinematics::AtomID_Mask const & atom_moved ) const  {
				core::kinematics::Atom_::update_domain_map( current_color, biggest_color, boost::ref(domain_map), boost::ref(dof_moved), boost::ref(atom_moved) );
		}

		virtual void update_internal_coords( bool const recursive ) {
				if( bp::override func_update_internal_coords = this->get_override( "update_internal_coords" ) )
						func_update_internal_coords( recursive );
				else
						this->core::kinematics::Atom_::update_internal_coords( recursive );
		}


		void default_update_internal_coords( bool const recursive ) {
				core::kinematics::Atom_::update_internal_coords( recursive );
		}

		virtual void xyz( ::core::PointPosition const & position_a ) {
				if( bp::override func_xyz = this->get_override( "xyz" ) )
						func_xyz( boost::ref(position_a) );
				else
						this->core::kinematics::Atom_::xyz( boost::ref(position_a) );
		}


		void default_xyz( ::core::PointPosition const & position_a ) {
				core::kinematics::Atom_::xyz( boost::ref(position_a) );
		}

		virtual ::core::kinematics::Atom * clone( ::core::kinematics::Atom * parent_in ) const {
				bp::override func_clone = this->get_override( "clone" );
				return func_clone( boost::python::ptr(parent_in) );
		}

		virtual void copy_coords( ::core::kinematics::Atom const & src ){
				bp::override func_copy_coords = this->get_override( "copy_coords" );
				func_copy_coords( boost::ref(src) );
		}

		virtual ::core::Real dof( ::core::kinematics::DOF_Type const type ) const {
				bp::override func_dof = this->get_override( "dof" );
				return func_dof( type );
		}

		virtual void get_dof_axis_and_end_pos( ::core::Vector & axis, ::core::PointPosition & end_pos, ::core::kinematics::DOF_Type const type ) const {
				bp::override func_get_dof_axis_and_end_pos = this->get_override( "get_dof_axis_and_end_pos" );
				func_get_dof_axis_and_end_pos( boost::ref(axis), boost::ref(end_pos), type );
		}

		virtual bool is_jump(  ) const {
				bp::override func_is_jump = this->get_override( "is_jump" );
				return func_is_jump(  );
		}

		virtual ::core::kinematics::Jump const & jump(  ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual void jump( ::core::kinematics::Jump const & jump_in ){
				bp::override func_jump = this->get_override( "jump" );
				func_jump( boost::ref(jump_in) );
		}

		virtual void set_dof( ::core::kinematics::DOF_Type const type, ::core::Real const value ){
				bp::override func_set_dof = this->get_override( "set_dof" );
				func_set_dof( type, value );
		}

		virtual void setup_min_map( ::core::kinematics::DOF_ID & last_torsion, ::core::kinematics::DOF_ID_Mask const & move_map, ::core::optimization::MinimizerMap & min_map ) const {
				bp::override func_setup_min_map = this->get_override( "setup_min_map" );
				func_setup_min_map( boost::ref(last_torsion), boost::ref(move_map), boost::ref(min_map) );
		}

		virtual ::core::kinematics::Atom const * stub_atom1(  ) const {
				bp::override func_stub_atom1 = this->get_override( "stub_atom1" );
				return func_stub_atom1(  );
		}

		virtual ::core::kinematics::Atom const * stub_atom2(  ) const {
				bp::override func_stub_atom2 = this->get_override( "stub_atom2" );
				return func_stub_atom2(  );
		}

		virtual ::core::kinematics::Atom const * stub_atom3(  ) const {
				bp::override func_stub_atom3 = this->get_override( "stub_atom3" );
				return func_stub_atom3(  );
		}

		virtual void update_internal_coords( ::core::kinematics::Stub & stub, bool const recursive=true ){
				bp::override func_update_internal_coords = this->get_override( "update_internal_coords" );
				func_update_internal_coords( boost::ref(stub), recursive );
		}

		virtual void update_stub( ::core::kinematics::Stub & stub ) const {
				bp::override func_update_stub = this->get_override( "update_stub" );
				func_update_stub( boost::ref(stub) );
		}

		virtual void update_xyz_coords( ::core::kinematics::Stub & stub ){
				bp::override func_update_xyz_coords = this->get_override( "update_xyz_coords" );
				func_update_xyz_coords( boost::ref(stub) );
		}

};

struct BondedAtom_wrapper : core::kinematics::BondedAtom, bp::wrapper< core::kinematics::BondedAtom > {

		BondedAtom_wrapper(core::kinematics::BondedAtom const & arg )
		: core::kinematics::BondedAtom( arg )
			, bp::wrapper< core::kinematics::BondedAtom >(){
				// copy constructor

		}

		BondedAtom_wrapper()
		: core::kinematics::BondedAtom()
			, bp::wrapper< core::kinematics::BondedAtom >(){
				// null constructor

		}

		virtual ::core::kinematics::Atom * clone( ::core::kinematics::Atom * parent_in ) const  {
				if( bp::override func_clone = this->get_override( "clone" ) )
						return func_clone( boost::python::ptr(parent_in) );
				else
						return this->core::kinematics::BondedAtom::clone( boost::python::ptr(parent_in) );
		}


		::core::kinematics::Atom * default_clone( ::core::kinematics::Atom * parent_in ) const  {
				return core::kinematics::BondedAtom::clone( boost::python::ptr(parent_in) );
		}

		virtual void copy_coords( ::core::kinematics::Atom const & src ) {
				if( bp::override func_copy_coords = this->get_override( "copy_coords" ) )
						func_copy_coords( boost::ref(src) );
				else
						this->core::kinematics::BondedAtom::copy_coords( boost::ref(src) );
		}


		void default_copy_coords( ::core::kinematics::Atom const & src ) {
				core::kinematics::BondedAtom::copy_coords( boost::ref(src) );
		}

		virtual double dof( ::core::kinematics::DOF_Type const type ) const  {
				if( bp::override func_dof = this->get_override( "dof" ) )
						return func_dof( type );
				else
						return this->core::kinematics::BondedAtom::dof( type );
		}


		double default_dof( ::core::kinematics::DOF_Type const type ) const  {
				return core::kinematics::BondedAtom::dof( type );
		}

		virtual void get_dof_axis_and_end_pos( ::core::Vector & axis, ::core::PointPosition & end_pos, ::core::kinematics::DOF_Type const type ) const  {
				if( bp::override func_get_dof_axis_and_end_pos = this->get_override( "get_dof_axis_and_end_pos" ) )
						func_get_dof_axis_and_end_pos( boost::ref(axis), boost::ref(end_pos), type );
				else
						this->core::kinematics::BondedAtom::get_dof_axis_and_end_pos( boost::ref(axis), boost::ref(end_pos), type );
		}


		void default_get_dof_axis_and_end_pos( ::core::Vector & axis, ::core::PointPosition & end_pos, ::core::kinematics::DOF_Type const type ) const  {
				core::kinematics::BondedAtom::get_dof_axis_and_end_pos( boost::ref(axis), boost::ref(end_pos), type );
		}

		virtual bool is_jump(  ) const  {
				if( bp::override func_is_jump = this->get_override( "is_jump" ) )
						return func_is_jump(  );
				else
						return this->core::kinematics::BondedAtom::is_jump(  );
		}


		bool default_is_jump(  ) const  {
				return core::kinematics::BondedAtom::is_jump( );
		}

		virtual void jump( ::core::kinematics::Jump const & arg0 ) {
				if( bp::override func_jump = this->get_override( "jump" ) )
						func_jump( boost::ref(arg0) );
				else
						this->core::kinematics::BondedAtom::jump( boost::ref(arg0) );
		}


		void default_jump( ::core::kinematics::Jump const & arg0 ) {
				core::kinematics::BondedAtom::jump( boost::ref(arg0) );
		}

		virtual bool keep_dof_fixed( ::core::kinematics::DOF_Type const type ) const  {
				if( bp::override func_keep_dof_fixed = this->get_override( "keep_dof_fixed" ) )
						return func_keep_dof_fixed( type );
				else
						return this->core::kinematics::BondedAtom::keep_dof_fixed( type );
		}


		bool default_keep_dof_fixed( ::core::kinematics::DOF_Type const type ) const  {
				return core::kinematics::BondedAtom::keep_dof_fixed( type );
		}

		virtual void set_dof( ::core::kinematics::DOF_Type const type, double const value ) {
				if( bp::override func_set_dof = this->get_override( "set_dof" ) )
						func_set_dof( type, value );
				else
						this->core::kinematics::BondedAtom::set_dof( type, value );
		}


		void default_set_dof( ::core::kinematics::DOF_Type const type, double const value ) {
				core::kinematics::BondedAtom::set_dof( type, value );
		}

		virtual void setup_min_map( ::core::kinematics::DOF_ID & last_torsion, ::core::kinematics::DOF_ID_Mask const & allow_move, ::core::optimization::MinimizerMap & min_map ) const  {
				if( bp::override func_setup_min_map = this->get_override( "setup_min_map" ) )
						func_setup_min_map( boost::ref(last_torsion), boost::ref(allow_move), boost::ref(min_map) );
				else
						this->core::kinematics::BondedAtom::setup_min_map( boost::ref(last_torsion), boost::ref(allow_move), boost::ref(min_map) );
		}


		void default_setup_min_map( ::core::kinematics::DOF_ID & last_torsion, ::core::kinematics::DOF_ID_Mask const & allow_move, ::core::optimization::MinimizerMap & min_map ) const  {
				core::kinematics::BondedAtom::setup_min_map( boost::ref(last_torsion), boost::ref(allow_move), boost::ref(min_map) );
		}

		virtual ::core::kinematics::Atom const * stub_atom1(  ) const  {
				if( bp::override func_stub_atom1 = this->get_override( "stub_atom1" ) )
						return func_stub_atom1(  );
				else
						return this->core::kinematics::BondedAtom::stub_atom1(  );
		}


		::core::kinematics::Atom const * default_stub_atom1(  ) const  {
				return core::kinematics::BondedAtom::stub_atom1( );
		}

		virtual ::core::kinematics::Atom const * stub_atom2(  ) const  {
				if( bp::override func_stub_atom2 = this->get_override( "stub_atom2" ) )
						return func_stub_atom2(  );
				else
						return this->core::kinematics::BondedAtom::stub_atom2(  );
		}


		::core::kinematics::Atom const * default_stub_atom2(  ) const  {
				return core::kinematics::BondedAtom::stub_atom2( );
		}

		virtual ::core::kinematics::Atom const * stub_atom3(  ) const  {
				if( bp::override func_stub_atom3 = this->get_override( "stub_atom3" ) )
						return func_stub_atom3(  );
				else
						return this->core::kinematics::BondedAtom::stub_atom3(  );
		}


		::core::kinematics::Atom const * default_stub_atom3(  ) const  {
				return core::kinematics::BondedAtom::stub_atom3( );
		}

		virtual void update_internal_coords( ::core::kinematics::Stub & stub, bool const recursive=true ) {
				if( bp::override func_update_internal_coords = this->get_override( "update_internal_coords" ) )
						func_update_internal_coords( boost::ref(stub), recursive );
				else
						this->core::kinematics::BondedAtom::update_internal_coords( boost::ref(stub), recursive );
		}


		void default_update_internal_coords( ::core::kinematics::Stub & stub, bool const recursive=true ) {
				core::kinematics::BondedAtom::update_internal_coords( boost::ref(stub), recursive );
		}

		virtual void update_stub( ::core::kinematics::Stub & stub ) const  {
				if( bp::override func_update_stub = this->get_override( "update_stub" ) )
						func_update_stub( boost::ref(stub) );
				else
						this->core::kinematics::BondedAtom::update_stub( boost::ref(stub) );
		}


		void default_update_stub( ::core::kinematics::Stub & stub ) const  {
				core::kinematics::BondedAtom::update_stub( boost::ref(stub) );
		}

		virtual void update_xyz_coords( ::core::kinematics::Stub & stub ) {
				if( bp::override func_update_xyz_coords = this->get_override( "update_xyz_coords" ) )
						func_update_xyz_coords( boost::ref(stub) );
				else
						this->core::kinematics::BondedAtom::update_xyz_coords( boost::ref(stub) );
		}


		void default_update_xyz_coords( ::core::kinematics::Stub & stub ) {
				core::kinematics::BondedAtom::update_xyz_coords( boost::ref(stub) );
		}

};

struct JumpAtom_wrapper : core::kinematics::JumpAtom, bp::wrapper< core::kinematics::JumpAtom > {

		JumpAtom_wrapper(core::kinematics::JumpAtom const & arg )
		: core::kinematics::JumpAtom( arg )
			, bp::wrapper< core::kinematics::JumpAtom >(){
				// copy constructor

		}

		JumpAtom_wrapper()
		: core::kinematics::JumpAtom()
			, bp::wrapper< core::kinematics::JumpAtom >(){
				// null constructor

		}

		virtual ::core::kinematics::Atom * clone( ::core::kinematics::Atom * parent_in ) const  {
				if( bp::override func_clone = this->get_override( "clone" ) )
						return func_clone( boost::python::ptr(parent_in) );
				else
						return this->core::kinematics::JumpAtom::clone( boost::python::ptr(parent_in) );
		}


		::core::kinematics::Atom * default_clone( ::core::kinematics::Atom * parent_in ) const  {
				return core::kinematics::JumpAtom::clone( boost::python::ptr(parent_in) );
		}

		virtual void copy_coords( ::core::kinematics::Atom const & src ) {
				if( bp::override func_copy_coords = this->get_override( "copy_coords" ) )
						func_copy_coords( boost::ref(src) );
				else
						this->core::kinematics::JumpAtom::copy_coords( boost::ref(src) );
		}


		void default_copy_coords( ::core::kinematics::Atom const & src ) {
				core::kinematics::JumpAtom::copy_coords( boost::ref(src) );
		}

		virtual double dof( ::core::kinematics::DOF_Type const type ) const  {
				if( bp::override func_dof = this->get_override( "dof" ) )
						return func_dof( type );
				else
						return this->core::kinematics::JumpAtom::dof( type );
		}


		double default_dof( ::core::kinematics::DOF_Type const type ) const  {
				return core::kinematics::JumpAtom::dof( type );
		}

		virtual void get_dof_axis_and_end_pos( ::core::Vector & axis, ::core::PointPosition & end_pos, ::core::kinematics::DOF_Type const type ) const  {
				if( bp::override func_get_dof_axis_and_end_pos = this->get_override( "get_dof_axis_and_end_pos" ) )
						func_get_dof_axis_and_end_pos( boost::ref(axis), boost::ref(end_pos), type );
				else
						this->core::kinematics::JumpAtom::get_dof_axis_and_end_pos( boost::ref(axis), boost::ref(end_pos), type );
		}


		void default_get_dof_axis_and_end_pos( ::core::Vector & axis, ::core::PointPosition & end_pos, ::core::kinematics::DOF_Type const type ) const  {
				core::kinematics::JumpAtom::get_dof_axis_and_end_pos( boost::ref(axis), boost::ref(end_pos), type );
		}

		virtual bool is_jump(  ) const  {
				if( bp::override func_is_jump = this->get_override( "is_jump" ) )
						return func_is_jump(  );
				else
						return this->core::kinematics::JumpAtom::is_jump(  );
		}


		bool default_is_jump(  ) const  {
				return core::kinematics::JumpAtom::is_jump( );
		}

		virtual void jump( ::core::kinematics::Jump const & jump_in ) {
				if( bp::override func_jump = this->get_override( "jump" ) )
						func_jump( boost::ref(jump_in) );
				else
						this->core::kinematics::JumpAtom::jump( boost::ref(jump_in) );
		}


		void default_jump( ::core::kinematics::Jump const & jump_in ) {
				core::kinematics::JumpAtom::jump( boost::ref(jump_in) );
		}

		virtual bool keep_dof_fixed( ::core::kinematics::DOF_Type const type ) const  {
				if( bp::override func_keep_dof_fixed = this->get_override( "keep_dof_fixed" ) )
						return func_keep_dof_fixed( type );
				else
						return this->core::kinematics::JumpAtom::keep_dof_fixed( type );
		}


		bool default_keep_dof_fixed( ::core::kinematics::DOF_Type const type ) const  {
				return core::kinematics::JumpAtom::keep_dof_fixed( type );
		}

		virtual void set_dof( ::core::kinematics::DOF_Type const type, double const value ) {
				if( bp::override func_set_dof = this->get_override( "set_dof" ) )
						func_set_dof( type, value );
				else
						this->core::kinematics::JumpAtom::set_dof( type, value );
		}


		void default_set_dof( ::core::kinematics::DOF_Type const type, double const value ) {
				core::kinematics::JumpAtom::set_dof( type, value );
		}

		virtual void setup_min_map( ::core::kinematics::DOF_ID & last_torsion, ::core::kinematics::DOF_ID_Mask const & allow_move, ::core::optimization::MinimizerMap & min_map ) const  {
				if( bp::override func_setup_min_map = this->get_override( "setup_min_map" ) )
						func_setup_min_map( boost::ref(last_torsion), boost::ref(allow_move), boost::ref(min_map) );
				else
						this->core::kinematics::JumpAtom::setup_min_map( boost::ref(last_torsion), boost::ref(allow_move), boost::ref(min_map) );
		}


		void default_setup_min_map( ::core::kinematics::DOF_ID & last_torsion, ::core::kinematics::DOF_ID_Mask const & allow_move, ::core::optimization::MinimizerMap & min_map ) const  {
				core::kinematics::JumpAtom::setup_min_map( boost::ref(last_torsion), boost::ref(allow_move), boost::ref(min_map) );
		}

		virtual ::core::kinematics::Atom const * stub_atom1(  ) const  {
				if( bp::override func_stub_atom1 = this->get_override( "stub_atom1" ) )
						return func_stub_atom1(  );
				else
						return this->core::kinematics::JumpAtom::stub_atom1(  );
		}


		::core::kinematics::Atom const * default_stub_atom1(  ) const  {
				return core::kinematics::JumpAtom::stub_atom1( );
		}

		virtual ::core::kinematics::Atom const * stub_atom2(  ) const  {
				if( bp::override func_stub_atom2 = this->get_override( "stub_atom2" ) )
						return func_stub_atom2(  );
				else
						return this->core::kinematics::JumpAtom::stub_atom2(  );
		}


		::core::kinematics::Atom const * default_stub_atom2(  ) const  {
				return core::kinematics::JumpAtom::stub_atom2( );
		}

		virtual ::core::kinematics::Atom const * stub_atom3(  ) const  {
				if( bp::override func_stub_atom3 = this->get_override( "stub_atom3" ) )
						return func_stub_atom3(  );
				else
						return this->core::kinematics::JumpAtom::stub_atom3(  );
		}


		::core::kinematics::Atom const * default_stub_atom3(  ) const  {
				return core::kinematics::JumpAtom::stub_atom3( );
		}

		virtual void update_internal_coords( ::core::kinematics::Stub & stub, bool const recursive=true ) {
				if( bp::override func_update_internal_coords = this->get_override( "update_internal_coords" ) )
						func_update_internal_coords( boost::ref(stub), recursive );
				else
						this->core::kinematics::JumpAtom::update_internal_coords( boost::ref(stub), recursive );
		}


		void default_update_internal_coords( ::core::kinematics::Stub & stub, bool const recursive=true ) {
				core::kinematics::JumpAtom::update_internal_coords( boost::ref(stub), recursive );
		}

		virtual void update_stub( ::core::kinematics::Stub & arg0 ) const  {
				if( bp::override func_update_stub = this->get_override( "update_stub" ) )
						func_update_stub( boost::ref(arg0) );
				else
						this->core::kinematics::JumpAtom::update_stub( boost::ref(arg0) );
		}


		void default_update_stub( ::core::kinematics::Stub & arg0 ) const  {
				core::kinematics::JumpAtom::update_stub( boost::ref(arg0) );
		}

		virtual void update_xyz_coords( ::core::kinematics::Stub & stub ) {
				if( bp::override func_update_xyz_coords = this->get_override( "update_xyz_coords" ) )
						func_update_xyz_coords( boost::ref(stub) );
				else
						this->core::kinematics::JumpAtom::update_xyz_coords( boost::ref(stub) );
		}


		void default_update_xyz_coords( ::core::kinematics::Stub & stub ) {
				core::kinematics::JumpAtom::update_xyz_coords( boost::ref(stub) );
		}

};

BOOST_PYTHON_MODULE(_kinematics){
		{ //::std::vector<int, std::allocator<int> >
				typedef bp::class_< std::vector<int, std::allocator<int> > > vector_less_int_comma__std_scope_allocator_less_int_grate___grate__exposer_t;
				vector_less_int_comma__std_scope_allocator_less_int_grate___grate__exposer_t vector_less_int_comma__std_scope_allocator_less_int_grate___grate__exposer = vector_less_int_comma__std_scope_allocator_less_int_grate___grate__exposer_t( "vector_less_int_comma__std_scope_allocator_less_int_grate___grate_" );
				bp::scope vector_less_int_comma__std_scope_allocator_less_int_grate___grate__scope( vector_less_int_comma__std_scope_allocator_less_int_grate___grate__exposer );
				vector_less_int_comma__std_scope_allocator_less_int_grate___grate__exposer.def( bp::vector_indexing_suite< ::std::vector<int, std::allocator<int> >, true >() );
		}

		{ //::std::vector<core::kinematics::AtomID, std::allocator<core::kinematics::AtomID> >
				typedef bp::class_< std::vector<core::kinematics::AtomID, std::allocator<core::kinematics::AtomID> > > vector_less_core_scope_kinematics_scope_AtomID_comma__std_scope_allocator_less_core_scope_kinematics_scope_AtomID_grate___grate__exposer_t;
				vector_less_core_scope_kinematics_scope_AtomID_comma__std_scope_allocator_less_core_scope_kinematics_scope_AtomID_grate___grate__exposer_t vector_less_core_scope_kinematics_scope_AtomID_comma__std_scope_allocator_less_core_scope_kinematics_scope_AtomID_grate___grate__exposer = vector_less_core_scope_kinematics_scope_AtomID_comma__std_scope_allocator_less_core_scope_kinematics_scope_AtomID_grate___grate__exposer_t( "vector_less_core_scope_kinematics_scope_AtomID_comma__std_scope_allocator_less_core_scope_kinematics_scope_AtomID_grate___grate_" );
				bp::scope vector_less_core_scope_kinematics_scope_AtomID_comma__std_scope_allocator_less_core_scope_kinematics_scope_AtomID_grate___grate__scope( vector_less_core_scope_kinematics_scope_AtomID_comma__std_scope_allocator_less_core_scope_kinematics_scope_AtomID_grate___grate__exposer );
				vector_less_core_scope_kinematics_scope_AtomID_comma__std_scope_allocator_less_core_scope_kinematics_scope_AtomID_grate___grate__exposer.def( bp::vector_indexing_suite< ::std::vector<core::kinematics::AtomID, std::allocator<core::kinematics::AtomID> > >() );
		}

		{ //::std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> >
				typedef bp::class_< std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > vector_less_core_scope_kinematics_scope_Atom_ptr__comma__std_scope_allocator_less_core_scope_kinematics_scope_Atom_ptr__grate___grate__exposer_t;
				vector_less_core_scope_kinematics_scope_Atom_ptr__comma__std_scope_allocator_less_core_scope_kinematics_scope_Atom_ptr__grate___grate__exposer_t vector_less_core_scope_kinematics_scope_Atom_ptr__comma__std_scope_allocator_less_core_scope_kinematics_scope_Atom_ptr__grate___grate__exposer = vector_less_core_scope_kinematics_scope_Atom_ptr__comma__std_scope_allocator_less_core_scope_kinematics_scope_Atom_ptr__grate___grate__exposer_t( "vector_less_core_scope_kinematics_scope_Atom_ptr__comma__std_scope_allocator_less_core_scope_kinematics_scope_Atom_ptr__grate___grate_" );
				bp::scope vector_less_core_scope_kinematics_scope_Atom_ptr__comma__std_scope_allocator_less_core_scope_kinematics_scope_Atom_ptr__grate___grate__scope( vector_less_core_scope_kinematics_scope_Atom_ptr__comma__std_scope_allocator_less_core_scope_kinematics_scope_Atom_ptr__grate___grate__exposer );
				vector_less_core_scope_kinematics_scope_Atom_ptr__comma__std_scope_allocator_less_core_scope_kinematics_scope_Atom_ptr__grate___grate__exposer.def( bp::vector_indexing_suite< ::std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > >() );
		}

		{ //::std::map<std::pair<int, int>, double, std::less<std::pair<int, int> >, std::allocator<std::pair<std::pair<int, int> const, double> > >
				typedef bp::class_< std::map<std::pair<int, int>, double, std::less<std::pair<int, int> >, std::allocator<std::pair<std::pair<int, int> const, double> > > > map_less_std_scope_pair_less_int_comma__int_grate__comma__double_comma__std_scope_less_less_std_scope_pair_less_int_comma__int_grate___grate__comma__std_scope_allocator_less_std_scope_pair_less_std_scope_pair_less_int_comma__int_grate__const_comma__double_grate___grate___grate__exposer_t;
				map_less_std_scope_pair_less_int_comma__int_grate__comma__double_comma__std_scope_less_less_std_scope_pair_less_int_comma__int_grate___grate__comma__std_scope_allocator_less_std_scope_pair_less_std_scope_pair_less_int_comma__int_grate__const_comma__double_grate___grate___grate__exposer_t map_less_std_scope_pair_less_int_comma__int_grate__comma__double_comma__std_scope_less_less_std_scope_pair_less_int_comma__int_grate___grate__comma__std_scope_allocator_less_std_scope_pair_less_std_scope_pair_less_int_comma__int_grate__const_comma__double_grate___grate___grate__exposer = map_less_std_scope_pair_less_int_comma__int_grate__comma__double_comma__std_scope_less_less_std_scope_pair_less_int_comma__int_grate___grate__comma__std_scope_allocator_less_std_scope_pair_less_std_scope_pair_less_int_comma__int_grate__const_comma__double_grate___grate___grate__exposer_t( "map_less_std_scope_pair_less_int_comma__int_grate__comma__double_comma__std_scope_less_less_std_scope_pair_less_int_comma__int_grate___grate__comma__std_scope_allocator_less_std_scope_pair_less_std_scope_pair_less_int_comma__int_grate__const_comma__double_grate___grate___grate_" );
				bp::scope map_less_std_scope_pair_less_int_comma__int_grate__comma__double_comma__std_scope_less_less_std_scope_pair_less_int_comma__int_grate___grate__comma__std_scope_allocator_less_std_scope_pair_less_std_scope_pair_less_int_comma__int_grate__const_comma__double_grate___grate___grate__scope( map_less_std_scope_pair_less_int_comma__int_grate__comma__double_comma__std_scope_less_less_std_scope_pair_less_int_comma__int_grate___grate__comma__std_scope_allocator_less_std_scope_pair_less_std_scope_pair_less_int_comma__int_grate__const_comma__double_grate___grate___grate__exposer );
				map_less_std_scope_pair_less_int_comma__int_grate__comma__double_comma__std_scope_less_less_std_scope_pair_less_int_comma__int_grate___grate__comma__std_scope_allocator_less_std_scope_pair_less_std_scope_pair_less_int_comma__int_grate__const_comma__double_grate___grate___grate__exposer.def( bp::map_indexing_suite< ::std::map<std::pair<int, int>, double, std::less<std::pair<int, int> >, std::allocator<std::pair<std::pair<int, int> const, double> > >, true >() );
		}

		bp::enum_< core::kinematics::DOF_Type>("DOF_Type")
				.value("PHI", core::kinematics::PHI)
				.value("THETA", core::kinematics::THETA)
				.value("D", core::kinematics::D)
				.value("RB1", core::kinematics::RB1)
				.value("RB2", core::kinematics::RB2)
				.value("RB3", core::kinematics::RB3)
				.value("RB4", core::kinematics::RB4)
				.value("RB5", core::kinematics::RB5)
				.value("RB6", core::kinematics::RB6)
				.export_values()
				;

		bp::enum_< core::kinematics::TorsionType>("TorsionType")
				.value("BB", core::kinematics::BB)
				.value("CHI", core::kinematics::CHI)
				.value("JUMP", core::kinematics::JUMP)
				.export_values()
				;

		bp::class_< Atom_wrapper, utility::pointer::owning_ptr< ::core::kinematics::Atom >, boost::noncopyable >( "Atom", bp::no_init )
				.def(
						"append_atom"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom * ) )(&::core::kinematics::Atom::append_atom) )
						, ( bp::arg("arg0") ) )
				.def(
						"atom_id"
						, bp::pure_virtual( (::core::kinematics::AtomID const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::atom_id) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"atoms_begin"
						, bp::pure_virtual( (::__gnu_cxx::__normal_iterator<core::kinematics::Atom* const*, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::atoms_begin) ) )
				.def(
						"atoms_begin"
						, bp::pure_virtual( (::__gnu_cxx::__normal_iterator<core::kinematics::Atom**, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > ( ::core::kinematics::Atom::* )(  ) )(&::core::kinematics::Atom::atoms_begin) ) )
				.def(
						"atoms_end"
						, bp::pure_virtual( (::__gnu_cxx::__normal_iterator<core::kinematics::Atom* const*, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::atoms_end) ) )
				.def(
						"atoms_end"
						, bp::pure_virtual( (::__gnu_cxx::__normal_iterator<core::kinematics::Atom**, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > ( ::core::kinematics::Atom::* )(  ) )(&::core::kinematics::Atom::atoms_end) ) )
				.def(
						"child"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )( int const ) const)(&::core::kinematics::Atom::child) )
						, ( bp::arg("k") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"child"
						, bp::pure_virtual( (::core::kinematics::Atom * ( ::core::kinematics::Atom::* )( int const ) )(&::core::kinematics::Atom::child) )
						, ( bp::arg("k") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"clone"
						, bp::pure_virtual( (::core::kinematics::Atom * ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom * ) const)(&::core::kinematics::Atom::clone) )
						, ( bp::arg("parent_in") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"copy_coords"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom const & ) )(&::core::kinematics::Atom::copy_coords) )
						, ( bp::arg("src") ) )
				.def(
						"delete_atom"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom * ) )(&::core::kinematics::Atom::delete_atom) )
						, ( bp::arg("arg0") ) )
				.def(
						"dihedral_between_bonded_children"
						, bp::pure_virtual( (::core::Real ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom const *,::core::kinematics::Atom const * ) const)(&::core::kinematics::Atom::dihedral_between_bonded_children) )
						, ( bp::arg("child1"), bp::arg("child2") ) )
				.def(
						"distance"
						, bp::pure_virtual( (::core::Length ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom const & ) const)(&::core::kinematics::Atom::distance) )
						, ( bp::arg("atom") ) )
				.def(
						"distance_squared"
						, bp::pure_virtual( (::core::Length ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom const & ) const)(&::core::kinematics::Atom::distance_squared) )
						, ( bp::arg("atom") ) )
				.def(
						"dof"
						, bp::pure_virtual( (::core::Real ( ::core::kinematics::Atom::* )( ::core::kinematics::DOF_Type const ) const)(&::core::kinematics::Atom::dof) )
						, ( bp::arg("type") ) )
				.def(
						"downstream"
						, bp::pure_virtual( (bool ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom const * ) const)(&::core::kinematics::Atom::downstream) )
						, ( bp::arg("atom1") ) )
				.def(
						"erase"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )(  ) )(&::core::kinematics::Atom::erase) ) )
				.def(
						"get_dof_axis_and_end_pos"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::Vector &,::core::PointPosition &,::core::kinematics::DOF_Type const ) const)(&::core::kinematics::Atom::get_dof_axis_and_end_pos) )
						, ( bp::arg("axis"), bp::arg("end_pos"), bp::arg("type") ) )
				.def(
						"get_input_stub"
						, bp::pure_virtual( (::core::kinematics::Stub ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::get_input_stub) ) )
				.def(
						"get_nonjump_atom"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )( int const ) const)(&::core::kinematics::Atom::get_nonjump_atom) )
						, ( bp::arg("i") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"get_stub"
						, bp::pure_virtual( (::core::kinematics::Stub ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::get_stub) ) )
				.def(
						"id"
						, bp::pure_virtual( (::core::kinematics::AtomID const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::id) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"id"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::AtomID const & ) )(&::core::kinematics::Atom::id) )
						, ( bp::arg("id_in") ) )
				.def(
						"input_stub_atom0"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::input_stub_atom0) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"input_stub_atom0_id"
						, bp::pure_virtual( (::core::kinematics::AtomID const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::input_stub_atom0_id) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"input_stub_atom1"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::input_stub_atom1) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"input_stub_atom1_id"
						, bp::pure_virtual( (::core::kinematics::AtomID const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::input_stub_atom1_id) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"input_stub_atom2"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::input_stub_atom2) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"input_stub_atom2_id"
						, bp::pure_virtual( (::core::kinematics::AtomID const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::input_stub_atom2_id) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"input_stub_atom3"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::input_stub_atom3) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"input_stub_atom3_id"
						, bp::pure_virtual( (::core::kinematics::AtomID const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::input_stub_atom3_id) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"insert_atom"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom * ) )(&::core::kinematics::Atom::insert_atom) )
						, ( bp::arg("arg0") ) )
				.def(
						"insert_atom"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom *,int const ) )(&::core::kinematics::Atom::insert_atom) )
						, ( bp::arg("arg0"), bp::arg("arg1") ) )
				.def(
						"is_jump"
						, bp::pure_virtual( (bool ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::is_jump) ) )
				.def(
						"jump"
						, bp::pure_virtual( (::core::kinematics::Jump const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::jump) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"jump"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Jump const & ) )(&::core::kinematics::Atom::jump) )
						, ( bp::arg("jump_in") ) )
				.def(
						"keep_dof_fixed"
						, (bool ( ::core::kinematics::Atom::* )( ::core::kinematics::DOF_Type const ) const)(&::core::kinematics::Atom::keep_dof_fixed)
						, (bool ( Atom_wrapper::* )( ::core::kinematics::DOF_Type const ) const)(&Atom_wrapper::default_keep_dof_fixed)
						, ( bp::arg("arg0") ) )
				.def(
						"n_atom"
						, bp::pure_virtual( (::size_t ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::n_atom) ) )
				.def(
						"n_children"
						, bp::pure_virtual( (int ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::n_children) ) )
				.def(
						"next_child"
						, bp::pure_virtual( (::core::kinematics::Atom * ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom const * ) )(&::core::kinematics::Atom::next_child) )
						, ( bp::arg("child") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"parent"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::parent) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"parent"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom * ) )(&::core::kinematics::Atom::parent) )
						, ( bp::arg("parent_in") ) )
				.def(
						"parent"
						, bp::pure_virtual( (::core::kinematics::Atom * ( ::core::kinematics::Atom::* )(  ) )(&::core::kinematics::Atom::parent) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"position"
						, bp::pure_virtual( (::core::PointPosition const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::position) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"position"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::PointPosition const & ) )(&::core::kinematics::Atom::position) )
						, ( bp::arg("position_a") ) )
				.def(
						"previous_child"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom const * ) const)(&::core::kinematics::Atom::previous_child) )
						, ( bp::arg("child") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"previous_sibling"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::previous_sibling) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"replace_atom"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom * const,::core::kinematics::Atom * const ) )(&::core::kinematics::Atom::replace_atom) )
						, ( bp::arg("old_atom"), bp::arg("new_atom") ) )
				.def(
						"set_dof"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::DOF_Type const,::core::Real const ) )(&::core::kinematics::Atom::set_dof) )
						, ( bp::arg("type"), bp::arg("value") ) )
				.def(
						"setup_min_map"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::DOF_ID &,::core::kinematics::DOF_ID_Mask const &,::core::optimization::MinimizerMap & ) const)(&::core::kinematics::Atom::setup_min_map) )
						, ( bp::arg("last_torsion"), bp::arg("move_map"), bp::arg("min_map") ) )
				.def(
						"show"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::show) ) )
				.def(
						"stub_atom1"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::stub_atom1) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"stub_atom1_id"
						, bp::pure_virtual( (::core::kinematics::AtomID const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::stub_atom1_id) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"stub_atom2"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::stub_atom2) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"stub_atom2_id"
						, bp::pure_virtual( (::core::kinematics::AtomID const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::stub_atom2_id) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"stub_atom3"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::stub_atom3) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"stub_atom3_id"
						, bp::pure_virtual( (::core::kinematics::AtomID const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::stub_atom3_id) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"stub_defined"
						, bp::pure_virtual( (bool ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::stub_defined) ) )
				.def(
						"update_atom_pointer"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::AtomPointers & ) )(&::core::kinematics::Atom::update_atom_pointer) )
						, ( bp::arg("atom_pointer") ) )
				.def(
						"update_domain_map"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( int &,int &,::core::kinematics::DomainMap &,::core::kinematics::AtomID_Mask const &,::core::kinematics::AtomID_Mask const & ) const)(&::core::kinematics::Atom::update_domain_map) )
						, ( bp::arg("current_color"), bp::arg("biggest_color"), bp::arg("domain_map"), bp::arg("dof_moved"), bp::arg("atom_moved") ) )
				.def(
						"update_internal_coords"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Stub &,bool const ) )(&::core::kinematics::Atom::update_internal_coords) )
						, ( bp::arg("stub"), bp::arg("recursive")=(bool const)(true) ) )
				.def(
						"update_internal_coords"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( bool const ) )(&::core::kinematics::Atom::update_internal_coords) )
						, ( bp::arg("recursive") ) )
				.def(
						"update_stub"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Stub & ) const)(&::core::kinematics::Atom::update_stub) )
						, ( bp::arg("stub") ) )
				.def(
						"update_xyz_coords"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Stub & ) )(&::core::kinematics::Atom::update_xyz_coords) )
						, ( bp::arg("stub") ) )
				.def(
						"x"
						, bp::pure_virtual( (::core::Length const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::x) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"xyz"
						, bp::pure_virtual( (::core::PointPosition const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::xyz) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"xyz"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::PointPosition const & ) )(&::core::kinematics::Atom::xyz) )
						, ( bp::arg("position_a") ) )
				.def(
						"y"
						, bp::pure_virtual( (::core::Length const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::y) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"z"
						, bp::pure_virtual( (::core::Length const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::z) )
						, bp::return_value_policy< bp::copy_const_reference >() );

		bp::class_< core::kinematics::AtomID >( "AtomID" )
				.def( bp::init< >() )
				.def( bp::init< core::kinematics::AtomID const & >(( bp::arg("src") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def( bp::init< int, int >(( bp::arg("atomno_in"), bp::arg("rsd_in") )) )
				.def(
						"atomno"
						, (int ( ::core::kinematics::AtomID::* )(  ) const)( &::core::kinematics::AtomID::atomno ) )
				.def(
						"atomno"
						, (int & ( ::core::kinematics::AtomID::* )(  ) )( &::core::kinematics::AtomID::atomno )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"rsd"
						, (int ( ::core::kinematics::AtomID::* )(  ) const)( &::core::kinematics::AtomID::rsd ) )
				.def(
						"rsd"
						, (int & ( ::core::kinematics::AtomID::* )(  ) )( &::core::kinematics::AtomID::rsd )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"valid"
						, (bool ( ::core::kinematics::AtomID::* )(  ) const)( &::core::kinematics::AtomID::valid ) )
				.def( bp::self != bp::self )
				.def( bp::self < bp::self )
				.def( bp::self_ns::str( bp::self ) )
				.def( bp::self == bp::self );

		bp::class_< core::kinematics::AtomID_Map<bool> >( "AtomID_Mask", bp::init< bool const & >(( bp::arg("default_value_a") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def( bp::init< unsigned int, bool const & >(( bp::arg("n_res"), bp::arg("default_value_a") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"clear"
						, (void ( ::core::kinematics::AtomID_Map<bool>::* )(  ) )( &::core::kinematics::AtomID_Map<bool>::clear ) )
				.def(
						"clear"
						, (void ( ::core::kinematics::AtomID_Map<bool>::* )( bool const & ) )( &::core::kinematics::AtomID_Map<bool>::clear )
						, ( bp::arg("default_value_a") ) )
				.def(
						"default_value"
						, (bool const & ( ::core::kinematics::AtomID_Map<bool>::* )(  ) const)( &::core::kinematics::AtomID_Map<bool>::default_value )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"default_value"
						, (void ( ::core::kinematics::AtomID_Map<bool>::* )( bool const & ) )( &::core::kinematics::AtomID_Map<bool>::default_value )
						, ( bp::arg("default_value_a") ) )
				.def(
						"empty"
						, (bool ( ::core::kinematics::AtomID_Map<bool>::* )(  ) const)( &::core::kinematics::AtomID_Map<bool>::empty ) )
				.def(
						"fill"
						, (void ( ::core::kinematics::AtomID_Map<bool>::* )(  ) )( &::core::kinematics::AtomID_Map<bool>::fill ) )
				.def(
						"fill_with"
						, (void ( ::core::kinematics::AtomID_Map<bool>::* )( bool const & ) )( &::core::kinematics::AtomID_Map<bool>::fill_with )
						, ( bp::arg("value") ) )
				.def(
						"fill_with"
						, (void ( ::core::kinematics::AtomID_Map<bool>::* )( ::size_t const,bool const & ) )( &::core::kinematics::AtomID_Map<bool>::fill_with )
						, ( bp::arg("seqpos"), bp::arg("value") ) )
				.def(
						"finalize"
						, (void ( ::core::kinematics::AtomID_Map<bool>::* )(  ) )( &::core::kinematics::AtomID_Map<bool>::finalize ) )
				.def(
						"get"
						, (bool ( ::core::kinematics::AtomID_Map<bool>::* )( ::core::kinematics::AtomID const & ) const)( &::core::kinematics::AtomID_Map<bool>::get )
						, ( bp::arg("id") ) )
				.def(
						"has"
						, (bool ( ::core::kinematics::AtomID_Map<bool>::* )( ::core::kinematics::AtomID const & ) const)( &::core::kinematics::AtomID_Map<bool>::has )
						, ( bp::arg("id") ) )
				.def(
						"n_atom"
						, (::size_t ( ::core::kinematics::AtomID_Map<bool>::* )( ::size_t const ) const)( &::core::kinematics::AtomID_Map<bool>::n_atom )
						, ( bp::arg("i_res") ) )
				.def(
						"n_residue"
						, (::size_t ( ::core::kinematics::AtomID_Map<bool>::* )(  ) const)( &::core::kinematics::AtomID_Map<bool>::n_residue ) )
				.def(
						"__call__"
						, (bool ( ::core::kinematics::AtomID_Map<bool>::* )( ::core::kinematics::AtomID const & ) const)( &::core::kinematics::AtomID_Map<bool>::operator() )
						, ( bp::arg("id") ) )
				.def(
						"__call__"
						, (::std::_Bit_reference ( ::core::kinematics::AtomID_Map<bool>::* )( ::core::kinematics::AtomID const & ) )( &::core::kinematics::AtomID_Map<bool>::operator() )
						, ( bp::arg("id") ) )
				.def(
						"__call__"
						, (bool ( ::core::kinematics::AtomID_Map<bool>::* )( ::size_t const,::size_t const ) const)( &::core::kinematics::AtomID_Map<bool>::operator() )
						, ( bp::arg("i_res"), bp::arg("i_atom") ) )
				.def(
						"__call__"
						, (::std::_Bit_reference ( ::core::kinematics::AtomID_Map<bool>::* )( ::size_t const,::size_t const ) )( &::core::kinematics::AtomID_Map<bool>::operator() )
						, ( bp::arg("i_res"), bp::arg("i_atom") ) )
				.def(
						"__call__"
						, (::utility::vector1<bool, std::allocator<bool> > const & ( ::core::kinematics::AtomID_Map<bool>::* )( ::size_t const ) const)( &::core::kinematics::AtomID_Map<bool>::operator() )
						, ( bp::arg("i_res") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__call__"
						, (::utility::vector1<bool, std::allocator<bool> > & ( ::core::kinematics::AtomID_Map<bool>::* )( ::size_t const ) )( &::core::kinematics::AtomID_Map<bool>::operator() )
						, ( bp::arg("i_res") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"__getitem__"
						, (bool ( ::core::kinematics::AtomID_Map<bool>::* )( ::core::kinematics::AtomID const & ) const)( &::core::kinematics::AtomID_Map<bool>::operator[] )
						, ( bp::arg("id") ) )
				.def(
						"__getitem__"
						, (::std::_Bit_reference ( ::core::kinematics::AtomID_Map<bool>::* )( ::core::kinematics::AtomID const & ) )( &::core::kinematics::AtomID_Map<bool>::operator[] )
						, ( bp::arg("id") ) )
				.def(
						"__getitem__"
						, (::utility::vector1<bool, std::allocator<bool> > const & ( ::core::kinematics::AtomID_Map<bool>::* )( ::size_t const ) const)( &::core::kinematics::AtomID_Map<bool>::operator[] )
						, ( bp::arg("i_res") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__getitem__"
						, (::utility::vector1<bool, std::allocator<bool> > & ( ::core::kinematics::AtomID_Map<bool>::* )( ::size_t const ) )( &::core::kinematics::AtomID_Map<bool>::operator[] )
						, ( bp::arg("i_res") )
						, bp::return_internal_reference< 1 >() )
				.def(
						"resize"
						, (void ( ::core::kinematics::AtomID_Map<bool>::* )( ::size_t const ) )( &::core::kinematics::AtomID_Map<bool>::resize )
						, ( bp::arg("n_res") ) )
				.def(
						"resize"
						, (void ( ::core::kinematics::AtomID_Map<bool>::* )( ::size_t const,::size_t const ) )( &::core::kinematics::AtomID_Map<bool>::resize )
						, ( bp::arg("i_res"), bp::arg("n_atom") ) )
				.def(
						"resize"
						, (void ( ::core::kinematics::AtomID_Map<bool>::* )( ::size_t const,::size_t const,bool const & ) )( &::core::kinematics::AtomID_Map<bool>::resize )
						, ( bp::arg("i_res"), bp::arg("n_atom"), bp::arg("value") ) )
				.def(
						"set"
						, (void ( ::core::kinematics::AtomID_Map<bool>::* )( ::core::kinematics::AtomID const &,bool const & ) )( &::core::kinematics::AtomID_Map<bool>::set )
						, ( bp::arg("id"), bp::arg("value") ) )
				.def(
						"shrink"
						, (void ( ::core::kinematics::AtomID_Map<bool>::* )(  ) )( &::core::kinematics::AtomID_Map<bool>::shrink ) )
				.def(
						"size"
						, (::size_t ( ::core::kinematics::AtomID_Map<bool>::* )(  ) const)( &::core::kinematics::AtomID_Map<bool>::size ) )
				.def(
						"swap"
						, (void ( ::core::kinematics::AtomID_Map<bool>::* )( ::core::kinematics::AtomID_Map<bool> & ) )( &::core::kinematics::AtomID_Map<bool>::swap )
						, ( bp::arg("s") ) )
				.def( bp::self != bp::self )
				.def( bp::self == bp::self );

		bp::implicitly_convertible< bool const &, core::kinematics::AtomID_Map<bool> >();

		bp::class_< core::kinematics::AtomID_Map<core::kinematics::Atom*> >( "AtomPointers", bp::init< core::kinematics::Atom * const & >(( bp::arg("default_value_a") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def( bp::init< unsigned int, core::kinematics::Atom * const & >(( bp::arg("n_res"), bp::arg("default_value_a") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"clear"
						, (void ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )(  ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::clear ) )
				.def(
						"clear"
						, (void ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::core::kinematics::Atom * const & ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::clear )
						, ( bp::arg("default_value_a") ) )
				.def(
						"default_value"
						, (::core::kinematics::Atom * const & ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )(  ) const)( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::default_value )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"default_value"
						, (void ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::core::kinematics::Atom * const & ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::default_value )
						, ( bp::arg("default_value_a") ) )
				.def(
						"empty"
						, (bool ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )(  ) const)( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::empty ) )
				.def(
						"fill"
						, (void ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )(  ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::fill ) )
				.def(
						"fill_with"
						, (void ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::core::kinematics::Atom * const & ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::fill_with )
						, ( bp::arg("value") ) )
				.def(
						"fill_with"
						, (void ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::size_t const,::core::kinematics::Atom * const & ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::fill_with )
						, ( bp::arg("seqpos"), bp::arg("value") ) )
				.def(
						"finalize"
						, (void ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )(  ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::finalize ) )
				.def(
						"get"
						, (::core::kinematics::Atom * const & ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::core::kinematics::AtomID const & ) const)( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::get )
						, ( bp::arg("id") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"has"
						, (bool ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::core::kinematics::AtomID const & ) const)( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::has )
						, ( bp::arg("id") ) )
				.def(
						"n_atom"
						, (::size_t ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::size_t const ) const)( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::n_atom )
						, ( bp::arg("i_res") ) )
				.def(
						"n_residue"
						, (::size_t ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )(  ) const)( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::n_residue ) )
				.def(
						"__call__"
						, (::core::kinematics::Atom * const & ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::core::kinematics::AtomID const & ) const)( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::operator() )
						, ( bp::arg("id") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__call__"
						, (::core::kinematics::Atom * & ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::core::kinematics::AtomID const & ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::operator() )
						, ( bp::arg("id") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"__call__"
						, (::core::kinematics::Atom * const & ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::size_t const,::size_t const ) const)( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::operator() )
						, ( bp::arg("i_res"), bp::arg("i_atom") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__call__"
						, (::core::kinematics::Atom * & ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::size_t const,::size_t const ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::operator() )
						, ( bp::arg("i_res"), bp::arg("i_atom") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"__call__"
						, (::utility::vector1<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > const & ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::size_t const ) const)( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::operator() )
						, ( bp::arg("i_res") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__call__"
						, (::utility::vector1<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > & ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::size_t const ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::operator() )
						, ( bp::arg("i_res") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"__getitem__"
						, (::core::kinematics::Atom * const & ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::core::kinematics::AtomID const & ) const)( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::operator[] )
						, ( bp::arg("id") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__getitem__"
						, (::core::kinematics::Atom * & ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::core::kinematics::AtomID const & ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::operator[] )
						, ( bp::arg("id") )
						, bp::return_internal_reference< 1 >() )
				.def(
						"__getitem__"
						, (::utility::vector1<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > const & ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::size_t const ) const)( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::operator[] )
						, ( bp::arg("i_res") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__getitem__"
						, (::utility::vector1<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > & ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::size_t const ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::operator[] )
						, ( bp::arg("i_res") )
						, bp::return_internal_reference< 1 >() )
				.def(
						"resize"
						, (void ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::size_t const ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::resize )
						, ( bp::arg("n_res") ) )
				.def(
						"resize"
						, (void ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::size_t const,::size_t const ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::resize )
						, ( bp::arg("i_res"), bp::arg("n_atom") ) )
				.def(
						"resize"
						, (void ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::size_t const,::size_t const,::core::kinematics::Atom * const & ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::resize )
						, ( bp::arg("i_res"), bp::arg("n_atom"), bp::arg("value") ) )
				.def(
						"set"
						, (void ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::core::kinematics::AtomID const &,::core::kinematics::Atom * const & ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::set )
						, ( bp::arg("id"), bp::arg("value") ) )
				.def(
						"shrink"
						, (void ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )(  ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::shrink ) )
				.def(
						"size"
						, (::size_t ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )(  ) const)( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::size ) )
				.def(
						"swap"
						, (void ( ::core::kinematics::AtomID_Map<core::kinematics::Atom*>::* )( ::core::kinematics::AtomID_Map<core::kinematics::Atom*> & ) )( &::core::kinematics::AtomID_Map<core::kinematics::Atom*>::swap )
						, ( bp::arg("s") ) )
				.def( bp::self != bp::self )
				.def( bp::self == bp::self );

		bp::implicitly_convertible< core::kinematics::Atom * const &, core::kinematics::AtomID_Map<core::kinematics::Atom*> >();

		bp::class_< core::kinematics::AtomID_Map<core::optimization::DOF_Node*> >( "AtomID_Map_less_core_scope_optimization_scope_DOF_Node_ptr__grate_", bp::init< core::optimization::DOF_Node * const & >(( bp::arg("default_value_a") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def( bp::init< unsigned int, core::optimization::DOF_Node * const & >(( bp::arg("n_res"), bp::arg("default_value_a") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"clear"
						, (void ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )(  ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::clear ) )
				.def(
						"clear"
						, (void ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::core::optimization::DOF_Node * const & ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::clear )
						, ( bp::arg("default_value_a") ) )
				.def(
						"default_value"
						, (::core::optimization::DOF_Node * const & ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )(  ) const)( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::default_value )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"default_value"
						, (void ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::core::optimization::DOF_Node * const & ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::default_value )
						, ( bp::arg("default_value_a") ) )
				.def(
						"empty"
						, (bool ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )(  ) const)( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::empty ) )
				.def(
						"fill"
						, (void ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )(  ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::fill ) )
				.def(
						"fill_with"
						, (void ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::core::optimization::DOF_Node * const & ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::fill_with )
						, ( bp::arg("value") ) )
				.def(
						"fill_with"
						, (void ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::size_t const,::core::optimization::DOF_Node * const & ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::fill_with )
						, ( bp::arg("seqpos"), bp::arg("value") ) )
				.def(
						"finalize"
						, (void ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )(  ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::finalize ) )
				.def(
						"get"
						, (::core::optimization::DOF_Node * const & ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::AtomID const & ) const)( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::get )
						, ( bp::arg("id") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"has"
						, (bool ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::AtomID const & ) const)( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::has )
						, ( bp::arg("id") ) )
				.def(
						"n_atom"
						, (::size_t ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::size_t const ) const)( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::n_atom )
						, ( bp::arg("i_res") ) )
				.def(
						"n_residue"
						, (::size_t ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )(  ) const)( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::n_residue ) )
				.def(
						"__call__"
						, (::core::optimization::DOF_Node * const & ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::AtomID const & ) const)( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::operator() )
						, ( bp::arg("id") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__call__"
						, (::core::optimization::DOF_Node * & ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::AtomID const & ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::operator() )
						, ( bp::arg("id") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"__call__"
						, (::core::optimization::DOF_Node * const & ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::size_t const,::size_t const ) const)( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::operator() )
						, ( bp::arg("i_res"), bp::arg("i_atom") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__call__"
						, (::core::optimization::DOF_Node * & ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::size_t const,::size_t const ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::operator() )
						, ( bp::arg("i_res"), bp::arg("i_atom") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"__call__"
						, (::utility::vector1<core::optimization::DOF_Node*, std::allocator<core::optimization::DOF_Node*> > const & ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::size_t const ) const)( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::operator() )
						, ( bp::arg("i_res") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__call__"
						, (::utility::vector1<core::optimization::DOF_Node*, std::allocator<core::optimization::DOF_Node*> > & ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::size_t const ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::operator() )
						, ( bp::arg("i_res") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"__getitem__"
						, (::core::optimization::DOF_Node * const & ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::AtomID const & ) const)( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::operator[] )
						, ( bp::arg("id") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__getitem__"
						, (::core::optimization::DOF_Node * & ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::AtomID const & ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::operator[] )
						, ( bp::arg("id") )
						, bp::return_internal_reference< 1 >() )
				.def(
						"__getitem__"
						, (::utility::vector1<core::optimization::DOF_Node*, std::allocator<core::optimization::DOF_Node*> > const & ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::size_t const ) const)( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::operator[] )
						, ( bp::arg("i_res") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__getitem__"
						, (::utility::vector1<core::optimization::DOF_Node*, std::allocator<core::optimization::DOF_Node*> > & ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::size_t const ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::operator[] )
						, ( bp::arg("i_res") )
						, bp::return_internal_reference< 1 >() )
				.def(
						"resize"
						, (void ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::size_t const ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::resize )
						, ( bp::arg("n_res") ) )
				.def(
						"resize"
						, (void ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::size_t const,::size_t const ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::resize )
						, ( bp::arg("i_res"), bp::arg("n_atom") ) )
				.def(
						"resize"
						, (void ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::size_t const,::size_t const,::core::optimization::DOF_Node * const & ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::resize )
						, ( bp::arg("i_res"), bp::arg("n_atom"), bp::arg("value") ) )
				.def(
						"set"
						, (void ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::AtomID const &,::core::optimization::DOF_Node * const & ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::set )
						, ( bp::arg("id"), bp::arg("value") ) )
				.def(
						"shrink"
						, (void ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )(  ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::shrink ) )
				.def(
						"size"
						, (::size_t ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )(  ) const)( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::size ) )
				.def(
						"swap"
						, (void ( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*> & ) )( &::core::kinematics::AtomID_Map<core::optimization::DOF_Node*>::swap )
						, ( bp::arg("s") ) )
				.def( bp::self != bp::self )
				.def( bp::self == bp::self );

		bp::implicitly_convertible< core::optimization::DOF_Node * const &, core::kinematics::AtomID_Map<core::optimization::DOF_Node*> >();

		{ //::core::kinematics::AtomTree
				typedef bp::class_< core::kinematics::AtomTree > AtomTree_exposer_t;
				AtomTree_exposer_t AtomTree_exposer = AtomTree_exposer_t( "AtomTree" );
				bp::scope AtomTree_scope( AtomTree_exposer );
				AtomTree_exposer.def( bp::init< core::kinematics::Atom *, bp::optional< bool > >(( bp::arg("new_root"), bp::arg("from_xyz")=(bool const)(true) ))[bp::return_value_policy< bp::return_by_value >()] );
				AtomTree_exposer.def( bp::init< >() );
				AtomTree_exposer.def( bp::init< core::kinematics::AtomTree const & >(( bp::arg("src") ))[bp::return_value_policy< bp::return_by_value >()] );
				{ //::core::kinematics::AtomTree::add_atom

						typedef void ( ::core::kinematics::AtomTree::*add_atom_function_type )( ::core::kinematics::AtomID const &,::core::kinematics::AtomID const &,bool const,bool const ) ;

						AtomTree_exposer.def(
								"add_atom"
								, add_atom_function_type( &::core::kinematics::AtomTree::add_atom )
								, ( bp::arg("id1"), bp::arg("id2"), bp::arg("add_bonded_atom"), bp::arg("from_xyz") ) );

				}
				{ //::core::kinematics::AtomTree::atom

						typedef ::core::kinematics::Atom const & ( ::core::kinematics::AtomTree::*atom_function_type )( ::core::kinematics::AtomID const & ) const;

						AtomTree_exposer.def(
								"atom"
								, atom_function_type( &::core::kinematics::AtomTree::atom )
								, ( bp::arg("id") )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::kinematics::AtomTree::clear

						typedef void ( ::core::kinematics::AtomTree::*clear_function_type )(  ) ;

						AtomTree_exposer.def(
								"clear"
								, clear_function_type( &::core::kinematics::AtomTree::clear ) );

				}
				{ //::core::kinematics::AtomTree::copy_coords

						typedef void ( ::core::kinematics::AtomTree::*copy_coords_function_type )( ::core::kinematics::AtomTree const & ) ;

						AtomTree_exposer.def(
								"copy_coords"
								, copy_coords_function_type( &::core::kinematics::AtomTree::copy_coords )
								, ( bp::arg("src") ) );

				}
				{ //::core::kinematics::AtomTree::dof

						typedef ::core::Real ( ::core::kinematics::AtomTree::*dof_function_type )( ::core::kinematics::DOF_ID const & ) const;

						AtomTree_exposer.def(
								"dof"
								, dof_function_type( &::core::kinematics::AtomTree::dof )
								, ( bp::arg("id") ) );

				}
				{ //::core::kinematics::AtomTree::empty

						typedef bool ( ::core::kinematics::AtomTree::*empty_function_type )(  ) const;

						AtomTree_exposer.def(
								"empty"
								, empty_function_type( &::core::kinematics::AtomTree::empty ) );

				}
				{ //::core::kinematics::AtomTree::has

						typedef bool ( ::core::kinematics::AtomTree::*has_function_type )( ::core::kinematics::AtomID const & ) const;

						AtomTree_exposer.def(
								"has"
								, has_function_type( &::core::kinematics::AtomTree::has )
								, ( bp::arg("id") ) );

				}
				{ //::core::kinematics::AtomTree::insert_subtree

						typedef void ( ::core::kinematics::AtomTree::*insert_subtree_function_type )( ::core::kinematics::Atom * const,::core::kinematics::AtomID const &,bool const ) ;

						AtomTree_exposer.def(
								"insert_subtree"
								, insert_subtree_function_type( &::core::kinematics::AtomTree::insert_subtree )
								, ( bp::arg("subtree_root"), bp::arg("anchor_id"), bp::arg("insert_at_front") ) );

				}
				{ //::core::kinematics::AtomTree::jump

						typedef ::core::kinematics::Jump const & ( ::core::kinematics::AtomTree::*jump_function_type )( ::core::kinematics::AtomID const & ) const;

						AtomTree_exposer.def(
								"jump"
								, jump_function_type( &::core::kinematics::AtomTree::jump )
								, ( bp::arg("id") )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::kinematics::AtomTree::replace_subtree

						typedef void ( ::core::kinematics::AtomTree::*replace_subtree_function_type )( ::core::kinematics::Atom * const,::std::vector<core::kinematics::AtomID, std::allocator<core::kinematics::AtomID> > const &,::core::kinematics::AtomID_Map<core::kinematics::AtomID> const & ) ;

						AtomTree_exposer.def(
								"replace_subtree"
								, replace_subtree_function_type( &::core::kinematics::AtomTree::replace_subtree )
								, ( bp::arg("subtree_root"), bp::arg("old_atoms"), bp::arg("atom_map") ) );

				}
				{ //::core::kinematics::AtomTree::replace_tree

						typedef void ( ::core::kinematics::AtomTree::*replace_tree_function_type )( ::core::kinematics::Atom *,bool const ) ;

						AtomTree_exposer.def(
								"replace_tree"
								, replace_tree_function_type( &::core::kinematics::AtomTree::replace_tree )
								, ( bp::arg("new_root"), bp::arg("from_xyz")=(bool const)(true) ) );

				}
				{ //::core::kinematics::AtomTree::root

						typedef ::core::kinematics::Atom const * ( ::core::kinematics::AtomTree::*root_function_type )(  ) const;

						AtomTree_exposer.def(
								"root"
								, root_function_type( &::core::kinematics::AtomTree::root )
								, bp::return_value_policy< bp::return_by_value >() );

				}
				{ //::core::kinematics::AtomTree::set_dof

						typedef void ( ::core::kinematics::AtomTree::*set_dof_function_type )( ::core::kinematics::DOF_ID const &,::core::Real const ) ;

						AtomTree_exposer.def(
								"set_dof"
								, set_dof_function_type( &::core::kinematics::AtomTree::set_dof )
								, ( bp::arg("id"), bp::arg("setting") ) );

				}
				{ //::core::kinematics::AtomTree::set_jump

						typedef void ( ::core::kinematics::AtomTree::*set_jump_function_type )( ::core::kinematics::AtomID const &,::core::kinematics::Jump const & ) ;

						AtomTree_exposer.def(
								"set_jump"
								, set_jump_function_type( &::core::kinematics::AtomTree::set_jump )
								, ( bp::arg("id"), bp::arg("jump") ) );

				}
				{ //::core::kinematics::AtomTree::set_torsion_angle

						typedef ::core::kinematics::DOF_ID ( ::core::kinematics::AtomTree::*set_torsion_angle_function_type )( ::core::kinematics::AtomID const &,::core::kinematics::AtomID const &,::core::kinematics::AtomID const &,::core::kinematics::AtomID const &,::core::Real const ) ;

						AtomTree_exposer.def(
								"set_torsion_angle"
								, set_torsion_angle_function_type( &::core::kinematics::AtomTree::set_torsion_angle )
								, ( bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("atom4"), bp::arg("setting") ) );

				}
				{ //::core::kinematics::AtomTree::set_xyz

						typedef void ( ::core::kinematics::AtomTree::*set_xyz_function_type )( ::core::kinematics::AtomID const &,::core::PointPosition const & ) ;

						AtomTree_exposer.def(
								"set_xyz"
								, set_xyz_function_type( &::core::kinematics::AtomTree::set_xyz )
								, ( bp::arg("id"), bp::arg("xyz") ) );

				}
				{ //::core::kinematics::AtomTree::torsion_angle

						typedef ::core::Real ( ::core::kinematics::AtomTree::*torsion_angle_function_type )( ::core::kinematics::AtomID const &,::core::kinematics::AtomID const &,::core::kinematics::AtomID const &,::core::kinematics::AtomID const & ) const;

						AtomTree_exposer.def(
								"torsion_angle"
								, torsion_angle_function_type( &::core::kinematics::AtomTree::torsion_angle )
								, ( bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("atom4") ) );

				}
				{ //::core::kinematics::AtomTree::torsion_angle_dof_id

						typedef ::core::kinematics::DOF_ID ( ::core::kinematics::AtomTree::*torsion_angle_dof_id_function_type )( ::core::kinematics::AtomID const &,::core::kinematics::AtomID const &,::core::kinematics::AtomID const &,::core::kinematics::AtomID const & ) const;

						AtomTree_exposer.def(
								"torsion_angle_dof_id"
								, torsion_angle_dof_id_function_type( &::core::kinematics::AtomTree::torsion_angle_dof_id )
								, ( bp::arg("atom1"), bp::arg("atom2"), bp::arg("atom3"), bp::arg("atom4") ) );

				}
				{ //::core::kinematics::AtomTree::torsion_angle_dof_id

						typedef ::core::kinematics::DOF_ID ( ::core::kinematics::AtomTree::*torsion_angle_dof_id_function_type )( ::core::kinematics::AtomID const &,::core::kinematics::AtomID const &,::core::kinematics::AtomID const &,::core::kinematics::AtomID const &,::core::Real & ) const;

						AtomTree_exposer.def(
								"torsion_angle_dof_id"
								, torsion_angle_dof_id_function_type( &::core::kinematics::AtomTree::torsion_angle_dof_id )
								, ( bp::arg("atom1_in_id"), bp::arg("atom2_in_id"), bp::arg("atom3_in_id"), bp::arg("atom4_in_id"), bp::arg("offset") ) );

				}
				{ //::core::kinematics::AtomTree::update_domain_map

						typedef void ( ::core::kinematics::AtomTree::*update_domain_map_function_type )( ::core::kinematics::DomainMap &,::core::kinematics::AtomID_Mask const &,::core::kinematics::AtomID_Mask const & ) const;

						AtomTree_exposer.def(
								"update_domain_map"
								, update_domain_map_function_type( &::core::kinematics::AtomTree::update_domain_map )
								, ( bp::arg("domain_map"), bp::arg("dof_moved"), bp::arg("xyz_moved") ) );

				}
				{ //::core::kinematics::AtomTree::xyz

						typedef ::core::PointPosition const & ( ::core::kinematics::AtomTree::*xyz_function_type )( ::core::kinematics::AtomID const & ) const;

						AtomTree_exposer.def(
								"xyz"
								, xyz_function_type( &::core::kinematics::AtomTree::xyz )
								, ( bp::arg("id") )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
		}

		bp::class_< Atom__wrapper, bp::bases< core::kinematics::Atom >, utility::pointer::owning_ptr< ::core::kinematics::Atom_ >, boost::noncopyable >( "Atom_", bp::no_init )
				.def(
						"append_atom"
						, (void ( ::core::kinematics::Atom_::* )( ::core::kinematics::Atom * ) )(&::core::kinematics::Atom_::append_atom)
						, (void ( Atom__wrapper::* )( ::core::kinematics::Atom * ) )(&Atom__wrapper::default_append_atom)
						, ( bp::arg("arg0") ) )
				.def(
						"atom_id"
						, (::core::kinematics::AtomID const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::atom_id)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"atoms_begin"
						, (::__gnu_cxx::__normal_iterator<core::kinematics::Atom* const*, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::atoms_begin)
						, (::__gnu_cxx::__normal_iterator<core::kinematics::Atom* const*, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_atoms_begin) )
				.def(
						"atoms_begin"
						, (::__gnu_cxx::__normal_iterator<core::kinematics::Atom**, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > ( ::core::kinematics::Atom_::* )(  ) )(&::core::kinematics::Atom_::atoms_begin)
						, (::__gnu_cxx::__normal_iterator<core::kinematics::Atom**, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > ( Atom__wrapper::* )(  ) )(&Atom__wrapper::default_atoms_begin) )
				.def(
						"atoms_end"
						, (::__gnu_cxx::__normal_iterator<core::kinematics::Atom* const*, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::atoms_end)
						, (::__gnu_cxx::__normal_iterator<core::kinematics::Atom* const*, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_atoms_end) )
				.def(
						"atoms_end"
						, (::__gnu_cxx::__normal_iterator<core::kinematics::Atom**, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > ( ::core::kinematics::Atom_::* )(  ) )(&::core::kinematics::Atom_::atoms_end)
						, (::__gnu_cxx::__normal_iterator<core::kinematics::Atom**, std::vector<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > > ( Atom__wrapper::* )(  ) )(&Atom__wrapper::default_atoms_end) )
				.def(
						"child"
						, (::core::kinematics::Atom const * ( ::core::kinematics::Atom_::* )( int const ) const)(&::core::kinematics::Atom_::child)
						, (::core::kinematics::Atom const * ( Atom__wrapper::* )( int const ) const)(&Atom__wrapper::default_child)
						, ( bp::arg("k") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"child"
						, (::core::kinematics::Atom * ( ::core::kinematics::Atom_::* )( int const ) )(&::core::kinematics::Atom_::child)
						, (::core::kinematics::Atom * ( Atom__wrapper::* )( int const ) )(&Atom__wrapper::default_child)
						, ( bp::arg("k") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"delete_atom"
						, (void ( ::core::kinematics::Atom_::* )( ::core::kinematics::Atom * ) )(&::core::kinematics::Atom_::delete_atom)
						, (void ( Atom__wrapper::* )( ::core::kinematics::Atom * ) )(&Atom__wrapper::default_delete_atom)
						, ( bp::arg("arg0") ) )
				.def(
						"dihedral_between_bonded_children"
						, (::core::Real ( ::core::kinematics::Atom_::* )( ::core::kinematics::Atom const *,::core::kinematics::Atom const * ) const)(&::core::kinematics::Atom_::dihedral_between_bonded_children)
						, (::core::Real ( Atom__wrapper::* )( ::core::kinematics::Atom const *,::core::kinematics::Atom const * ) const)(&Atom__wrapper::default_dihedral_between_bonded_children)
						, ( bp::arg("child1"), bp::arg("child2") ) )
				.def(
						"distance"
						, (::core::Length ( ::core::kinematics::Atom_::* )( ::core::kinematics::Atom const & ) const)(&::core::kinematics::Atom_::distance)
						, (::core::Length ( Atom__wrapper::* )( ::core::kinematics::Atom const & ) const)(&Atom__wrapper::default_distance)
						, ( bp::arg("atom") ) )
				.def(
						"distance_squared"
						, (::core::Length ( ::core::kinematics::Atom_::* )( ::core::kinematics::Atom const & ) const)(&::core::kinematics::Atom_::distance_squared)
						, (::core::Length ( Atom__wrapper::* )( ::core::kinematics::Atom const & ) const)(&Atom__wrapper::default_distance_squared)
						, ( bp::arg("atom") ) )
				.def(
						"downstream"
						, (bool ( ::core::kinematics::Atom_::* )( ::core::kinematics::Atom const * ) const)(&::core::kinematics::Atom_::downstream)
						, (bool ( Atom__wrapper::* )( ::core::kinematics::Atom const * ) const)(&Atom__wrapper::default_downstream)
						, ( bp::arg("atom1") ) )
				.def(
						"erase"
						, (void ( ::core::kinematics::Atom_::* )(  ) )(&::core::kinematics::Atom_::erase)
						, (void ( Atom__wrapper::* )(  ) )(&Atom__wrapper::default_erase) )
				.def(
						"get_input_stub"
						, (::core::kinematics::Stub ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::get_input_stub)
						, (::core::kinematics::Stub ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_get_input_stub) )
				.def(
						"get_nonjump_atom"
						, (::core::kinematics::Atom const * ( ::core::kinematics::Atom_::* )( int const ) const)(&::core::kinematics::Atom_::get_nonjump_atom)
						, (::core::kinematics::Atom const * ( Atom__wrapper::* )( int const ) const)(&Atom__wrapper::default_get_nonjump_atom)
						, ( bp::arg("i") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"get_stub"
						, (::core::kinematics::Stub ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::get_stub)
						, (::core::kinematics::Stub ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_get_stub) )
				.def(
						"id"
						, (::core::kinematics::AtomID const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::id)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"id"
						, (void ( ::core::kinematics::Atom_::* )( ::core::kinematics::AtomID const & ) )(&::core::kinematics::Atom_::id)
						, (void ( Atom__wrapper::* )( ::core::kinematics::AtomID const & ) )(&Atom__wrapper::default_id)
						, ( bp::arg("id_in") ) )
				.def(
						"input_stub_atom0"
						, (::core::kinematics::Atom const * ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::input_stub_atom0)
						, (::core::kinematics::Atom const * ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_input_stub_atom0)
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"input_stub_atom0_id"
						, (::core::kinematics::AtomID const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::input_stub_atom0_id)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"input_stub_atom1"
						, (::core::kinematics::Atom const * ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::input_stub_atom1)
						, (::core::kinematics::Atom const * ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_input_stub_atom1)
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"input_stub_atom1_id"
						, (::core::kinematics::AtomID const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::input_stub_atom1_id)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"input_stub_atom2"
						, (::core::kinematics::Atom const * ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::input_stub_atom2)
						, (::core::kinematics::Atom const * ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_input_stub_atom2)
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"input_stub_atom2_id"
						, (::core::kinematics::AtomID const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::input_stub_atom2_id)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"input_stub_atom3"
						, (::core::kinematics::Atom const * ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::input_stub_atom3)
						, (::core::kinematics::Atom const * ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_input_stub_atom3)
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"input_stub_atom3_id"
						, (::core::kinematics::AtomID const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::input_stub_atom3_id)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"insert_atom"
						, (void ( ::core::kinematics::Atom_::* )( ::core::kinematics::Atom * ) )(&::core::kinematics::Atom_::insert_atom)
						, (void ( Atom__wrapper::* )( ::core::kinematics::Atom * ) )(&Atom__wrapper::default_insert_atom)
						, ( bp::arg("arg0") ) )
				.def(
						"insert_atom"
						, (void ( ::core::kinematics::Atom_::* )( ::core::kinematics::Atom *,int const ) )(&::core::kinematics::Atom_::insert_atom)
						, (void ( Atom__wrapper::* )( ::core::kinematics::Atom *,int const ) )(&Atom__wrapper::default_insert_atom)
						, ( bp::arg("arg0"), bp::arg("arg1") ) )
				.def(
						"keep_dof_fixed"
						, (bool ( ::core::kinematics::Atom_::* )( ::core::kinematics::DOF_Type const ) const)(&::core::kinematics::Atom_::keep_dof_fixed)
						, (bool ( Atom__wrapper::* )( ::core::kinematics::DOF_Type const ) const)(&Atom__wrapper::default_keep_dof_fixed)
						, ( bp::arg("arg0") ) )
				.def(
						"n_atom"
						, (::size_t ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::n_atom)
						, (::size_t ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_n_atom) )
				.def(
						"n_children"
						, (int ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::n_children)
						, (int ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_n_children) )
				.def(
						"next_child"
						, (::core::kinematics::Atom * ( ::core::kinematics::Atom_::* )( ::core::kinematics::Atom const * ) )(&::core::kinematics::Atom_::next_child)
						, (::core::kinematics::Atom * ( Atom__wrapper::* )( ::core::kinematics::Atom const * ) )(&Atom__wrapper::default_next_child)
						, ( bp::arg("child") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"parent"
						, (::core::kinematics::Atom const * ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::parent)
						, (::core::kinematics::Atom const * ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_parent)
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"parent"
						, (void ( ::core::kinematics::Atom_::* )( ::core::kinematics::Atom * ) )(&::core::kinematics::Atom_::parent)
						, (void ( Atom__wrapper::* )( ::core::kinematics::Atom * ) )(&Atom__wrapper::default_parent)
						, ( bp::arg("parent_in") ) )
				.def(
						"parent"
						, (::core::kinematics::Atom * ( ::core::kinematics::Atom_::* )(  ) )(&::core::kinematics::Atom_::parent)
						, (::core::kinematics::Atom * ( Atom__wrapper::* )(  ) )(&Atom__wrapper::default_parent)
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"position"
						, (::core::PointPosition const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::position)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"position"
						, (void ( ::core::kinematics::Atom_::* )( ::core::PointPosition const & ) )(&::core::kinematics::Atom_::position)
						, (void ( Atom__wrapper::* )( ::core::PointPosition const & ) )(&Atom__wrapper::default_position)
						, ( bp::arg("position_a") ) )
				.def(
						"previous_child"
						, (::core::kinematics::Atom const * ( ::core::kinematics::Atom_::* )( ::core::kinematics::Atom const * ) const)(&::core::kinematics::Atom_::previous_child)
						, (::core::kinematics::Atom const * ( Atom__wrapper::* )( ::core::kinematics::Atom const * ) const)(&Atom__wrapper::default_previous_child)
						, ( bp::arg("child") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"previous_sibling"
						, (::core::kinematics::Atom const * ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::previous_sibling)
						, (::core::kinematics::Atom const * ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_previous_sibling)
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"replace_atom"
						, (void ( ::core::kinematics::Atom_::* )( ::core::kinematics::Atom * const,::core::kinematics::Atom * const ) )(&::core::kinematics::Atom_::replace_atom)
						, (void ( Atom__wrapper::* )( ::core::kinematics::Atom * const,::core::kinematics::Atom * const ) )(&Atom__wrapper::default_replace_atom)
						, ( bp::arg("old_atom"), bp::arg("new_atom") ) )
				.def(
						"show"
						, (void ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::show)
						, (void ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_show) )
				.def(
						"stub_atom1_id"
						, (::core::kinematics::AtomID const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::stub_atom1_id)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"stub_atom2_id"
						, (::core::kinematics::AtomID const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::stub_atom2_id)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"stub_atom3_id"
						, (::core::kinematics::AtomID const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::stub_atom3_id)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"stub_defined"
						, (bool ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::stub_defined)
						, (bool ( Atom__wrapper::* )(  ) const)(&Atom__wrapper::default_stub_defined) )
				.def(
						"update_atom_pointer"
						, (void ( ::core::kinematics::Atom_::* )( ::core::kinematics::AtomPointers & ) )(&::core::kinematics::Atom_::update_atom_pointer)
						, (void ( Atom__wrapper::* )( ::core::kinematics::AtomPointers & ) )(&Atom__wrapper::default_update_atom_pointer)
						, ( bp::arg("atom_pointer") ) )
				.def(
						"update_domain_map"
						, (void ( ::core::kinematics::Atom_::* )( int &,int &,::core::kinematics::DomainMap &,::core::kinematics::AtomID_Mask const &,::core::kinematics::AtomID_Mask const & ) const)(&::core::kinematics::Atom_::update_domain_map)
						, (void ( Atom__wrapper::* )( int &,int &,::core::kinematics::DomainMap &,::core::kinematics::AtomID_Mask const &,::core::kinematics::AtomID_Mask const & ) const)(&Atom__wrapper::default_update_domain_map)
						, ( bp::arg("current_color"), bp::arg("biggest_color"), bp::arg("domain_map"), bp::arg("dof_moved"), bp::arg("atom_moved") ) )
				.def(
						"update_internal_coords"
						, (void ( ::core::kinematics::Atom_::* )( bool const ) )(&::core::kinematics::Atom_::update_internal_coords)
						, (void ( Atom__wrapper::* )( bool const ) )(&Atom__wrapper::default_update_internal_coords)
						, ( bp::arg("recursive") ) )
				.def(
						"update_xyz_coords"
						, (void ( ::core::kinematics::Atom_::* )(  ) )( &::core::kinematics::Atom_::update_xyz_coords ) )
				.def(
						"x"
						, (::core::Length const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::x)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"xyz"
						, (::core::PointPosition const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::xyz)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"xyz"
						, (void ( ::core::kinematics::Atom_::* )( ::core::PointPosition const & ) )(&::core::kinematics::Atom_::xyz)
						, (void ( Atom__wrapper::* )( ::core::PointPosition const & ) )(&Atom__wrapper::default_xyz)
						, ( bp::arg("position_a") ) )
				.def(
						"y"
						, (::core::Length const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::y)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"z"
						, (::core::Length const & ( ::core::kinematics::Atom_::* )(  ) const)(&::core::kinematics::Atom_::z)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"clone"
						, bp::pure_virtual( (::core::kinematics::Atom * ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom * ) const)(&::core::kinematics::Atom::clone) )
						, ( bp::arg("parent_in") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"copy_coords"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Atom const & ) )(&::core::kinematics::Atom::copy_coords) )
						, ( bp::arg("src") ) )
				.def(
						"dof"
						, bp::pure_virtual( (::core::Real ( ::core::kinematics::Atom::* )( ::core::kinematics::DOF_Type const ) const)(&::core::kinematics::Atom::dof) )
						, ( bp::arg("type") ) )
				.def(
						"get_dof_axis_and_end_pos"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::Vector &,::core::PointPosition &,::core::kinematics::DOF_Type const ) const)(&::core::kinematics::Atom::get_dof_axis_and_end_pos) )
						, ( bp::arg("axis"), bp::arg("end_pos"), bp::arg("type") ) )
				.def(
						"is_jump"
						, bp::pure_virtual( (bool ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::is_jump) ) )
				.def(
						"jump"
						, bp::pure_virtual( (::core::kinematics::Jump const & ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::jump) )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"jump"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Jump const & ) )(&::core::kinematics::Atom::jump) )
						, ( bp::arg("jump_in") ) )
				.def(
						"set_dof"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::DOF_Type const,::core::Real const ) )(&::core::kinematics::Atom::set_dof) )
						, ( bp::arg("type"), bp::arg("value") ) )
				.def(
						"setup_min_map"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::DOF_ID &,::core::kinematics::DOF_ID_Mask const &,::core::optimization::MinimizerMap & ) const)(&::core::kinematics::Atom::setup_min_map) )
						, ( bp::arg("last_torsion"), bp::arg("move_map"), bp::arg("min_map") ) )
				.def(
						"stub_atom1"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::stub_atom1) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"stub_atom2"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::stub_atom2) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"stub_atom3"
						, bp::pure_virtual( (::core::kinematics::Atom const * ( ::core::kinematics::Atom::* )(  ) const)(&::core::kinematics::Atom::stub_atom3) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"update_internal_coords"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Stub &,bool const ) )(&::core::kinematics::Atom::update_internal_coords) )
						, ( bp::arg("stub"), bp::arg("recursive")=(bool const)(true) ) )
				.def(
						"update_stub"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Stub & ) const)(&::core::kinematics::Atom::update_stub) )
						, ( bp::arg("stub") ) )
				.def(
						"update_xyz_coords"
						, bp::pure_virtual( (void ( ::core::kinematics::Atom::* )( ::core::kinematics::Stub & ) )(&::core::kinematics::Atom::update_xyz_coords) )
						, ( bp::arg("stub") ) );

		bp::class_< BondedAtom_wrapper, bp::bases< core::kinematics::Atom_ >, utility::pointer::owning_ptr< ::core::kinematics::BondedAtom > >( "BondedAtom" )
				.def(
						"clone"
						, (::core::kinematics::Atom * ( ::core::kinematics::BondedAtom::* )( ::core::kinematics::Atom * ) const)(&::core::kinematics::BondedAtom::clone)
						, (::core::kinematics::Atom * ( BondedAtom_wrapper::* )( ::core::kinematics::Atom * ) const)(&BondedAtom_wrapper::default_clone)
						, ( bp::arg("parent_in") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"copy_coords"
						, (void ( ::core::kinematics::BondedAtom::* )( ::core::kinematics::Atom const & ) )(&::core::kinematics::BondedAtom::copy_coords)
						, (void ( BondedAtom_wrapper::* )( ::core::kinematics::Atom const & ) )(&BondedAtom_wrapper::default_copy_coords)
						, ( bp::arg("src") ) )
				.def(
						"dof"
						, (double ( ::core::kinematics::BondedAtom::* )( ::core::kinematics::DOF_Type const ) const)(&::core::kinematics::BondedAtom::dof)
						, (double ( BondedAtom_wrapper::* )( ::core::kinematics::DOF_Type const ) const)(&BondedAtom_wrapper::default_dof)
						, ( bp::arg("type") ) )
				.def(
						"get_dof_axis_and_end_pos"
						, (void ( ::core::kinematics::BondedAtom::* )( ::core::Vector &,::core::PointPosition &,::core::kinematics::DOF_Type const ) const)(&::core::kinematics::BondedAtom::get_dof_axis_and_end_pos)
						, (void ( BondedAtom_wrapper::* )( ::core::Vector &,::core::PointPosition &,::core::kinematics::DOF_Type const ) const)(&BondedAtom_wrapper::default_get_dof_axis_and_end_pos)
						, ( bp::arg("axis"), bp::arg("end_pos"), bp::arg("type") ) )
				.def(
						"is_jump"
						, (bool ( ::core::kinematics::BondedAtom::* )(  ) const)(&::core::kinematics::BondedAtom::is_jump)
						, (bool ( BondedAtom_wrapper::* )(  ) const)(&BondedAtom_wrapper::default_is_jump) )
				.def(
						"jump"
						, (::core::kinematics::Jump const & ( ::core::kinematics::BondedAtom::* )(  ) const)(&::core::kinematics::BondedAtom::jump)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"jump"
						, (void ( ::core::kinematics::BondedAtom::* )( ::core::kinematics::Jump const & ) )(&::core::kinematics::BondedAtom::jump)
						, (void ( BondedAtom_wrapper::* )( ::core::kinematics::Jump const & ) )(&BondedAtom_wrapper::default_jump)
						, ( bp::arg("arg0") ) )
				.def(
						"keep_dof_fixed"
						, (bool ( ::core::kinematics::BondedAtom::* )( ::core::kinematics::DOF_Type const ) const)(&::core::kinematics::BondedAtom::keep_dof_fixed)
						, (bool ( BondedAtom_wrapper::* )( ::core::kinematics::DOF_Type const ) const)(&BondedAtom_wrapper::default_keep_dof_fixed)
						, ( bp::arg("type") ) )
				.def(
						"set_dof"
						, (void ( ::core::kinematics::BondedAtom::* )( ::core::kinematics::DOF_Type const,double const ) )(&::core::kinematics::BondedAtom::set_dof)
						, (void ( BondedAtom_wrapper::* )( ::core::kinematics::DOF_Type const,double const ) )(&BondedAtom_wrapper::default_set_dof)
						, ( bp::arg("type"), bp::arg("value") ) )
				.def(
						"setup_min_map"
						, (void ( ::core::kinematics::BondedAtom::* )( ::core::kinematics::DOF_ID &,::core::kinematics::DOF_ID_Mask const &,::core::optimization::MinimizerMap & ) const)(&::core::kinematics::BondedAtom::setup_min_map)
						, (void ( BondedAtom_wrapper::* )( ::core::kinematics::DOF_ID &,::core::kinematics::DOF_ID_Mask const &,::core::optimization::MinimizerMap & ) const)(&BondedAtom_wrapper::default_setup_min_map)
						, ( bp::arg("last_torsion"), bp::arg("allow_move"), bp::arg("min_map") ) )
				.def(
						"stub_atom1"
						, (::core::kinematics::Atom const * ( ::core::kinematics::BondedAtom::* )(  ) const)(&::core::kinematics::BondedAtom::stub_atom1)
						, (::core::kinematics::Atom const * ( BondedAtom_wrapper::* )(  ) const)(&BondedAtom_wrapper::default_stub_atom1)
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"stub_atom2"
						, (::core::kinematics::Atom const * ( ::core::kinematics::BondedAtom::* )(  ) const)(&::core::kinematics::BondedAtom::stub_atom2)
						, (::core::kinematics::Atom const * ( BondedAtom_wrapper::* )(  ) const)(&BondedAtom_wrapper::default_stub_atom2)
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"stub_atom3"
						, (::core::kinematics::Atom const * ( ::core::kinematics::BondedAtom::* )(  ) const)(&::core::kinematics::BondedAtom::stub_atom3)
						, (::core::kinematics::Atom const * ( BondedAtom_wrapper::* )(  ) const)(&BondedAtom_wrapper::default_stub_atom3)
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"update_internal_coords"
						, (void ( ::core::kinematics::BondedAtom::* )( ::core::kinematics::Stub &,bool const ) )(&::core::kinematics::BondedAtom::update_internal_coords)
						, (void ( BondedAtom_wrapper::* )( ::core::kinematics::Stub &,bool const ) )(&BondedAtom_wrapper::default_update_internal_coords)
						, ( bp::arg("stub"), bp::arg("recursive")=(bool const)(true) ) )
				.def(
						"update_stub"
						, (void ( ::core::kinematics::BondedAtom::* )( ::core::kinematics::Stub & ) const)(&::core::kinematics::BondedAtom::update_stub)
						, (void ( BondedAtom_wrapper::* )( ::core::kinematics::Stub & ) const)(&BondedAtom_wrapper::default_update_stub)
						, ( bp::arg("stub") ) )
				.def(
						"update_xyz_coords"
						, (void ( ::core::kinematics::BondedAtom::* )( ::core::kinematics::Stub & ) )(&::core::kinematics::BondedAtom::update_xyz_coords)
						, (void ( BondedAtom_wrapper::* )( ::core::kinematics::Stub & ) )(&BondedAtom_wrapper::default_update_xyz_coords)
						, ( bp::arg("stub") ) );

		bp::class_< core::kinematics::CAlpha >( "CAlpha" )
				.def(
						"get_distance"
						, (::core::Real ( ::core::kinematics::CAlpha::* )( int const,int const ) )( &::core::kinematics::CAlpha::get_distance )
						, ( bp::arg("i"), bp::arg("j") ) )
				.def(
						"update_distances_from_pose"
						, (void ( ::core::kinematics::CAlpha::* )( ::core::pose::Pose const & ) )( &::core::kinematics::CAlpha::update_distances_from_pose )
						, ( bp::arg("pose") ) )
				.def_readwrite( "M", &core::kinematics::CAlpha::M );

		bp::class_< core::kinematics::DOF_ID >( "DOF_ID" )
				.def( bp::init< >() )
				.def( bp::init< core::kinematics::AtomID const &, core::kinematics::DOF_Type const & >(( bp::arg("atom_id_in"), bp::arg("type_in") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"atom_id"
						, (::core::kinematics::AtomID const & ( ::core::kinematics::DOF_ID::* )(  ) const)( &::core::kinematics::DOF_ID::atom_id )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"atomno"
						, (int ( ::core::kinematics::DOF_ID::* )(  ) const)( &::core::kinematics::DOF_ID::atomno ) )
				.def(
						"rsd"
						, (int ( ::core::kinematics::DOF_ID::* )(  ) const)( &::core::kinematics::DOF_ID::rsd ) )
				.def(
						"type"
						, (::core::kinematics::DOF_Type ( ::core::kinematics::DOF_ID::* )(  ) const)( &::core::kinematics::DOF_ID::type ) )
				.def(
						"valid"
						, (bool ( ::core::kinematics::DOF_ID::* )(  ) const)( &::core::kinematics::DOF_ID::valid ) )
				.def( bp::self != bp::self )
				.def( bp::self < bp::self )
				.def( bp::self_ns::str( bp::self ) )
				.def( bp::self == bp::self );

		bp::class_< core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*> >( "DOF_ID_Map_less_core_scope_optimization_scope_DOF_Node_ptr__grate_", bp::init< core::optimization::DOF_Node * const & >(( bp::arg("default_value_a") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def( bp::init< unsigned int, core::optimization::DOF_Node * const & >(( bp::arg("n_res"), bp::arg("default_value_a") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"clear"
						, (void ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )(  ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::clear ) )
				.def(
						"default_value"
						, (::core::optimization::DOF_Node * const & ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::DOF_Type const ) const)( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::default_value )
						, ( bp::arg("dof") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"default_value"
						, (void ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::DOF_Type const,::core::optimization::DOF_Node * const & ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::default_value )
						, ( bp::arg("dof"), bp::arg("default_value_a") ) )
				.def(
						"default_value"
						, (void ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::optimization::DOF_Node * const & ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::default_value )
						, ( bp::arg("default_value_a") ) )
				.def(
						"empty"
						, (bool ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )(  ) const)( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::empty ) )
				.def(
						"finalize"
						, (void ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )(  ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::finalize ) )
				.def(
						"n_atom"
						, (::size_t ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::size_t const ) const)( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::n_atom )
						, ( bp::arg("i_res") ) )
				.def(
						"n_residue"
						, (::size_t ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )(  ) const)( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::n_residue ) )
				.def(
						"__call__"
						, (::core::optimization::DOF_Node * const & ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::DOF_ID const & ) const)( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::operator() )
						, ( bp::arg("id") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__call__"
						, (::core::optimization::DOF_Node * & ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::DOF_ID const & ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::operator() )
						, ( bp::arg("id") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"__call__"
						, (::core::optimization::DOF_Node * const & ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::size_t const,::size_t const,::core::kinematics::DOF_Type const ) const)( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::operator() )
						, ( bp::arg("i_res"), bp::arg("i_atom"), bp::arg("dof") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__call__"
						, (::core::optimization::DOF_Node * & ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::size_t const,::size_t const,::core::kinematics::DOF_Type const ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::operator() )
						, ( bp::arg("i_res"), bp::arg("i_atom"), bp::arg("dof") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"__call__"
						, (::core::kinematics::AtomID_Map<core::optimization::DOF_Node*> const & ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::DOF_Type const ) const)( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::operator() )
						, ( bp::arg("dof") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__call__"
						, (::core::kinematics::AtomID_Map<core::optimization::DOF_Node*> & ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::DOF_Type const ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::operator() )
						, ( bp::arg("dof") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"__getitem__"
						, (::core::optimization::DOF_Node * const & ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::DOF_ID const & ) const)( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::operator[] )
						, ( bp::arg("id") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__getitem__"
						, (::core::optimization::DOF_Node * & ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::DOF_ID const & ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::operator[] )
						, ( bp::arg("id") )
						, bp::return_internal_reference< 1 >() )
				.def(
						"__getitem__"
						, (::core::kinematics::AtomID_Map<core::optimization::DOF_Node*> const & ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::DOF_Type const ) const)( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::operator[] )
						, ( bp::arg("dof") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"__getitem__"
						, (::core::kinematics::AtomID_Map<core::optimization::DOF_Node*> & ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::DOF_Type const ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::operator[] )
						, ( bp::arg("dof") )
						, bp::return_internal_reference< 1 >() )
				.def(
						"resize"
						, (void ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::size_t const ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::resize )
						, ( bp::arg("n_res") ) )
				.def(
						"resize"
						, (void ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::size_t const,::size_t const ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::resize )
						, ( bp::arg("i_res"), bp::arg("n_atom") ) )
				.def(
						"resize"
						, (void ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::size_t const,::size_t const,::core::optimization::DOF_Node * const & ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::resize )
						, ( bp::arg("i_res"), bp::arg("n_atom"), bp::arg("value") ) )
				.def(
						"set"
						, (void ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::DOF_Type const ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::set )
						, ( bp::arg("dof") ) )
				.def(
						"set"
						, (void ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::DOF_Type const,::core::optimization::DOF_Node * const & ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::set )
						, ( bp::arg("dof"), bp::arg("value") ) )
				.def(
						"shrink"
						, (void ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )(  ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::shrink ) )
				.def(
						"size"
						, (::size_t ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )(  ) const)( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::size ) )
				.def(
						"swap"
						, (void ( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::* )( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*> & ) )( &::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*>::swap )
						, ( bp::arg("s") ) )
				.def( bp::self != bp::self )
				.def( bp::self == bp::self );

		bp::implicitly_convertible< core::optimization::DOF_Node * const &, core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*> >();

		bp::class_< core::kinematics::Edge >( "Edge" )
				.def( bp::init< >() )
				.def( bp::init< int, int, int >(( bp::arg("start_in"), bp::arg("stop_in"), bp::arg("label_in") )) )
				.def(
						"downstream_atomno"
						, (int ( ::core::kinematics::Edge::* )(  ) const)( &::core::kinematics::Edge::downstream_atomno ) )
				.def(
						"downstream_atomno"
						, (int & ( ::core::kinematics::Edge::* )(  ) )( &::core::kinematics::Edge::downstream_atomno )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"has_atom_info"
						, (bool ( ::core::kinematics::Edge::* )(  ) const)( &::core::kinematics::Edge::has_atom_info ) )
				.def(
						"is_jump"
						, (bool ( ::core::kinematics::Edge::* )(  ) const)( &::core::kinematics::Edge::is_jump ) )
				.def(
						"label"
						, (int ( ::core::kinematics::Edge::* )(  ) const)( &::core::kinematics::Edge::label ) )
				.def(
						"label"
						, (int & ( ::core::kinematics::Edge::* )(  ) )( &::core::kinematics::Edge::label )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"polymer_direction"
						, (int ( ::core::kinematics::Edge::* )(  ) const)( &::core::kinematics::Edge::polymer_direction ) )
				.def(
						"start"
						, (int ( ::core::kinematics::Edge::* )(  ) const)( &::core::kinematics::Edge::start ) )
				.def(
						"start"
						, (int & ( ::core::kinematics::Edge::* )(  ) )( &::core::kinematics::Edge::start )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"start_atom"
						, (int ( ::core::kinematics::Edge::* )(  ) const)( &::core::kinematics::Edge::start_atom ) )
				.def(
						"start_atom"
						, (int & ( ::core::kinematics::Edge::* )(  ) )( &::core::kinematics::Edge::start_atom )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"stop"
						, (int ( ::core::kinematics::Edge::* )(  ) const)( &::core::kinematics::Edge::stop ) )
				.def(
						"stop"
						, (int & ( ::core::kinematics::Edge::* )(  ) )( &::core::kinematics::Edge::stop )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"stop_atom"
						, (int ( ::core::kinematics::Edge::* )(  ) const)( &::core::kinematics::Edge::stop_atom ) )
				.def(
						"stop_atom"
						, (int & ( ::core::kinematics::Edge::* )(  ) )( &::core::kinematics::Edge::stop_atom )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"upstream_atomno"
						, (int ( ::core::kinematics::Edge::* )(  ) const)( &::core::kinematics::Edge::upstream_atomno ) )
				.def(
						"upstream_atomno"
						, (int & ( ::core::kinematics::Edge::* )(  ) )( &::core::kinematics::Edge::upstream_atomno )
						, bp::return_value_policy< bp::return_by_value >() )
				.def( bp::self != bp::self )
				.def( bp::self < bp::self )
				.def( bp::self_ns::str( bp::self ) )
				.def( bp::self == bp::self );

		{ //::core::kinematics::FoldTree
				typedef bp::class_< core::kinematics::FoldTree > FoldTree_exposer_t;
				FoldTree_exposer_t FoldTree_exposer = FoldTree_exposer_t( "FoldTree" );
				bp::scope FoldTree_scope( FoldTree_exposer );
				FoldTree_exposer.def( bp::init< >() );
				FoldTree_exposer.def( bp::init< int >(( bp::arg("nres_in") )) );
				{ //::core::kinematics::FoldTree::add_edge

						typedef void ( ::core::kinematics::FoldTree::*add_edge_function_type )( int const,int const,int const ) ;

						FoldTree_exposer.def(
								"add_edge"
								, add_edge_function_type( &::core::kinematics::FoldTree::add_edge )
								, ( bp::arg("start"), bp::arg("stop"), bp::arg("label") ) );

				}
				{ //::core::kinematics::FoldTree::append_residue

						typedef void ( ::core::kinematics::FoldTree::*append_residue_function_type )( bool const,int const,int const,int const ) ;

						FoldTree_exposer.def(
								"append_residue"
								, append_residue_function_type( &::core::kinematics::FoldTree::append_residue )
								, ( bp::arg("attach_by_jump")=(bool const)(false), bp::arg("jump_anchor_residue")=(int const)(0), bp::arg("jump_upstream_atomno")=(int const)(0), bp::arg("jump_downstream_atomno")=(int const)(0) ) );

				}
				{ //::core::kinematics::FoldTree::begin

						typedef ::__gnu_cxx::__normal_iterator<core::kinematics::Edge const*, std::vector<core::kinematics::Edge, std::allocator<core::kinematics::Edge> > > ( ::core::kinematics::FoldTree::*begin_function_type )(  ) const;

						FoldTree_exposer.def(
								"begin"
								, begin_function_type( &::core::kinematics::FoldTree::begin ) );

				}
				{ //::core::kinematics::FoldTree::check_fold_tree

						typedef bool ( ::core::kinematics::FoldTree::*check_fold_tree_function_type )(  ) const;

						FoldTree_exposer.def(
								"check_fold_tree"
								, check_fold_tree_function_type( &::core::kinematics::FoldTree::check_fold_tree ) );

				}
				{ //::core::kinematics::FoldTree::clear

						typedef void ( ::core::kinematics::FoldTree::*clear_function_type )(  ) ;

						FoldTree_exposer.def(
								"clear"
								, clear_function_type( &::core::kinematics::FoldTree::clear ) );

				}
				{ //::core::kinematics::FoldTree::connected

						typedef bool ( ::core::kinematics::FoldTree::*connected_function_type )(  ) const;

						FoldTree_exposer.def(
								"connected"
								, connected_function_type( &::core::kinematics::FoldTree::connected ) );

				}
				{ //::core::kinematics::FoldTree::count_fixed_residues

						typedef int ( ::core::kinematics::FoldTree::*count_fixed_residues_function_type )( int const,int const,int & ) const;

						FoldTree_exposer.def(
								"count_fixed_residues"
								, count_fixed_residues_function_type( &::core::kinematics::FoldTree::count_fixed_residues )
								, ( bp::arg("begin_res"), bp::arg("size"), bp::arg("min_edge_count_out") ) );

				}
				{ //::core::kinematics::FoldTree::cutpoint

						typedef int ( ::core::kinematics::FoldTree::*cutpoint_function_type )( int const ) const;

						FoldTree_exposer.def(
								"cutpoint"
								, cutpoint_function_type( &::core::kinematics::FoldTree::cutpoint )
								, ( bp::arg("cut") ) );

				}
				{ //::core::kinematics::FoldTree::cutpoint_by_jump

						typedef int ( ::core::kinematics::FoldTree::*cutpoint_by_jump_function_type )( int const ) const;

						FoldTree_exposer.def(
								"cutpoint_by_jump"
								, cutpoint_by_jump_function_type( &::core::kinematics::FoldTree::cutpoint_by_jump )
								, ( bp::arg("jump_number") ) );

				}
				{ //::core::kinematics::FoldTree::cutpoint_map

						typedef int ( ::core::kinematics::FoldTree::*cutpoint_map_function_type )( int const ) const;

						FoldTree_exposer.def(
								"cutpoint_map"
								, cutpoint_map_function_type( &::core::kinematics::FoldTree::cutpoint_map )
								, ( bp::arg("seqpos") ) );

				}
				{ //::core::kinematics::FoldTree::cutpoints

						typedef ::std::vector<int, std::allocator<int> > ( ::core::kinematics::FoldTree::*cutpoints_function_type )(  ) const;

						FoldTree_exposer.def(
								"cutpoints"
								, cutpoints_function_type( &::core::kinematics::FoldTree::cutpoints ) );

				}
				{ //::core::kinematics::FoldTree::delete_edge

						typedef void ( ::core::kinematics::FoldTree::*delete_edge_function_type )( ::__gnu_cxx::__normal_iterator<core::kinematics::Edge*, std::vector<core::kinematics::Edge, std::allocator<core::kinematics::Edge> > > ) ;

						FoldTree_exposer.def(
								"delete_edge"
								, delete_edge_function_type( &::core::kinematics::FoldTree::delete_edge )
								, ( bp::arg("edge") ) );

				}
				{ //::core::kinematics::FoldTree::delete_edge

						typedef void ( ::core::kinematics::FoldTree::*delete_edge_function_type )( ::core::kinematics::Edge const & ) ;

						FoldTree_exposer.def(
								"delete_edge"
								, delete_edge_function_type( &::core::kinematics::FoldTree::delete_edge )
								, ( bp::arg("edge") ) );

				}
				{ //::core::kinematics::FoldTree::delete_extra_vertices

						typedef void ( ::core::kinematics::FoldTree::*delete_extra_vertices_function_type )(  ) ;

						FoldTree_exposer.def(
								"delete_extra_vertices"
								, delete_extra_vertices_function_type( &::core::kinematics::FoldTree::delete_extra_vertices ) );

				}
				{ //::core::kinematics::FoldTree::delete_segment

						typedef void ( ::core::kinematics::FoldTree::*delete_segment_function_type )( int const,int const ) ;

						FoldTree_exposer.def(
								"delete_segment"
								, delete_segment_function_type( &::core::kinematics::FoldTree::delete_segment )
								, ( bp::arg("seg_begin"), bp::arg("seg_end") ) );

				}
				{ //::core::kinematics::FoldTree::delete_unordered_edge

						typedef void ( ::core::kinematics::FoldTree::*delete_unordered_edge_function_type )( int const,int const,int const ) ;

						FoldTree_exposer.def(
								"delete_unordered_edge"
								, delete_unordered_edge_function_type( &::core::kinematics::FoldTree::delete_unordered_edge )
								, ( bp::arg("start"), bp::arg("stop"), bp::arg("label") ) );

				}
				{ //::core::kinematics::FoldTree::downstream_atomno

						typedef int ( ::core::kinematics::FoldTree::*downstream_atomno_function_type )( int const ) const;

						FoldTree_exposer.def(
								"downstream_atomno"
								, downstream_atomno_function_type( &::core::kinematics::FoldTree::downstream_atomno )
								, ( bp::arg("jump_number") ) );

				}
				{ //::core::kinematics::FoldTree::downstream_jump_residue

						typedef int ( ::core::kinematics::FoldTree::*downstream_jump_residue_function_type )( int const ) const;

						FoldTree_exposer.def(
								"downstream_jump_residue"
								, downstream_jump_residue_function_type( &::core::kinematics::FoldTree::downstream_jump_residue )
								, ( bp::arg("jump_number") ) );

				}
				{ //::core::kinematics::FoldTree::end

						typedef ::__gnu_cxx::__normal_iterator<core::kinematics::Edge const*, std::vector<core::kinematics::Edge, std::allocator<core::kinematics::Edge> > > ( ::core::kinematics::FoldTree::*end_function_type )(  ) const;

						FoldTree_exposer.def(
								"end"
								, end_function_type( &::core::kinematics::FoldTree::end ) );

				}
				{ //::core::kinematics::FoldTree::get_jump_edge_count

						typedef ::ObjexxFCL::FArray1D_int const & ( ::core::kinematics::FoldTree::*get_jump_edge_count_function_type )(  ) const;

						FoldTree_exposer.def(
								"get_jump_edge_count"
								, get_jump_edge_count_function_type( &::core::kinematics::FoldTree::get_jump_edge_count )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::kinematics::FoldTree::get_residue_direction

						typedef int ( ::core::kinematics::FoldTree::*get_residue_direction_function_type )( int const ) const;

						FoldTree_exposer.def(
								"get_residue_direction"
								, get_residue_direction_function_type( &::core::kinematics::FoldTree::get_residue_direction )
								, ( bp::arg("seqpos") ) );

				}
				{ //::core::kinematics::FoldTree::is_cutpoint

						typedef bool ( ::core::kinematics::FoldTree::*is_cutpoint_function_type )( int const ) const;

						FoldTree_exposer.def(
								"is_cutpoint"
								, is_cutpoint_function_type( &::core::kinematics::FoldTree::is_cutpoint )
								, ( bp::arg("seqpos") ) );

				}
				{ //::core::kinematics::FoldTree::is_jump_point

						typedef bool ( ::core::kinematics::FoldTree::*is_jump_point_function_type )( int const ) const;

						FoldTree_exposer.def(
								"is_jump_point"
								, is_jump_point_function_type( &::core::kinematics::FoldTree::is_jump_point )
								, ( bp::arg("seqpos") ) );

				}
				{ //::core::kinematics::FoldTree::jump_edge

						typedef ::core::kinematics::Edge const & ( ::core::kinematics::FoldTree::*jump_edge_function_type )( int const ) const;

						FoldTree_exposer.def(
								"jump_edge"
								, jump_edge_function_type( &::core::kinematics::FoldTree::jump_edge )
								, ( bp::arg("jump_number") )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::kinematics::FoldTree::jump_point

						typedef int ( ::core::kinematics::FoldTree::*jump_point_function_type )( int const,int const ) const;

						FoldTree_exposer.def(
								"jump_point"
								, jump_point_function_type( &::core::kinematics::FoldTree::jump_point )
								, ( bp::arg("lower_higher"), bp::arg("jump_number") ) );

				}
				{ //::core::kinematics::FoldTree::new_jump

						typedef int ( ::core::kinematics::FoldTree::*new_jump_function_type )( int const,int const,int const ) ;

						FoldTree_exposer.def(
								"new_jump"
								, new_jump_function_type( &::core::kinematics::FoldTree::new_jump )
								, ( bp::arg("jump_pos1"), bp::arg("jump_pos2"), bp::arg("cutpoint") ) );

				}
				{ //::core::kinematics::FoldTree::nres

						typedef int ( ::core::kinematics::FoldTree::*nres_function_type )(  ) const;

						FoldTree_exposer.def(
								"nres"
								, nres_function_type( &::core::kinematics::FoldTree::nres ) );

				}
				{ //::core::kinematics::FoldTree::num_cutpoint

						typedef int ( ::core::kinematics::FoldTree::*num_cutpoint_function_type )(  ) const;

						FoldTree_exposer.def(
								"num_cutpoint"
								, num_cutpoint_function_type( &::core::kinematics::FoldTree::num_cutpoint ) );

				}
				{ //::core::kinematics::FoldTree::num_jump

						typedef int ( ::core::kinematics::FoldTree::*num_jump_function_type )(  ) const;

						FoldTree_exposer.def(
								"num_jump"
								, num_jump_function_type( &::core::kinematics::FoldTree::num_jump ) );

				}
				{ //::core::kinematics::FoldTree::partition_by_jump

						typedef void ( ::core::kinematics::FoldTree::*partition_by_jump_function_type )( int const,::ObjexxFCL::FArray1D_bool & ) const;

						FoldTree_exposer.def(
								"partition_by_jump"
								, partition_by_jump_function_type( &::core::kinematics::FoldTree::partition_by_jump )
								, ( bp::arg("jump_number"), bp::arg("partner1") ) );

				}
				{ //::core::kinematics::FoldTree::random_tree_from_jump_points

						typedef bool ( ::core::kinematics::FoldTree::*random_tree_from_jump_points_function_type )( int const,int const,::ObjexxFCL::FArray2D_int const &,::ObjexxFCL::FArray1D_float const & ) ;

						FoldTree_exposer.def(
								"random_tree_from_jump_points"
								, random_tree_from_jump_points_function_type( &::core::kinematics::FoldTree::random_tree_from_jump_points )
								, ( bp::arg("nres_in"), bp::arg("num_jump_in"), bp::arg("jump_point"), bp::arg("cut_bias") ) );

				}
				{ //::core::kinematics::FoldTree::renumber_jumps

						typedef void ( ::core::kinematics::FoldTree::*renumber_jumps_function_type )(  ) ;

						FoldTree_exposer.def(
								"renumber_jumps"
								, renumber_jumps_function_type( &::core::kinematics::FoldTree::renumber_jumps ) );

				}
				{ //::core::kinematics::FoldTree::reorder

						typedef bool ( ::core::kinematics::FoldTree::*reorder_function_type )( int const ) ;

						FoldTree_exposer.def(
								"reorder"
								, reorder_function_type( &::core::kinematics::FoldTree::reorder )
								, ( bp::arg("start_residue") ) );

				}
				{ //::core::kinematics::FoldTree::set_jump_atoms

						typedef void ( ::core::kinematics::FoldTree::*set_jump_atoms_function_type )( int const,int const,int const ) ;

						FoldTree_exposer.def(
								"set_jump_atoms"
								, set_jump_atoms_function_type( &::core::kinematics::FoldTree::set_jump_atoms )
								, ( bp::arg("jump_number"), bp::arg("upstream_atomno"), bp::arg("downstream_atomno") ) );

				}
				{ //::core::kinematics::FoldTree::simple_tree

						typedef void ( ::core::kinematics::FoldTree::*simple_tree_function_type )( int const ) ;

						FoldTree_exposer.def(
								"simple_tree"
								, simple_tree_function_type( &::core::kinematics::FoldTree::simple_tree )
								, ( bp::arg("nres_in") ) );

				}
				{ //::core::kinematics::FoldTree::size

						typedef int ( ::core::kinematics::FoldTree::*size_function_type )(  ) const;

						FoldTree_exposer.def(
								"size"
								, size_function_type( &::core::kinematics::FoldTree::size ) );

				}
				{ //::core::kinematics::FoldTree::tree_from_jumps_and_cuts

						typedef bool ( ::core::kinematics::FoldTree::*tree_from_jumps_and_cuts_function_type )( int const,int const,::ObjexxFCL::FArray2D_int const &,::ObjexxFCL::FArray1D_int const &,bool const ) ;

						FoldTree_exposer.def(
								"tree_from_jumps_and_cuts"
								, tree_from_jumps_and_cuts_function_type( &::core::kinematics::FoldTree::tree_from_jumps_and_cuts )
								, ( bp::arg("nres_in"), bp::arg("num_jump_in"), bp::arg("jump_point"), bp::arg("cuts"), bp::arg("verbose")=(bool const)(true) ) );

				}
				{ //::core::kinematics::FoldTree::update_edge_label

						typedef void ( ::core::kinematics::FoldTree::*update_edge_label_function_type )( int const,int const,int const,int const ) ;

						FoldTree_exposer.def(
								"update_edge_label"
								, update_edge_label_function_type( &::core::kinematics::FoldTree::update_edge_label )
								, ( bp::arg("start"), bp::arg("stop"), bp::arg("old_label"), bp::arg("new_label") ) );

				}
				{ //::core::kinematics::FoldTree::upstream_atomno

						typedef int ( ::core::kinematics::FoldTree::*upstream_atomno_function_type )( int const ) const;

						FoldTree_exposer.def(
								"upstream_atomno"
								, upstream_atomno_function_type( &::core::kinematics::FoldTree::upstream_atomno )
								, ( bp::arg("jump_number") ) );

				}
				{ //::core::kinematics::FoldTree::upstream_jump_residue

						typedef int ( ::core::kinematics::FoldTree::*upstream_jump_residue_function_type )( int const ) const;

						FoldTree_exposer.def(
								"upstream_jump_residue"
								, upstream_jump_residue_function_type( &::core::kinematics::FoldTree::upstream_jump_residue )
								, ( bp::arg("jump_number") ) );

				}
				FoldTree_exposer.def_readonly( "PEPTIDE", core::kinematics::FoldTree::PEPTIDE );
				FoldTree_exposer.def( bp::self_ns::str( bp::self ) );
				FoldTree_exposer.def( bp::self == bp::self );
		}

		bp::implicitly_convertible< int const, core::kinematics::FoldTree >();

		{ //::core::kinematics::Jump
				typedef bp::class_< core::kinematics::Jump > Jump_exposer_t;
				Jump_exposer_t Jump_exposer = Jump_exposer_t( "Jump" );
				bp::scope Jump_scope( Jump_exposer );
				Jump_exposer.def( bp::init< >() );
				Jump_exposer.def( bp::init< core::kinematics::RT const & >(( bp::arg("src_rt") ))[bp::return_value_policy< bp::return_by_value >()] );
				Jump_exposer.def( bp::init< core::kinematics::Stub const &, core::kinematics::Stub const & >(( bp::arg("stub1"), bp::arg("stub2") ))[bp::return_value_policy< bp::return_by_value >()] );
				Jump_exposer.def( bp::init< core::kinematics::Jump const & >(( bp::arg("src") ))[bp::return_value_policy< bp::return_by_value >()] );
				{ //::core::kinematics::Jump::fold_in_rb_deltas

						typedef void ( ::core::kinematics::Jump::*fold_in_rb_deltas_function_type )(  ) ;

						Jump_exposer.def(
								"fold_in_rb_deltas"
								, fold_in_rb_deltas_function_type( &::core::kinematics::Jump::fold_in_rb_deltas ) );

				}
				{ //::core::kinematics::Jump::from_stubs

						typedef void ( ::core::kinematics::Jump::*from_stubs_function_type )( ::core::kinematics::Stub const &,::core::kinematics::Stub const & ) ;

						Jump_exposer.def(
								"from_stubs"
								, from_stubs_function_type( &::core::kinematics::Jump::from_stubs )
								, ( bp::arg("stub1"), bp::arg("stub2") ) );

				}
				{ //::core::kinematics::Jump::gaussian_move

						typedef void ( ::core::kinematics::Jump::*gaussian_move_function_type )( int const,float const,float const ) ;

						Jump_exposer.def(
								"gaussian_move"
								, gaussian_move_function_type( &::core::kinematics::Jump::gaussian_move )
								, ( bp::arg("dir"), bp::arg("trans_mag"), bp::arg("rot_mag") ) );

				}
				{ //::core::kinematics::Jump::get_rb_center

						typedef ::numeric::xyzVector_double const & ( ::core::kinematics::Jump::*get_rb_center_function_type )( int const ) const;

						Jump_exposer.def(
								"get_rb_center"
								, get_rb_center_function_type( &::core::kinematics::Jump::get_rb_center )
								, ( bp::arg("dir") )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::kinematics::Jump::get_rb_delta

						typedef ::ObjexxFCL::FArray1Da_double ( ::core::kinematics::Jump::*get_rb_delta_function_type )( int const ) const;

						Jump_exposer.def(
								"get_rb_delta"
								, get_rb_delta_function_type( &::core::kinematics::Jump::get_rb_delta )
								, ( bp::arg("dir") ) );

				}
				{ //::core::kinematics::Jump::get_rb_delta

						typedef double ( ::core::kinematics::Jump::*get_rb_delta_function_type )( int const,int const ) const;

						Jump_exposer.def(
								"get_rb_delta"
								, get_rb_delta_function_type( &::core::kinematics::Jump::get_rb_delta )
								, ( bp::arg("rb_no"), bp::arg("dir") ) );

				}
				{ //::core::kinematics::Jump::get_rotation

						typedef ::numeric::xyzMatrix_double const & ( ::core::kinematics::Jump::*get_rotation_function_type )(  ) const;

						Jump_exposer.def(
								"get_rotation"
								, get_rotation_function_type( &::core::kinematics::Jump::get_rotation )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::kinematics::Jump::get_translation

						typedef ::numeric::xyzVector_double const & ( ::core::kinematics::Jump::*get_translation_function_type )(  ) const;

						Jump_exposer.def(
								"get_translation"
								, get_translation_function_type( &::core::kinematics::Jump::get_translation )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::kinematics::Jump::identity_transform

						typedef void ( ::core::kinematics::Jump::*identity_transform_function_type )(  ) ;

						Jump_exposer.def(
								"identity_transform"
								, identity_transform_function_type( &::core::kinematics::Jump::identity_transform ) );

				}
				{ //::core::kinematics::Jump::make_jump

						typedef void ( ::core::kinematics::Jump::*make_jump_function_type )( ::core::kinematics::Stub const &,::core::kinematics::Stub & ) const;

						Jump_exposer.def(
								"make_jump"
								, make_jump_function_type( &::core::kinematics::Jump::make_jump )
								, ( bp::arg("stub1"), bp::arg("stub2") ) );

				}
				{ //::core::kinematics::Jump::nonzero_deltas

						typedef bool ( ::core::kinematics::Jump::*nonzero_deltas_function_type )(  ) const;

						Jump_exposer.def(
								"nonzero_deltas"
								, nonzero_deltas_function_type( &::core::kinematics::Jump::nonzero_deltas ) );

				}
				{ //::core::kinematics::Jump::ortho_check

						typedef bool ( ::core::kinematics::Jump::*ortho_check_function_type )(  ) const;

						Jump_exposer.def(
								"ortho_check"
								, ortho_check_function_type( &::core::kinematics::Jump::ortho_check ) );

				}
				{ //::core::kinematics::Jump::random_trans

						typedef void ( ::core::kinematics::Jump::*random_trans_function_type )( float const ) ;

						Jump_exposer.def(
								"random_trans"
								, random_trans_function_type( &::core::kinematics::Jump::random_trans )
								, ( bp::arg("dist_in") ) );

				}
				{ //::core::kinematics::Jump::reset

						typedef void ( ::core::kinematics::Jump::*reset_function_type )(  ) ;

						Jump_exposer.def(
								"reset"
								, reset_function_type( &::core::kinematics::Jump::reset ) );

				}
				{ //::core::kinematics::Jump::reverse

						typedef void ( ::core::kinematics::Jump::*reverse_function_type )(  ) ;

						Jump_exposer.def(
								"reverse"
								, reverse_function_type( &::core::kinematics::Jump::reverse ) );

				}
				{ //::core::kinematics::Jump::rotation_by_axis

						typedef void ( ::core::kinematics::Jump::*rotation_by_axis_function_type )( ::core::kinematics::Stub const &,::numeric::xyzVector_double const &,::numeric::xyzVector_double const &,float const ) ;

						Jump_exposer.def(
								"rotation_by_axis"
								, rotation_by_axis_function_type( &::core::kinematics::Jump::rotation_by_axis )
								, ( bp::arg("stub"), bp::arg("axis"), bp::arg("center"), bp::arg("alpha") ) );

				}
				{ //::core::kinematics::Jump::rotation_by_matrix

						typedef void ( ::core::kinematics::Jump::*rotation_by_matrix_function_type )( ::core::kinematics::Stub const &,::numeric::xyzVector_double const &,::numeric::xyzMatrix_double const & ) ;

						Jump_exposer.def(
								"rotation_by_matrix"
								, rotation_by_matrix_function_type( &::core::kinematics::Jump::rotation_by_matrix )
								, ( bp::arg("stub"), bp::arg("center"), bp::arg("matrix") ) );

				}
				{ //::core::kinematics::Jump::set_rb_center

						typedef void ( ::core::kinematics::Jump::*set_rb_center_function_type )( int const,::core::kinematics::Stub const &,::numeric::xyzVector_double const & ) ;

						Jump_exposer.def(
								"set_rb_center"
								, set_rb_center_function_type( &::core::kinematics::Jump::set_rb_center )
								, ( bp::arg("dir"), bp::arg("stub"), bp::arg("center") ) );

				}
				{ //::core::kinematics::Jump::set_rb_delta

						typedef void ( ::core::kinematics::Jump::*set_rb_delta_function_type )( int const,int const,double const ) ;

						Jump_exposer.def(
								"set_rb_delta"
								, set_rb_delta_function_type( &::core::kinematics::Jump::set_rb_delta )
								, ( bp::arg("rb_no"), bp::arg("dir"), bp::arg("value") ) );

				}
				{ //::core::kinematics::Jump::set_rotation

						typedef void ( ::core::kinematics::Jump::*set_rotation_function_type )( ::numeric::xyzMatrix_double const & ) ;

						Jump_exposer.def(
								"set_rotation"
								, set_rotation_function_type( &::core::kinematics::Jump::set_rotation )
								, ( bp::arg("R_in") ) );

				}
				{ //::core::kinematics::Jump::set_translation

						typedef void ( ::core::kinematics::Jump::*set_translation_function_type )( ::numeric::xyzVector_double const & ) ;

						Jump_exposer.def(
								"set_translation"
								, set_translation_function_type( &::core::kinematics::Jump::set_translation )
								, ( bp::arg("t") ) );

				}
				{ //::core::kinematics::Jump::translation_along_axis

						typedef void ( ::core::kinematics::Jump::*translation_along_axis_function_type )( ::core::kinematics::Stub const &,::numeric::xyzVector_double const &,float const ) ;

						Jump_exposer.def(
								"translation_along_axis"
								, translation_along_axis_function_type( &::core::kinematics::Jump::translation_along_axis )
								, ( bp::arg("stub"), bp::arg("axis"), bp::arg("dist") ) );

				}
				Jump_exposer.def( bp::self_ns::str( bp::self ) );
		}

		bp::implicitly_convertible< core::kinematics::RT const &, core::kinematics::Jump >();

		bp::class_< JumpAtom_wrapper, bp::bases< core::kinematics::Atom_ >, utility::pointer::owning_ptr< ::core::kinematics::JumpAtom > >( "JumpAtom" )
				.def(
						"clone"
						, (::core::kinematics::Atom * ( ::core::kinematics::JumpAtom::* )( ::core::kinematics::Atom * ) const)(&::core::kinematics::JumpAtom::clone)
						, (::core::kinematics::Atom * ( JumpAtom_wrapper::* )( ::core::kinematics::Atom * ) const)(&JumpAtom_wrapper::default_clone)
						, ( bp::arg("parent_in") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"copy_coords"
						, (void ( ::core::kinematics::JumpAtom::* )( ::core::kinematics::Atom const & ) )(&::core::kinematics::JumpAtom::copy_coords)
						, (void ( JumpAtom_wrapper::* )( ::core::kinematics::Atom const & ) )(&JumpAtom_wrapper::default_copy_coords)
						, ( bp::arg("src") ) )
				.def(
						"dof"
						, (double ( ::core::kinematics::JumpAtom::* )( ::core::kinematics::DOF_Type const ) const)(&::core::kinematics::JumpAtom::dof)
						, (double ( JumpAtom_wrapper::* )( ::core::kinematics::DOF_Type const ) const)(&JumpAtom_wrapper::default_dof)
						, ( bp::arg("type") ) )
				.def(
						"get_dof_axis_and_end_pos"
						, (void ( ::core::kinematics::JumpAtom::* )( ::core::Vector &,::core::PointPosition &,::core::kinematics::DOF_Type const ) const)(&::core::kinematics::JumpAtom::get_dof_axis_and_end_pos)
						, (void ( JumpAtom_wrapper::* )( ::core::Vector &,::core::PointPosition &,::core::kinematics::DOF_Type const ) const)(&JumpAtom_wrapper::default_get_dof_axis_and_end_pos)
						, ( bp::arg("axis"), bp::arg("end_pos"), bp::arg("type") ) )
				.def(
						"is_jump"
						, (bool ( ::core::kinematics::JumpAtom::* )(  ) const)(&::core::kinematics::JumpAtom::is_jump)
						, (bool ( JumpAtom_wrapper::* )(  ) const)(&JumpAtom_wrapper::default_is_jump) )
				.def(
						"jump"
						, (::core::kinematics::Jump const & ( ::core::kinematics::JumpAtom::* )(  ) const)(&::core::kinematics::JumpAtom::jump)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"jump"
						, (void ( ::core::kinematics::JumpAtom::* )( ::core::kinematics::Jump const & ) )(&::core::kinematics::JumpAtom::jump)
						, (void ( JumpAtom_wrapper::* )( ::core::kinematics::Jump const & ) )(&JumpAtom_wrapper::default_jump)
						, ( bp::arg("jump_in") ) )
				.def(
						"keep_dof_fixed"
						, (bool ( ::core::kinematics::JumpAtom::* )( ::core::kinematics::DOF_Type const ) const)(&::core::kinematics::JumpAtom::keep_dof_fixed)
						, (bool ( JumpAtom_wrapper::* )( ::core::kinematics::DOF_Type const ) const)(&JumpAtom_wrapper::default_keep_dof_fixed)
						, ( bp::arg("type") ) )
				.def(
						"set_dof"
						, (void ( ::core::kinematics::JumpAtom::* )( ::core::kinematics::DOF_Type const,double const ) )(&::core::kinematics::JumpAtom::set_dof)
						, (void ( JumpAtom_wrapper::* )( ::core::kinematics::DOF_Type const,double const ) )(&JumpAtom_wrapper::default_set_dof)
						, ( bp::arg("type"), bp::arg("value") ) )
				.def(
						"setup_min_map"
						, (void ( ::core::kinematics::JumpAtom::* )( ::core::kinematics::DOF_ID &,::core::kinematics::DOF_ID_Mask const &,::core::optimization::MinimizerMap & ) const)(&::core::kinematics::JumpAtom::setup_min_map)
						, (void ( JumpAtom_wrapper::* )( ::core::kinematics::DOF_ID &,::core::kinematics::DOF_ID_Mask const &,::core::optimization::MinimizerMap & ) const)(&JumpAtom_wrapper::default_setup_min_map)
						, ( bp::arg("last_torsion"), bp::arg("allow_move"), bp::arg("min_map") ) )
				.def(
						"stub_atom1"
						, (::core::kinematics::Atom const * ( ::core::kinematics::JumpAtom::* )(  ) const)(&::core::kinematics::JumpAtom::stub_atom1)
						, (::core::kinematics::Atom const * ( JumpAtom_wrapper::* )(  ) const)(&JumpAtom_wrapper::default_stub_atom1)
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"stub_atom2"
						, (::core::kinematics::Atom const * ( ::core::kinematics::JumpAtom::* )(  ) const)(&::core::kinematics::JumpAtom::stub_atom2)
						, (::core::kinematics::Atom const * ( JumpAtom_wrapper::* )(  ) const)(&JumpAtom_wrapper::default_stub_atom2)
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"stub_atom3"
						, (::core::kinematics::Atom const * ( ::core::kinematics::JumpAtom::* )(  ) const)(&::core::kinematics::JumpAtom::stub_atom3)
						, (::core::kinematics::Atom const * ( JumpAtom_wrapper::* )(  ) const)(&JumpAtom_wrapper::default_stub_atom3)
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"update_internal_coords"
						, (void ( ::core::kinematics::JumpAtom::* )( ::core::kinematics::Stub &,bool const ) )(&::core::kinematics::JumpAtom::update_internal_coords)
						, (void ( JumpAtom_wrapper::* )( ::core::kinematics::Stub &,bool const ) )(&JumpAtom_wrapper::default_update_internal_coords)
						, ( bp::arg("stub"), bp::arg("recursive")=(bool const)(true) ) )
				.def(
						"update_stub"
						, (void ( ::core::kinematics::JumpAtom::* )( ::core::kinematics::Stub & ) const)(&::core::kinematics::JumpAtom::update_stub)
						, (void ( JumpAtom_wrapper::* )( ::core::kinematics::Stub & ) const)(&JumpAtom_wrapper::default_update_stub)
						, ( bp::arg("arg0") ) )
				.def(
						"update_xyz_coords"
						, (void ( ::core::kinematics::JumpAtom::* )( ::core::kinematics::Stub & ) )(&::core::kinematics::JumpAtom::update_xyz_coords)
						, (void ( JumpAtom_wrapper::* )( ::core::kinematics::Stub & ) )(&JumpAtom_wrapper::default_update_xyz_coords)
						, ( bp::arg("stub") ) );

		bp::class_< core::kinematics::MoveMap >( "MoveMap" )
				.def( bp::init< >() )
				.def(
						"clear"
						, (void ( ::core::kinematics::MoveMap::* )(  ) )( &::core::kinematics::MoveMap::clear ) )
				.def(
						"dof_begin"
						, (::std::_Rb_tree_const_iterator<std::pair<core::kinematics::DOF_ID const, bool> > ( ::core::kinematics::MoveMap::* )(  ) const)( &::core::kinematics::MoveMap::dof_begin ) )
				.def(
						"dof_end"
						, (::std::_Rb_tree_const_iterator<std::pair<core::kinematics::DOF_ID const, bool> > ( ::core::kinematics::MoveMap::* )(  ) const)( &::core::kinematics::MoveMap::dof_end ) )
				.def(
						"get"
						, (bool ( ::core::kinematics::MoveMap::* )( ::core::kinematics::DOF_Type const & ) const)( &::core::kinematics::MoveMap::get )
						, ( bp::arg("t") ) )
				.def(
						"get"
						, (bool ( ::core::kinematics::MoveMap::* )( ::core::kinematics::DOF_ID const & ) const)( &::core::kinematics::MoveMap::get )
						, ( bp::arg("id") ) )
				.def(
						"get_bb"
						, (bool ( ::core::kinematics::MoveMap::* )( int const ) const)( &::core::kinematics::MoveMap::get_bb )
						, ( bp::arg("seqpos") ) )
				.def(
						"get_chi"
						, (bool ( ::core::kinematics::MoveMap::* )( int const ) const)( &::core::kinematics::MoveMap::get_chi )
						, ( bp::arg("seqpos") ) )
				.def(
						"get_jump"
						, (bool ( ::core::kinematics::MoveMap::* )( int const ) const)( &::core::kinematics::MoveMap::get_jump )
						, ( bp::arg("jump_number") ) )
				.def(
						"set"
						, (void ( ::core::kinematics::MoveMap::* )( ::core::kinematics::DOF_Type const &,bool const ) )( &::core::kinematics::MoveMap::set )
						, ( bp::arg("t"), bp::arg("setting") ) )
				.def(
						"set"
						, (void ( ::core::kinematics::MoveMap::* )( ::core::kinematics::DOF_ID const &,bool const ) )( &::core::kinematics::MoveMap::set )
						, ( bp::arg("id"), bp::arg("setting") ) )
				.def(
						"set_bb"
						, (void ( ::core::kinematics::MoveMap::* )( int const,bool const ) )( &::core::kinematics::MoveMap::set_bb )
						, ( bp::arg("seqpos"), bp::arg("setting") ) )
				.def(
						"set_bb"
						, (void ( ::core::kinematics::MoveMap::* )( bool const ) )( &::core::kinematics::MoveMap::set_bb )
						, ( bp::arg("setting") ) )
				.def(
						"set_chi"
						, (void ( ::core::kinematics::MoveMap::* )( int const,bool const ) )( &::core::kinematics::MoveMap::set_chi )
						, ( bp::arg("seqpos"), bp::arg("setting") ) )
				.def(
						"set_chi"
						, (void ( ::core::kinematics::MoveMap::* )( bool const ) )( &::core::kinematics::MoveMap::set_chi )
						, ( bp::arg("setting") ) )
				.def(
						"set_jump"
						, (void ( ::core::kinematics::MoveMap::* )( int const,bool const ) )( &::core::kinematics::MoveMap::set_jump )
						, ( bp::arg("jump_number"), bp::arg("setting") ) )
				.def(
						"set_jump"
						, (void ( ::core::kinematics::MoveMap::* )( bool const ) )( &::core::kinematics::MoveMap::set_jump )
						, ( bp::arg("setting") ) )
				.def(
						"vary_omega"
						, (void ( ::core::kinematics::MoveMap::* )( bool const ) )( &::core::kinematics::MoveMap::vary_omega )
						, ( bp::arg("setting") ) )
				.def(
						"vary_omega"
						, (bool ( ::core::kinematics::MoveMap::* )(  ) const)( &::core::kinematics::MoveMap::vary_omega ) );

		{ //::core::kinematics::RT
				typedef bp::class_< core::kinematics::RT > RT_exposer_t;
				RT_exposer_t RT_exposer = RT_exposer_t( "RT" );
				bp::scope RT_scope( RT_exposer );
				RT_exposer.def( bp::init< >() );
				RT_exposer.def( bp::init< core::kinematics::Stub const &, core::kinematics::Stub const & >(( bp::arg("stub1"), bp::arg("stub2") ))[bp::return_value_policy< bp::return_by_value >()] );
				RT_exposer.def( bp::init< core::kinematics::RT const & >(( bp::arg("src") ))[bp::return_value_policy< bp::return_by_value >()] );
				{ //::core::kinematics::RT::fold_in_rb_deltas

						typedef void ( ::core::kinematics::RT::*fold_in_rb_deltas_function_type )( ::ObjexxFCL::FArray1Da_double,::numeric::xyzVector_double const & ) ;

						RT_exposer.def(
								"fold_in_rb_deltas"
								, fold_in_rb_deltas_function_type( &::core::kinematics::RT::fold_in_rb_deltas )
								, ( bp::arg("rb"), bp::arg("rb_center") ) );

				}
				{ //::core::kinematics::RT::from_stubs

						typedef void ( ::core::kinematics::RT::*from_stubs_function_type )( ::core::kinematics::Stub const &,::core::kinematics::Stub const & ) ;

						RT_exposer.def(
								"from_stubs"
								, from_stubs_function_type( &::core::kinematics::RT::from_stubs )
								, ( bp::arg("stub1"), bp::arg("stub2") ) );

				}
				{ //::core::kinematics::RT::get_rotation

						typedef ::numeric::xyzMatrix_double const & ( ::core::kinematics::RT::*get_rotation_function_type )(  ) const;

						RT_exposer.def(
								"get_rotation"
								, get_rotation_function_type( &::core::kinematics::RT::get_rotation )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::kinematics::RT::get_translation

						typedef ::numeric::xyzVector_double const & ( ::core::kinematics::RT::*get_translation_function_type )(  ) const;

						RT_exposer.def(
								"get_translation"
								, get_translation_function_type( &::core::kinematics::RT::get_translation )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::kinematics::RT::identity_transform

						typedef void ( ::core::kinematics::RT::*identity_transform_function_type )(  ) ;

						RT_exposer.def(
								"identity_transform"
								, identity_transform_function_type( &::core::kinematics::RT::identity_transform ) );

				}
				{ //::core::kinematics::RT::make_jump

						typedef void ( ::core::kinematics::RT::*make_jump_function_type )( ::core::kinematics::Stub const &,::core::kinematics::Stub & ) const;

						RT_exposer.def(
								"make_jump"
								, make_jump_function_type( &::core::kinematics::RT::make_jump )
								, ( bp::arg("stub1"), bp::arg("stub2") ) );

				}
				{ //::core::kinematics::RT::ortho_check

						typedef bool ( ::core::kinematics::RT::*ortho_check_function_type )(  ) const;

						RT_exposer.def(
								"ortho_check"
								, ortho_check_function_type( &::core::kinematics::RT::ortho_check ) );

				}
				{ //::core::kinematics::RT::reset

						typedef void ( ::core::kinematics::RT::*reset_function_type )(  ) ;

						RT_exposer.def(
								"reset"
								, reset_function_type( &::core::kinematics::RT::reset ) );

				}
				{ //::core::kinematics::RT::reverse

						typedef void ( ::core::kinematics::RT::*reverse_function_type )(  ) ;

						RT_exposer.def(
								"reverse"
								, reverse_function_type( &::core::kinematics::RT::reverse ) );

				}
				{ //::core::kinematics::RT::set_rotation

						typedef void ( ::core::kinematics::RT::*set_rotation_function_type )( ::numeric::xyzMatrix_double const & ) ;

						RT_exposer.def(
								"set_rotation"
								, set_rotation_function_type( &::core::kinematics::RT::set_rotation )
								, ( bp::arg("r") ) );

				}
				{ //::core::kinematics::RT::set_translation

						typedef void ( ::core::kinematics::RT::*set_translation_function_type )( ::numeric::xyzVector_double const & ) ;

						RT_exposer.def(
								"set_translation"
								, set_translation_function_type( &::core::kinematics::RT::set_translation )
								, ( bp::arg("t") ) );

				}
				RT_exposer.def( bp::self_ns::str( bp::self ) );
		}

		bp::class_< core::kinematics::Stub >( "Stub" )
				.def( bp::init< >() )
				.def( bp::init< numeric::xyzMatrix_double const &, numeric::xyzVector_double const & >(( bp::arg("M_in"), bp::arg("v_in") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def( bp::init< numeric::xyzVector_double const &, numeric::xyzVector_double const &, numeric::xyzVector_double const &, numeric::xyzVector_double const & >(( bp::arg("center"), bp::arg("a"), bp::arg("b"), bp::arg("c") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def( bp::init< numeric::xyzVector_double const &, numeric::xyzVector_double const &, numeric::xyzVector_double const & >(( bp::arg("a"), bp::arg("b"), bp::arg("c") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"from_four_points"
						, (void ( ::core::kinematics::Stub::* )( ::numeric::xyzVector_double const &,::numeric::xyzVector_double const &,::numeric::xyzVector_double const &,::numeric::xyzVector_double const & ) )( &::core::kinematics::Stub::from_four_points )
						, ( bp::arg("center"), bp::arg("a"), bp::arg("b"), bp::arg("c") ) )
				.def(
						"global2local"
						, (::numeric::xyzVector_double ( ::core::kinematics::Stub::* )( ::numeric::xyzVector_double const & ) const)( &::core::kinematics::Stub::global2local )
						, ( bp::arg("xyz") ) )
				.def(
						"is_orthogonal"
						, (bool ( ::core::kinematics::Stub::* )( double const & ) const)( &::core::kinematics::Stub::is_orthogonal )
						, ( bp::arg("tolerance") ) )
				.def(
						"local2global"
						, (::numeric::xyzVector_double ( ::core::kinematics::Stub::* )( ::numeric::xyzVector_double const & ) const)( &::core::kinematics::Stub::local2global )
						, ( bp::arg("xyz") ) )
				.def(
						"spherical"
						, (::numeric::xyzVector_double ( ::core::kinematics::Stub::* )( ::core::Real const,::core::Real const,::core::Real const ) )( &::core::kinematics::Stub::spherical )
						, ( bp::arg("phi"), bp::arg("theta"), bp::arg("d") ) )
				.def_readwrite( "M", &core::kinematics::Stub::M )
				.def_readwrite( "v", &core::kinematics::Stub::v )
				.def( bp::self_ns::str( bp::self ) );

		bp::class_< core::kinematics::TorsionID >( "TorsionID" )
				.def( bp::init< >() )
				.def( bp::init< core::kinematics::TorsionID const & >(( bp::arg("src") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def( bp::init< int, core::kinematics::TorsionType const &, int >(( bp::arg("rsd_in"), bp::arg("type_in"), bp::arg("torsion_in") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"rsd"
						, (int ( ::core::kinematics::TorsionID::* )(  ) const)( &::core::kinematics::TorsionID::rsd ) )
				.def(
						"rsd"
						, (int & ( ::core::kinematics::TorsionID::* )(  ) )( &::core::kinematics::TorsionID::rsd )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"torsion"
						, (int ( ::core::kinematics::TorsionID::* )(  ) const)( &::core::kinematics::TorsionID::torsion ) )
				.def(
						"torsion"
						, (int & ( ::core::kinematics::TorsionID::* )(  ) )( &::core::kinematics::TorsionID::torsion )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"type"
						, (::core::kinematics::TorsionType ( ::core::kinematics::TorsionID::* )(  ) const)( &::core::kinematics::TorsionID::type ) )
				.def(
						"type"
						, (::core::kinematics::TorsionType & ( ::core::kinematics::TorsionID::* )(  ) )( &::core::kinematics::TorsionID::type )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"valid"
						, (bool ( ::core::kinematics::TorsionID::* )(  ) const)( &::core::kinematics::TorsionID::valid ) )
				.def( bp::self != bp::self )
				.def( bp::self < bp::self )
				.def( bp::self_ns::str( bp::self ) )
				.def( bp::self == bp::self );

		{ //::core::kinematics::DOF_type_is_rb

				typedef bool ( *DOF_type_is_rb_function_type )( ::core::kinematics::DOF_Type const );

				bp::def(
						"DOF_type_is_rb"
						, DOF_type_is_rb_function_type( &::core::kinematics::DOF_type_is_rb )
						, ( bp::arg("t") ) );

		}

		{ //::core::kinematics::add_atom

				typedef ::core::kinematics::Atom * ( *add_atom_function_type )( int const,int const,::utility::vector1<utility::vector1<int, std::allocator<int> >, std::allocator<utility::vector1<int, std::allocator<int> > > > const &,::utility::vector1<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > &,bool const );

				bp::def(
						"add_atom"
						, add_atom_function_type( &::core::kinematics::add_atom )
						, ( bp::arg("atomno"), bp::arg("seqpos"), bp::arg("links"), bp::arg("atom_pointer"), bp::arg("add_jump_atom") )
						, bp::return_value_policy< bp::return_by_value >() );

		}

		{ //::core::kinematics::build_jump_edge

				typedef void ( *build_jump_edge_function_type )( ::core::kinematics::Edge const &,::core::conformation::ResidueCAPs const &,::core::kinematics::AtomPointers & );

				bp::def(
						"build_jump_edge"
						, build_jump_edge_function_type( &::core::kinematics::build_jump_edge )
						, ( bp::arg("edge"), bp::arg("residues"), bp::arg("atom_pointer") ) );

		}

		{ //::core::kinematics::build_polymer_edge

				typedef void ( *build_polymer_edge_function_type )( ::core::kinematics::Edge const &,::core::conformation::ResidueCAPs const &,::core::kinematics::AtomPointers & );

				bp::def(
						"build_polymer_edge"
						, build_polymer_edge_function_type( &::core::kinematics::build_polymer_edge )
						, ( bp::arg("edge"), bp::arg("residues"), bp::arg("atom_pointer") ) );

		}

		{ //::core::kinematics::build_residue_tree

				typedef ::core::kinematics::Atom * ( *build_residue_tree_function_type )( int const,::core::conformation::Residue const &,::utility::vector1<core::kinematics::Atom*, std::allocator<core::kinematics::Atom*> > &,bool const );

				bp::def(
						"build_residue_tree"
						, build_residue_tree_function_type( &::core::kinematics::build_residue_tree )
						, ( bp::arg("root_atomno"), bp::arg("rsd"), bp::arg("atom_pointer"), bp::arg("root_atom_is_jump_atom") )
						, bp::return_value_policy< bp::return_by_value >() );

		}

		{ //::core::kinematics::build_residue_tree

				typedef ::core::kinematics::Atom * ( *build_residue_tree_function_type )( ::core::conformation::Residue const &,int const,int );

				bp::def(
						"build_residue_tree"
						, build_residue_tree_function_type( &::core::kinematics::build_residue_tree )
						, ( bp::arg("rsd"), bp::arg("dir"), bp::arg("root_atomno")=(int)(0) )
						, bp::return_value_policy< bp::return_by_value >() );

		}

		{ //::core::kinematics::build_tree

				typedef ::core::kinematics::Atom * ( *build_tree_function_type )( ::core::kinematics::FoldTree const &,::core::conformation::ResidueCAPs const & );

				bp::def(
						"build_tree"
						, build_tree_function_type( &::core::kinematics::build_tree )
						, ( bp::arg("fold_tree"), bp::arg("residues") )
						, bp::return_value_policy< bp::return_by_value >() );

		}

		{ //::core::kinematics::distance

				typedef ::core::Length ( *distance_function_type )( ::core::kinematics::Atom const &,::core::kinematics::Atom const & );

				bp::def(
						"distance"
						, distance_function_type( &::core::kinematics::distance )
						, ( bp::arg("atom1"), bp::arg("atom2") ) );

		}

		{ //::core::kinematics::distance

				typedef double ( *distance_function_type )( ::core::kinematics::Jump const &,::core::kinematics::Jump const & );

				bp::def(
						"distance"
						, distance_function_type( &::core::kinematics::distance )
						, ( bp::arg("a_in"), bp::arg("b_in") ) );

		}

		{ //::core::kinematics::distance

				typedef double ( *distance_function_type )( ::core::kinematics::RT const &,::core::kinematics::RT const & );

				bp::def(
						"distance"
						, distance_function_type( &::core::kinematics::distance )
						, ( bp::arg("a"), bp::arg("b") ) );

		}

		{ //::core::kinematics::distance

				typedef double ( *distance_function_type )( ::core::kinematics::Stub const &,::core::kinematics::Stub const & );

				bp::def(
						"distance"
						, distance_function_type( &::core::kinematics::distance )
						, ( bp::arg("a"), bp::arg("b") ) );

		}

		{ //::core::kinematics::distance_squared

				typedef ::core::Length ( *distance_squared_function_type )( ::core::kinematics::Atom const &,::core::kinematics::Atom const & );

				bp::def(
						"distance_squared"
						, distance_squared_function_type( &::core::kinematics::distance_squared )
						, ( bp::arg("atom1"), bp::arg("atom2") ) );

		}

		{ //::core::kinematics::get_anchor_atomno

				typedef int ( *get_anchor_atomno_function_type )( ::core::conformation::Residue const &,int const );

				bp::def(
						"get_anchor_atomno"
						, get_anchor_atomno_function_type( &::core::kinematics::get_anchor_atomno )
						, ( bp::arg("rsd"), bp::arg("dir") ) );

		}

		{ //::core::kinematics::get_rb_number

				typedef int ( *get_rb_number_function_type )( ::core::kinematics::DOF_Type const );

				bp::def(
						"get_rb_number"
						, get_rb_number_function_type( &::core::kinematics::get_rb_number )
						, ( bp::arg("t") ) );

		}

		{ //::core::kinematics::get_rb_type

				typedef ::core::kinematics::DOF_Type ( *get_rb_type_function_type )( int const );

				bp::def(
						"get_rb_type"
						, get_rb_type_function_type( &::core::kinematics::get_rb_type )
						, ( bp::arg("k") ) );

		}

		{ //::core::kinematics::get_root_atomno

				typedef int ( *get_root_atomno_function_type )( ::core::conformation::Residue const &,int const );

				bp::def(
						"get_root_atomno"
						, get_root_atomno_function_type( &::core::kinematics::get_root_atomno )
						, ( bp::arg("rsd"), bp::arg("dir") ) );

		}

		{ //::core::kinematics::jump_distance

				typedef void ( *jump_distance_function_type )( ::core::kinematics::Jump const &,::core::kinematics::Jump const &,double &,double & );

				bp::def(
						"jump_distance"
						, jump_distance_function_type( &::core::kinematics::jump_distance )
						, ( bp::arg("a_in"), bp::arg("b_in"), bp::arg("dist"), bp::arg("theta") ) );

		}

		{ //::core::kinematics::pick_loopy_cutpoint

				typedef int ( *pick_loopy_cutpoint_function_type )( ::core::Size const,::ObjexxFCL::FArray1D_float const & );

				bp::def(
						"pick_loopy_cutpoint"
						, pick_loopy_cutpoint_function_type( &::core::kinematics::pick_loopy_cutpoint )
						, ( bp::arg("n_res"), bp::arg("cut_bias_sum") ) );

		}

		{ //::core::kinematics::setup_corresponding_atoms

				typedef void ( *setup_corresponding_atoms_function_type )( ::core::kinematics::AtomID_Map<core::kinematics::AtomID> &,::core::conformation::Residue const &,::core::conformation::Residue const & );

				bp::def(
						"setup_corresponding_atoms"
						, setup_corresponding_atoms_function_type( &::core::kinematics::setup_corresponding_atoms )
						, ( bp::arg("atom_map"), bp::arg("rsd1"), bp::arg("rsd2") ) );

		}

		{ //::core::kinematics::setup_dof_mask_from_move_map

				typedef void ( *setup_dof_mask_from_move_map_function_type )( ::core::kinematics::MoveMap const &,::core::pose::Pose const &,::core::kinematics::DOF_ID_Mask & );

				bp::def(
						"setup_dof_mask_from_move_map"
						, setup_dof_mask_from_move_map_function_type( &::core::kinematics::setup_dof_mask_from_move_map )
						, ( bp::arg("mm"), bp::arg("pose"), bp::arg("dof_mask") ) );

		}

		{ //::core::kinematics::setup_dof_to_torsion_map

				typedef void ( *setup_dof_to_torsion_map_function_type )( ::core::pose::Pose const &,::core::kinematics::DOF_ID_Map<core::kinematics::TorsionID> & );

				bp::def(
						"setup_dof_to_torsion_map"
						, setup_dof_to_torsion_map_function_type( &::core::kinematics::setup_dof_to_torsion_map )
						, ( bp::arg("pose"), bp::arg("dof_map") ) );

		}

		{ //::core::kinematics::swap

				typedef void ( *swap_function_type )( ::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*> &,::core::kinematics::DOF_ID_Map<core::optimization::DOF_Node*> & );

				bp::def(
						"swap"
						, swap_function_type( &::core::kinematics::swap )
						, ( bp::arg("a"), bp::arg("b") ) );

		}

		{ //::core::kinematics::swap

				typedef void ( *swap_function_type )( ::core::kinematics::AtomID_Map<core::optimization::DOF_Node*> &,::core::kinematics::AtomID_Map<core::optimization::DOF_Node*> & );

				bp::def(
						"swap"
						, swap_function_type( &::core::kinematics::swap )
						, ( bp::arg("a"), bp::arg("b") ) );

		}

		{ //::core::kinematics::swap

				typedef void ( *swap_function_type )( ::core::kinematics::AtomID_Map<bool> &,::core::kinematics::AtomID_Map<bool> & );

				bp::def(
						"swap"
						, swap_function_type( &::core::kinematics::swap )
						, ( bp::arg("a"), bp::arg("b") ) );

		}

		{ //::core::kinematics::swap

				typedef void ( *swap_function_type )( ::core::kinematics::AtomID_Map<core::kinematics::Atom*> &,::core::kinematics::AtomID_Map<core::kinematics::Atom*> & );

				bp::def(
						"swap"
						, swap_function_type( &::core::kinematics::swap )
						, ( bp::arg("a"), bp::arg("b") ) );

		}

		bp::scope().attr("BAD_ATOMS") = bp::object( boost::ref( core::kinematics::BAD_ATOMS ) );

		bp::scope().attr("BAD_ATOM_ID") = bp::object( boost::ref( core::kinematics::BAD_ATOM_ID ) );

		bp::scope().attr("BAD_JUMP") = bp::object( boost::ref( core::kinematics::BAD_JUMP ) );

		bp::scope().attr("BAD_STUB") = bp::object( boost::ref( core::kinematics::BAD_STUB ) );

		bp::scope().attr("BOGUS_ATOM_ID") = core::kinematics::BOGUS_ATOM_ID;

		bp::scope().attr("BOGUS_DOF_ID") = core::kinematics::BOGUS_DOF_ID;

		bp::scope().attr("BOGUS_TORSION_ID") = core::kinematics::BOGUS_TORSION_ID;

		bp::scope().attr("CHAINBREAK_BOGUS_ATOM_ID") = core::kinematics::CHAINBREAK_BOGUS_ATOM_ID;

		bp::scope().attr("default_stub") = bp::object( boost::ref( core::kinematics::default_stub ) );

		bp::scope().attr("dir_jump") = core::kinematics::dir_jump;

		bp::scope().attr("n_DOF_Type") = core::kinematics::n_DOF_Type;
}
