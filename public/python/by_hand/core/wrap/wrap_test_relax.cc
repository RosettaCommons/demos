// This file has been generated by Py++.
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

#include "boost/python.hpp"

#include "all.hh"
#include <core/scoring/methods/EnergyMethodCreator.hh>
#include <core/scoring/methods/EnergyMethodOptions.fwd.hh>

namespace bp = boost::python;

struct ResidueType_wrapper : core::chemical::ResidueType, bp::wrapper< core::chemical::ResidueType > {

		ResidueType_wrapper(core::chemical::ResidueType const & arg )
		: core::chemical::ResidueType( arg )
			, bp::wrapper< core::chemical::ResidueType >(){
				// copy constructor

		}

		ResidueType_wrapper(::core::chemical::AtomTypeSetCAP atom_types, ::core::chemical::MMAtomTypeSetCAP mm_atom_types )
		: core::chemical::ResidueType( atom_types, mm_atom_types )
			, bp::wrapper< core::chemical::ResidueType >(){
				// constructor

		}

		virtual ::size_t last_backbone_atom(  ) const  {
				if( bp::override func_last_backbone_atom = this->get_override( "last_backbone_atom" ) )
						return func_last_backbone_atom(  );
				else
						return this->core::chemical::ResidueType::last_backbone_atom(  );
		}


		::size_t default_last_backbone_atom(  ) const  {
				return core::chemical::ResidueType::last_backbone_atom( );
		}

		virtual ::size_t lower_connect_atom(  ) const  {
				if( bp::override func_lower_connect_atom = this->get_override( "lower_connect_atom" ) )
						return func_lower_connect_atom(  );
				else
						return this->core::chemical::ResidueType::lower_connect_atom(  );
		}


		::size_t default_lower_connect_atom(  ) const  {
				return core::chemical::ResidueType::lower_connect_atom( );
		}

		virtual int path_distance( int at1, int at2 ) const  {
				if( bp::override func_path_distance = this->get_override( "path_distance" ) )
						return func_path_distance( at1, at2 );
				else
						return this->core::chemical::ResidueType::path_distance( at1, at2 );
		}


		int default_path_distance( int at1, int at2 ) const  {
				return core::chemical::ResidueType::path_distance( at1, at2 );
		}

		virtual ::size_t upper_connect_atom(  ) const  {
				if( bp::override func_upper_connect_atom = this->get_override( "upper_connect_atom" ) )
						return func_upper_connect_atom(  );
				else
						return this->core::chemical::ResidueType::upper_connect_atom(  );
		}


		::size_t default_upper_connect_atom(  ) const  {
				return core::chemical::ResidueType::upper_connect_atom( );
		}

};

struct PackerTask_wrapper : core::pack::task::PackerTask, bp::wrapper< core::pack::task::PackerTask > {

		PackerTask_wrapper()
		: core::pack::task::PackerTask()
			, bp::wrapper< core::pack::task::PackerTask >(){
				// null constructor

		}

		virtual bool bump_check(  ) const {
				bp::override func_bump_check = this->get_override( "bump_check" );
				return func_bump_check(  );
		}

		virtual ::core::pack::task::PackerTaskOP clone(  ) const {
				bp::override func_clone = this->get_override( "clone" );
				return func_clone(  );
		}

		virtual bool design_any(  ) const {
				bp::override func_design_any = this->get_override( "design_any" );
				return func_design_any(  );
		}

		virtual bool design_residue( int resid ) const {
				bp::override func_design_residue = this->get_override( "design_residue" );
				return func_design_residue( resid );
		}

		virtual bool include_current( ::size_t resid ) const {
				bp::override func_include_current = this->get_override( "include_current" );
				return func_include_current( resid );
		}

		virtual ::core::pack::task::PackerTask & initialize_from_command_line(  ){
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual ::core::pack::task::ResidueLevelTask & nonconst_residue_task( ::size_t resid ){
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual ::size_t num_to_be_packed(  ) const {
				bp::override func_num_to_be_packed = this->get_override( "num_to_be_packed" );
				return func_num_to_be_packed(  );
		}

		virtual void or_include_current( bool setting ){
				bp::override func_or_include_current = this->get_override( "or_include_current" );
				func_or_include_current( setting );
		}

		virtual void or_include_current( bool setting, ::size_t resid ){
				bp::override func_or_include_current = this->get_override( "or_include_current" );
				func_or_include_current( setting, resid );
		}

		virtual bool pack_residue( int resid ) const {
				bp::override func_pack_residue = this->get_override( "pack_residue" );
				return func_pack_residue( resid );
		}

		virtual ::core::pack::task::PackerTask & read_resfile( ::std::string const & filename ){
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual ::core::pack::task::ResidueLevelTask const & residue_task( ::size_t resid ) const {
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual ::core::pack::task::PackerTask & restrict_to_repacking(  ){
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual ::core::pack::task::PackerTask & restrict_to_residues( ::utility::vector1<bool, std::allocator<bool> > const & residues_allowed_to_be_packed ){
				throw std::logic_error("warning W1049: This method could not be overriden in Python - method returns reference to local variable!");
		}

		virtual void set_bump_check( bool setting ){
				bp::override func_set_bump_check = this->get_override( "set_bump_check" );
				func_set_bump_check( setting );
		}

		virtual void temporarily_fix_everything(  ){
				bp::override func_temporarily_fix_everything = this->get_override( "temporarily_fix_everything" );
				func_temporarily_fix_everything(  );
		}

		virtual void temporarily_set_pack_residue( int resid, bool setting ){
				bp::override func_temporarily_set_pack_residue = this->get_override( "temporarily_set_pack_residue" );
				func_temporarily_set_pack_residue( resid, setting );
		}

		virtual ::size_t total_residue(  ) const {
				bp::override func_total_residue = this->get_override( "total_residue" );
				return func_total_residue(  );
		}

};

struct ScoreFunction_wrapper : core::scoring::ScoreFunction, bp::wrapper< core::scoring::ScoreFunction > {

		ScoreFunction_wrapper( )
		: core::scoring::ScoreFunction( )
			, bp::wrapper< core::scoring::ScoreFunction >(){
				// null constructor

		}

		ScoreFunction_wrapper(::core::scoring::ScoreFunction const & arg0 )
		: core::scoring::ScoreFunction( boost::ref(arg0) )
			, bp::wrapper< core::scoring::ScoreFunction >(){
				// copy constructor

		}

		virtual ::protocols::moves::Real operator()( ::core::pose::Pose & pose ) const  {
				if( bp::override func___call__ = this->get_override( "__call__" ) )
						return func___call__( boost::ref(pose) );
				else
						return this->core::scoring::ScoreFunction::operator()( boost::ref(pose) );
		}


		::protocols::moves::Real default___call__( ::core::pose::Pose & pose ) const  {
				return core::scoring::ScoreFunction::operator()( boost::ref(pose) );
		}

};



struct EnergyMethod_wrapper : core::scoring::methods::EnergyMethod, bp::wrapper< core::scoring::methods::EnergyMethod > {

		EnergyMethod_wrapper()
		: core::scoring::methods::EnergyMethod()
			, bp::wrapper< core::scoring::methods::EnergyMethod >(){
				// null constructor

		}

		virtual ::core::Distance atomic_interaction_cutoff(  ) const {
				bp::override func_atomic_interaction_cutoff = this->get_override( "atomic_interaction_cutoff" );
				return func_atomic_interaction_cutoff(  );
		}

		virtual ::core::scoring::methods::EnergyMethodOP clone(  ) const {
				bp::override func_clone = this->get_override( "clone" );
				return func_clone(  );
		}

		virtual void eval_atom_derivative( ::core::id::AtomID const & arg0, ::core::pose::Pose const & arg1, ::core::scoring::ScoreFunction const & arg2, ::core::scoring::EnergyMap const & arg3, ::core::Vector & arg4, ::core::Vector & arg5 ) const  {
				if( bp::override func_eval_atom_derivative = this->get_override( "eval_atom_derivative" ) )
						func_eval_atom_derivative( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5) );
				else
						this->core::scoring::methods::EnergyMethod::eval_atom_derivative( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5) );
		}


		void default_eval_atom_derivative( ::core::id::AtomID const & arg0, ::core::pose::Pose const & arg1, ::core::scoring::ScoreFunction const & arg2, ::core::scoring::EnergyMap const & arg3, ::core::Vector & arg4, ::core::Vector & arg5 ) const  {
				core::scoring::methods::EnergyMethod::eval_atom_derivative( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5) );
		}

		virtual ::protocols::moves::Real eval_dof_derivative( ::core::id::DOF_ID const & arg0, ::core::id::TorsionID const & arg1, ::core::pose::Pose const & arg2, ::core::scoring::ScoreFunction const & arg3, ::core::scoring::EnergyMap const & arg4 ) const  {
				if( bp::override func_eval_dof_derivative = this->get_override( "eval_dof_derivative" ) )
						return func_eval_dof_derivative( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4) );
				else
						return this->core::scoring::methods::EnergyMethod::eval_dof_derivative( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4) );
		}


		::protocols::moves::Real default_eval_dof_derivative( ::core::id::DOF_ID const & arg0, ::core::id::TorsionID const & arg1, ::core::pose::Pose const & arg2, ::core::scoring::ScoreFunction const & arg3, ::core::scoring::EnergyMap const & arg4 ) const  {
				return core::scoring::methods::EnergyMethod::eval_dof_derivative( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4) );
		}

		virtual void finalize_total_energy( ::core::pose::Pose const & arg0, ::core::scoring::EnergyMap & arg1 ) const  {
				if( bp::override func_finalize_total_energy = this->get_override( "finalize_total_energy" ) )
						func_finalize_total_energy( boost::ref(arg0), boost::ref(arg1) );
				else
						this->core::scoring::methods::EnergyMethod::finalize_total_energy( boost::ref(arg0), boost::ref(arg1) );
		}


		void default_finalize_total_energy( ::core::pose::Pose const & arg0, ::core::scoring::EnergyMap & arg1 ) const  {
				core::scoring::methods::EnergyMethod::finalize_total_energy( boost::ref(arg0), boost::ref(arg1) );
		}

		virtual void indicate_required_context_graphs( ::utility::vector1<bool, std::allocator<bool> > & context_graphs_required ) const {
				bp::override func_indicate_required_context_graphs = this->get_override( "indicate_required_context_graphs" );
				func_indicate_required_context_graphs( boost::ref(context_graphs_required) );
		}

		virtual ::core::scoring::methods::EnergyMethodType method_type(  ) const {
				bp::override func_method_type = this->get_override( "method_type" );
				return func_method_type(  );
		}

		virtual void prepare_rotamers_for_packing( ::core::pose::Pose const & arg0, ::core::pack::rotamer_set::RotamerSet & arg1 ) const  {
				if( bp::override func_prepare_rotamers_for_packing = this->get_override( "prepare_rotamers_for_packing" ) )
						func_prepare_rotamers_for_packing( boost::ref(arg0), boost::ref(arg1) );
				else
						this->core::scoring::methods::EnergyMethod::prepare_rotamers_for_packing( boost::ref(arg0), boost::ref(arg1) );
		}


		void default_prepare_rotamers_for_packing( ::core::pose::Pose const & arg0, ::core::pack::rotamer_set::RotamerSet & arg1 ) const  {
				core::scoring::methods::EnergyMethod::prepare_rotamers_for_packing( boost::ref(arg0), boost::ref(arg1) );
		}

		virtual void setup_for_derivatives( ::core::pose::Pose & arg0, ::core::scoring::ScoreFunction const & arg1 ) const  {
				if( bp::override func_setup_for_derivatives = this->get_override( "setup_for_derivatives" ) )
						func_setup_for_derivatives( boost::ref(arg0), boost::ref(arg1) );
				else
						this->core::scoring::methods::EnergyMethod::setup_for_derivatives( boost::ref(arg0), boost::ref(arg1) );
		}


		void default_setup_for_derivatives( ::core::pose::Pose & arg0, ::core::scoring::ScoreFunction const & arg1 ) const  {
				core::scoring::methods::EnergyMethod::setup_for_derivatives( boost::ref(arg0), boost::ref(arg1) );
		}

		virtual void setup_for_minimizing( ::core::pose::Pose & arg0, ::core::scoring::ScoreFunction const & arg1, ::core::optimization::MinimizerMap const & arg2 ) const  {
				if( bp::override func_setup_for_minimizing = this->get_override( "setup_for_minimizing" ) )
						func_setup_for_minimizing( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2) );
				else
						this->core::scoring::methods::EnergyMethod::setup_for_minimizing( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2) );
		}


		void default_setup_for_minimizing( ::core::pose::Pose & arg0, ::core::scoring::ScoreFunction const & arg1, ::core::optimization::MinimizerMap const & arg2 ) const  {
				core::scoring::methods::EnergyMethod::setup_for_minimizing( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2) );
		}

		virtual void setup_for_packing( ::core::pose::Pose & arg0 ) const  {
				if( bp::override func_setup_for_packing = this->get_override( "setup_for_packing" ) )
						func_setup_for_packing( boost::ref(arg0) );
				else
						this->core::scoring::methods::EnergyMethod::setup_for_packing( boost::ref(arg0) );
		}


		void default_setup_for_packing( ::core::pose::Pose & arg0 ) const  {
				core::scoring::methods::EnergyMethod::setup_for_packing( boost::ref(arg0) );
		}

		virtual void setup_for_scoring( ::core::pose::Pose & arg0, ::core::scoring::ScoreFunction const & arg1 ) const  {
				if( bp::override func_setup_for_scoring = this->get_override( "setup_for_scoring" ) )
						func_setup_for_scoring( boost::ref(arg0), boost::ref(arg1) );
				else
						this->core::scoring::methods::EnergyMethod::setup_for_scoring( boost::ref(arg0), boost::ref(arg1) );
		}


		void default_setup_for_scoring( ::core::pose::Pose & arg0, ::core::scoring::ScoreFunction const & arg1 ) const  {
				core::scoring::methods::EnergyMethod::setup_for_scoring( boost::ref(arg0), boost::ref(arg1) );
		}

		virtual void update_residue_for_packing( ::core::pose::Pose & arg0, ::size_t arg1 ) const  {
				if( bp::override func_update_residue_for_packing = this->get_override( "update_residue_for_packing" ) )
						func_update_residue_for_packing( boost::ref(arg0), arg1 );
				else
						this->core::scoring::methods::EnergyMethod::update_residue_for_packing( boost::ref(arg0), arg1 );
		}


		void default_update_residue_for_packing( ::core::pose::Pose & arg0, ::size_t arg1 ) const  {
				core::scoring::methods::EnergyMethod::update_residue_for_packing( boost::ref(arg0), arg1 );
		}

};

class PythonCreator : public core::scoring::methods::EnergyMethodCreator
{
public:
	typedef core::scoring::methods::EnergyMethodOP EnergyMethodOP;
	typedef core::scoring::ScoreTypes ScoreTypes;

public:
	EnergyMethodOP
	create_energy_method( core::scoring::methods::EnergyMethodOptions & ) { return 0; }

	ScoreTypes
	score_types_for_method() {
		ScoreTypes sts;
		sts.push_back( core::scoring::python );
		return sts;
	}

};

struct ContextIndependentOneBodyEnergy_wrapper : core::scoring::methods::ContextIndependentOneBodyEnergy, bp::wrapper< core::scoring::methods::ContextIndependentOneBodyEnergy > {

		ContextIndependentOneBodyEnergy_wrapper()
		: core::scoring::methods::ContextIndependentOneBodyEnergy()
			, bp::wrapper< core::scoring::methods::ContextIndependentOneBodyEnergy >(){
				// null constructor
				using namespace core::scoring;
				set_score_types( new PythonCreator );
		}

		virtual ::core::scoring::methods::EnergyMethodType method_type(  ) const  {
				if( bp::override func_method_type = this->get_override( "method_type" ) )
						return func_method_type(  );
				else
						return this->core::scoring::methods::ContextIndependentOneBodyEnergy::method_type(  );
		}


		::core::scoring::methods::EnergyMethodType default_method_type(  ) const  {
				return core::scoring::methods::ContextIndependentOneBodyEnergy::method_type( );
		}

		virtual void residue_energy( ::core::conformation::Residue const & rsd, ::core::scoring::EnergyMap & emap ) const {
				bp::override func_residue_energy = this->get_override( "residue_energy" );
				func_residue_energy( boost::ref(rsd), boost::ref(emap) );
		}

		virtual ::core::Distance atomic_interaction_cutoff(  ) const {
				bp::override func_atomic_interaction_cutoff = this->get_override( "atomic_interaction_cutoff" );
				return func_atomic_interaction_cutoff(  );
		}

		virtual ::core::scoring::methods::EnergyMethodOP clone(  ) const {
				bp::override func_clone = this->get_override( "clone" );
				return func_clone(  );
		}

		virtual void indicate_required_context_graphs( ::utility::vector1<bool, std::allocator<bool> > & context_graphs_required ) const {
				bp::override func_indicate_required_context_graphs = this->get_override( "indicate_required_context_graphs" );
				func_indicate_required_context_graphs( boost::ref(context_graphs_required) );
		}

};

struct ContextIndependentTwoBodyEnergy_wrapper : core::scoring::methods::ContextIndependentTwoBodyEnergy, bp::wrapper< core::scoring::methods::ContextIndependentTwoBodyEnergy > {

		ContextIndependentTwoBodyEnergy_wrapper()
		: core::scoring::methods::ContextIndependentTwoBodyEnergy()
			, bp::wrapper< core::scoring::methods::ContextIndependentTwoBodyEnergy >(){
				// null constructor

		}

		virtual void bump_energy_backbone( ::core::conformation::Residue const & arg0, ::core::conformation::Residue const & arg1, ::core::pose::Pose const & arg2, ::core::scoring::ScoreFunction const & arg3, ::core::scoring::EnergyMap & arg4 ) const  {
				if( bp::override func_bump_energy_backbone = this->get_override( "bump_energy_backbone" ) )
						func_bump_energy_backbone( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4) );
				else
						this->core::scoring::methods::ContextIndependentTwoBodyEnergy::bump_energy_backbone( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4) );
		}


		void default_bump_energy_backbone( ::core::conformation::Residue const & arg0, ::core::conformation::Residue const & arg1, ::core::pose::Pose const & arg2, ::core::scoring::ScoreFunction const & arg3, ::core::scoring::EnergyMap & arg4 ) const  {
				core::scoring::methods::ContextIndependentTwoBodyEnergy::bump_energy_backbone( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4) );
		}

		virtual void bump_energy_full( ::core::conformation::Residue const & arg0, ::core::conformation::Residue const & arg1, ::core::pose::Pose const & arg2, ::core::scoring::ScoreFunction const & arg3, ::core::scoring::EnergyMap & arg4 ) const  {
				if( bp::override func_bump_energy_full = this->get_override( "bump_energy_full" ) )
						func_bump_energy_full( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4) );
				else
						this->core::scoring::methods::ContextIndependentTwoBodyEnergy::bump_energy_full( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4) );
		}


		void default_bump_energy_full( ::core::conformation::Residue const & arg0, ::core::conformation::Residue const & arg1, ::core::pose::Pose const & arg2, ::core::scoring::ScoreFunction const & arg3, ::core::scoring::EnergyMap & arg4 ) const  {
				core::scoring::methods::ContextIndependentTwoBodyEnergy::bump_energy_full( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4) );
		}

		virtual void eval_atom_derivative( ::core::id::AtomID const & arg0, ::core::pose::Pose const & arg1, ::core::scoring::ScoreFunction const & arg2, ::core::scoring::EnergyMap const & arg3, ::core::Vector & arg4, ::core::Vector & arg5 ) const  {
				if( bp::override func_eval_atom_derivative = this->get_override( "eval_atom_derivative" ) )
						func_eval_atom_derivative( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5) );
				else
						this->core::scoring::methods::ContextIndependentTwoBodyEnergy::eval_atom_derivative( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5) );
		}


		void default_eval_atom_derivative( ::core::id::AtomID const & arg0, ::core::pose::Pose const & arg1, ::core::scoring::ScoreFunction const & arg2, ::core::scoring::EnergyMap const & arg3, ::core::Vector & arg4, ::core::Vector & arg5 ) const  {
				core::scoring::methods::ContextIndependentTwoBodyEnergy::eval_atom_derivative( boost::ref(arg0), boost::ref(arg1), boost::ref(arg2), boost::ref(arg3), boost::ref(arg4), boost::ref(arg5) );
		}

		virtual void evaluate_rotamer_background_energies( ::core::pack::rotamer_set::RotamerSet const & set, ::core::conformation::Residue const & residue, ::core::pose::Pose const & pose, ::core::scoring::ScoreFunction const & sfxn, ::core::scoring::EnergyMap const & weights, ::utility::vector1<double, std::allocator<double> > & energy_vector ) const  {
				if( bp::override func_evaluate_rotamer_background_energies = this->get_override( "evaluate_rotamer_background_energies" ) )
						func_evaluate_rotamer_background_energies( boost::ref(set), boost::ref(residue), boost::ref(pose), boost::ref(sfxn), boost::ref(weights), boost::ref(energy_vector) );
				else
						this->core::scoring::methods::ContextIndependentTwoBodyEnergy::evaluate_rotamer_background_energies( boost::ref(set), boost::ref(residue), boost::ref(pose), boost::ref(sfxn), boost::ref(weights), boost::ref(energy_vector) );
		}


		void default_evaluate_rotamer_background_energies( ::core::pack::rotamer_set::RotamerSet const & set, ::core::conformation::Residue const & residue, ::core::pose::Pose const & pose, ::core::scoring::ScoreFunction const & sfxn, ::core::scoring::EnergyMap const & weights, ::utility::vector1<double, std::allocator<double> > & energy_vector ) const  {
				core::scoring::methods::ContextIndependentTwoBodyEnergy::evaluate_rotamer_background_energies( boost::ref(set), boost::ref(residue), boost::ref(pose), boost::ref(sfxn), boost::ref(weights), boost::ref(energy_vector) );
		}

		virtual void evaluate_rotamer_pair_energies( ::core::pack::rotamer_set::RotamerSet const & set1, ::core::pack::rotamer_set::RotamerSet const & set2, ::core::pose::Pose const & pose, ::core::scoring::ScoreFunction const & sfxn, ::core::scoring::EnergyMap const & weights, ::ObjexxFCL::FArray2D<double> & energy_table ) const  {
				if( bp::override func_evaluate_rotamer_pair_energies = this->get_override( "evaluate_rotamer_pair_energies" ) )
						func_evaluate_rotamer_pair_energies( boost::ref(set1), boost::ref(set2), boost::ref(pose), boost::ref(sfxn), boost::ref(weights), boost::ref(energy_table) );
				else
						this->core::scoring::methods::ContextIndependentTwoBodyEnergy::evaluate_rotamer_pair_energies( boost::ref(set1), boost::ref(set2), boost::ref(pose), boost::ref(sfxn), boost::ref(weights), boost::ref(energy_table) );
		}


		void default_evaluate_rotamer_pair_energies( ::core::pack::rotamer_set::RotamerSet const & set1, ::core::pack::rotamer_set::RotamerSet const & set2, ::core::pose::Pose const & pose, ::core::scoring::ScoreFunction const & sfxn, ::core::scoring::EnergyMap const & weights, ::ObjexxFCL::FArray2D<double> & energy_table ) const  {
				core::scoring::methods::ContextIndependentTwoBodyEnergy::evaluate_rotamer_pair_energies( boost::ref(set1), boost::ref(set2), boost::ref(pose), boost::ref(sfxn), boost::ref(weights), boost::ref(energy_table) );
		}

		virtual ::core::scoring::methods::EnergyMethodType method_type(  ) const  {
				if( bp::override func_method_type = this->get_override( "method_type" ) )
						return func_method_type(  );
				else
						return this->core::scoring::methods::ContextIndependentTwoBodyEnergy::method_type(  );
		}


		::core::scoring::methods::EnergyMethodType default_method_type(  ) const  {
				return core::scoring::methods::ContextIndependentTwoBodyEnergy::method_type( );
		}

		virtual void residue_pair_energy( ::core::conformation::Residue const & rsd1, ::core::conformation::Residue const & rsd2, ::core::pose::Pose const & pose, ::core::scoring::ScoreFunction const & sfxn, ::core::scoring::EnergyMap & emap ) const {
				bp::override func_residue_pair_energy = this->get_override( "residue_pair_energy" );
				func_residue_pair_energy( boost::ref(rsd1), boost::ref(rsd2), boost::ref(pose), boost::ref(sfxn), boost::ref(emap) );
		}

		virtual ::core::Distance atomic_interaction_cutoff(  ) const {
				bp::override func_atomic_interaction_cutoff = this->get_override( "atomic_interaction_cutoff" );
				return func_atomic_interaction_cutoff(  );
		}

		virtual ::core::scoring::methods::EnergyMethodOP clone(  ) const {
				bp::override func_clone = this->get_override( "clone" );
				return func_clone(  );
		}

		virtual void indicate_required_context_graphs( ::utility::vector1<bool, std::allocator<bool> > & context_graphs_required ) const {
				bp::override func_indicate_required_context_graphs = this->get_override( "indicate_required_context_graphs" );
				func_indicate_required_context_graphs( boost::ref(context_graphs_required) );
		}

};

struct ClassicRelax_wrapper : protocols::ClassicRelax, bp::wrapper< protocols::ClassicRelax > {

		ClassicRelax_wrapper(protocols::ClassicRelax const & arg )
		: protocols::ClassicRelax( arg )
			, bp::wrapper< protocols::ClassicRelax >(){
				// copy constructor

		}

		ClassicRelax_wrapper(::core::scoring::ScoreFunctionOP _scorefxn, ::core::pose::Pose & _pose )
		: protocols::ClassicRelax( _scorefxn, boost::ref(_pose) )
			, bp::wrapper< protocols::ClassicRelax >(){
				// constructor

		}

		virtual void run(  ) {
				if( bp::override func_run = this->get_override( "run" ) )
						func_run(  );
				else
						this->protocols::ClassicRelax::run(  );
		}


		void default_run(  ) {
				protocols::ClassicRelax::run( );
		}

};

struct Mover_wrapper : protocols::moves::Mover, bp::wrapper< protocols::moves::Mover > {

		Mover_wrapper(::std::string const & type_in )
		: protocols::moves::Mover( type_in )
			, bp::wrapper< protocols::moves::Mover >(){
				// constructor

		}

		virtual void apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const {
				bp::override func_apply = this->get_override( "apply" );
				func_apply( boost::ref(pose), boost::ref(mm) );
		}

		void set_type( ::std::string const & new_type ) const {
				protocols::moves::Mover::set_type( new_type );
		}

};

struct MoveSet_wrapper : protocols::moves::MoveSet, bp::wrapper< protocols::moves::MoveSet > {

		MoveSet_wrapper(protocols::moves::MoveSet const & arg )
		: protocols::moves::MoveSet( arg )
			, bp::wrapper< protocols::moves::MoveSet >(){
				// copy constructor

		}

		MoveSet_wrapper( )
		: protocols::moves::MoveSet( )
			, bp::wrapper< protocols::moves::MoveSet >(){
				// null constructor

		}

		virtual void apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
				if( bp::override func_apply = this->get_override( "apply" ) )
						func_apply( boost::ref(pose), boost::ref(mm) );
				else
						this->protocols::moves::MoveSet::apply( boost::ref(pose), boost::ref(mm) );
		}


		void default_apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
				protocols::moves::MoveSet::apply( boost::ref(pose), boost::ref(mm) );
		}

		void set_type( ::std::string const & new_type ) const {
				protocols::moves::Mover::set_type( new_type );
		}

};

struct PackMover_wrapper : protocols::moves::PackMover, bp::wrapper< protocols::moves::PackMover > {

		PackMover_wrapper(protocols::moves::PackMover const & arg )
		: protocols::moves::PackMover( arg )
			, bp::wrapper< protocols::moves::PackMover >(){
				// copy constructor

		}

		PackMover_wrapper(::core::scoring::ScoreFunctionOP const & scorefxn_in, ::core::pack::task::PackerTask const & task_in, ::protocols::moves::PackType const & pack_type_in=::protocols::moves::PackType_off )
		: protocols::moves::PackMover( boost::ref(scorefxn_in), boost::ref(task_in), pack_type_in )
			, bp::wrapper< protocols::moves::PackMover >(){
				// constructor

		}

		virtual void apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & arg1 ) const  {
				if( bp::override func_apply = this->get_override( "apply" ) )
						func_apply( boost::ref(pose), boost::ref(arg1) );
				else
						this->protocols::moves::PackMover::apply( boost::ref(pose), boost::ref(arg1) );
		}


		void default_apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & arg1 ) const  {
				protocols::moves::PackMover::apply( boost::ref(pose), boost::ref(arg1) );
		}

		void set_type( ::std::string const & new_type ) const {
				protocols::moves::Mover::set_type( new_type );
		}

};

struct RigidBodyMover_wrapper : protocols::moves::RigidBodyMover, bp::wrapper< protocols::moves::RigidBodyMover > {

		RigidBodyMover_wrapper(protocols::moves::RigidBodyMover const & arg )
		: protocols::moves::RigidBodyMover( arg )
			, bp::wrapper< protocols::moves::RigidBodyMover >(){
				// copy constructor

		}

		RigidBodyMover_wrapper( )
		: protocols::moves::RigidBodyMover( )
			, bp::wrapper< protocols::moves::RigidBodyMover >(){
				// null constructor

		}

		virtual void apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
				if( bp::override func_apply = this->get_override( "apply" ) )
						func_apply( boost::ref(pose), boost::ref(mm) );
				else
						this->protocols::moves::RigidBodyMover::apply( boost::ref(pose), boost::ref(mm) );
		}


		void default_apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
				protocols::moves::RigidBodyMover::apply( boost::ref(pose), boost::ref(mm) );
		}

		void set_type( ::std::string const & new_type ) const {
				protocols::moves::Mover::set_type( new_type );
		}

};

struct RigidBodyPerturbMover_wrapper : protocols::moves::RigidBodyPerturbMover, bp::wrapper< protocols::moves::RigidBodyPerturbMover > {

		RigidBodyPerturbMover_wrapper(protocols::moves::RigidBodyPerturbMover const & arg )
		: protocols::moves::RigidBodyPerturbMover( arg )
			, bp::wrapper< protocols::moves::RigidBodyPerturbMover >(){
				// copy constructor

		}

		RigidBodyPerturbMover_wrapper()
		: protocols::moves::RigidBodyPerturbMover()
			, bp::wrapper< protocols::moves::RigidBodyPerturbMover >(){
				// null constructor

		}

		void set_type( ::std::string const & new_type ) const {
				protocols::moves::Mover::set_type( new_type );
		}

};

struct ShearMover_wrapper : protocols::moves::ShearMover, bp::wrapper< protocols::moves::ShearMover > {

		ShearMover_wrapper(protocols::moves::ShearMover const & arg )
		: protocols::moves::ShearMover( arg )
			, bp::wrapper< protocols::moves::ShearMover >(){
				// copy constructor

		}

		ShearMover_wrapper( )
		: protocols::moves::ShearMover( )
			, bp::wrapper< protocols::moves::ShearMover >(){
				// null constructor

		}

		virtual void apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
				if( bp::override func_apply = this->get_override( "apply" ) )
						func_apply( boost::ref(pose), boost::ref(mm) );
				else
						this->protocols::moves::ShearMover::apply( boost::ref(pose), boost::ref(mm) );
		}


		void default_apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
				protocols::moves::ShearMover::apply( boost::ref(pose), boost::ref(mm) );
		}

		void set_type( ::std::string const & new_type ) const {
				protocols::moves::Mover::set_type( new_type );
		}

};

struct SmallMover_wrapper : protocols::moves::SmallMover, bp::wrapper< protocols::moves::SmallMover > {

		SmallMover_wrapper(protocols::moves::SmallMover const & arg )
		: protocols::moves::SmallMover( arg )
			, bp::wrapper< protocols::moves::SmallMover >(){
				// copy constructor

		}

		SmallMover_wrapper( )
		: protocols::moves::SmallMover( )
			, bp::wrapper< protocols::moves::SmallMover >(){
				// null constructor

		}

		virtual void apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
				if( bp::override func_apply = this->get_override( "apply" ) )
						func_apply( boost::ref(pose), boost::ref(mm) );
				else
						this->protocols::moves::SmallMover::apply( boost::ref(pose), boost::ref(mm) );
		}


		void default_apply( ::core::pose::Pose & pose, ::core::kinematics::MoveMap const & mm ) const  {
				protocols::moves::SmallMover::apply( boost::ref(pose), boost::ref(mm) );
		}

		void set_type( ::std::string const & new_type ) const {
				protocols::moves::Mover::set_type( new_type );
		}

};

#include "boost/python/suite/indexing/indexing_suite.hpp"
	#include "boost/python/suite/indexing/vector_indexing_suite.hpp"
	#include "boost/python/suite/indexing/map_indexing_suite.hpp"

BOOST_PYTHON_MODULE(_test_relax){
		bp::enum_< core::chemical::AA>("AA")
				.value("aa_ala", core::chemical::aa_ala)
				.value("aa_cys", core::chemical::aa_cys)
				.value("aa_asp", core::chemical::aa_asp)
				.value("aa_glu", core::chemical::aa_glu)
				.value("aa_phe", core::chemical::aa_phe)
				.value("aa_gly", core::chemical::aa_gly)
				.value("aa_his", core::chemical::aa_his)
				.value("aa_ile", core::chemical::aa_ile)
				.value("aa_lys", core::chemical::aa_lys)
				.value("aa_leu", core::chemical::aa_leu)
				.value("aa_met", core::chemical::aa_met)
				.value("aa_asn", core::chemical::aa_asn)
				.value("aa_pro", core::chemical::aa_pro)
				.value("aa_gln", core::chemical::aa_gln)
				.value("aa_arg", core::chemical::aa_arg)
				.value("aa_ser", core::chemical::aa_ser)
				.value("aa_thr", core::chemical::aa_thr)
				.value("aa_val", core::chemical::aa_val)
				.value("aa_trp", core::chemical::aa_trp)
				.value("aa_tyr", core::chemical::aa_tyr)
				.value("num_canonical_aas", core::chemical::num_canonical_aas)
				.value("na_gua", core::chemical::na_gua)
				.value("na_ade", core::chemical::na_ade)
				.value("na_cyt", core::chemical::na_cyt)
				.value("na_thy", core::chemical::na_thy)
				.value("na_rgu", core::chemical::na_rgu)
				.value("na_rad", core::chemical::na_rad)
				.value("na_rcy", core::chemical::na_rcy)
				.value("na_ura", core::chemical::na_ura)
				.value("aa_unk", core::chemical::aa_unk)
				.value("num_aa_types", core::chemical::num_aa_types)
				.export_values()
				;

		bp::enum_< core::pack::rotamer_set::BumpSelectorDecision>("BumpSelectorDecision")
				.value("KEEP_ROTAMER", core::pack::rotamer_set::KEEP_ROTAMER)
				.value("DELETE_ROTAMER", core::pack::rotamer_set::DELETE_ROTAMER)
				.value("DELETE_PREVIOUS_ROTAMER", core::pack::rotamer_set::DELETE_PREVIOUS_ROTAMER)
				.export_values()
				;

		bp::enum_< core::scoring::etable::CPCrossoverBehavior>("CPCrossoverBehavior")
				.value("CP_CROSSOVER_3", core::scoring::etable::CP_CROSSOVER_3)
				.value("CP_CROSSOVER_4", core::scoring::etable::CP_CROSSOVER_4)
				.value("nCPCrossoverBehaviors", core::scoring::etable::nCPCrossoverBehaviors)
				.export_values()
				;

		bp::enum_< core::scoring::etable::CPResidueConnectionType>("CPResidueConnectionType")
				.value("CP_NO_BONDS", core::scoring::etable::CP_NO_BONDS)
				.value("CP_ONE_INTERRESIDUE_BOND", core::scoring::etable::CP_ONE_INTERRESIDUE_BOND)
				.value("nCPResidueConnectionTypes", core::scoring::etable::nCPResidueConnectionTypes)
				.export_values()
				;

		bp::enum_< core::scoring::CachedDataType>("CachedDataType")
				.value("ETABLE_NBLIST", core::scoring::ETABLE_NBLIST)
				.value("HBOND_SET", core::scoring::HBOND_SET)
				.value("ETABLE_TRIE_COLLECTION", core::scoring::ETABLE_TRIE_COLLECTION)
				.export_values()
				;

		bp::enum_< core::scoring::ContextGraphType>("ContextGraphType")
				.value("ten_A_neighbor_graph", core::scoring::ten_A_neighbor_graph)
				.value("centroid_neighbor_graph", core::scoring::centroid_neighbor_graph)
				.value("num_context_graph_types", core::scoring::num_context_graph_types)
				.export_values()
				;

		bp::enum_< core::id::DOF_Type>("DOF_Type")
				.value("PHI", core::id::PHI)
				.value("THETA", core::id::THETA)
				.value("D", core::id::D)
				.value("RB1", core::id::RB1)
				.value("RB2", core::id::RB2)
				.value("RB3", core::id::RB3)
				.value("RB4", core::id::RB4)
				.value("RB5", core::id::RB5)
				.value("RB6", core::id::RB6)
				.export_values()
				;

		bp::enum_< core::scoring::methods::EnergyMethodType>("EnergyMethodType")
				.value("ci_2b", core::scoring::methods::ci_2b)
				.value("cd_2b", core::scoring::methods::cd_2b)
				.value("ci_1b", core::scoring::methods::ci_1b)
				.value("n_energy_method_types", core::scoring::methods::n_energy_method_types)
				.export_values()
				;

		bp::enum_< core::scoring::methods::EnergyMethods>("EnergyMethods")
				.value("etable_method", core::scoring::methods::etable_method)
				.value("dunbrack_method", core::scoring::methods::dunbrack_method)
				.value("hbond_method", core::scoring::methods::hbond_method)
				.value("pair_e_method", core::scoring::methods::pair_e_method)
				.value("ramachandran_method", core::scoring::methods::ramachandran_method)
				.value("n_energy_methods", core::scoring::methods::n_energy_methods)
				.export_values()
				;

		bp::enum_< core::pack::task::ExtraRotSample>("ExtraRotSample")
				.value("NO_EXTRA_CHI_SAMPLES", core::pack::task::NO_EXTRA_CHI_SAMPLES)
				.value("EX_ONE_STDDEV", core::pack::task::EX_ONE_STDDEV)
				.value("EX_ONE_HALF_STEP_STDDEV", core::pack::task::EX_ONE_HALF_STEP_STDDEV)
				.value("EX_TWO_FULL_STEP_STDDEVS", core::pack::task::EX_TWO_FULL_STEP_STDDEVS)
				.value("EX_TWO_HALF_STEP_STDDEVS", core::pack::task::EX_TWO_HALF_STEP_STDDEVS)
				.value("EX_FOUR_HALF_STEP_STDDEVS", core::pack::task::EX_FOUR_HALF_STEP_STDDEVS)
				.value("EX_THREE_THIRD_STEP_STDDEVS", core::pack::task::EX_THREE_THIRD_STEP_STDDEVS)
				.value("EX_SIX_QUARTER_STEP_STDDEVS", core::pack::task::EX_SIX_QUARTER_STEP_STDDEVS)
				.value("ExtraRotSampleCardinality", core::pack::task::ExtraRotSampleCardinality)
				.export_values()
				;

		bp::enum_< core::scoring::hbonds::HBAccChemType>("HBAccChemType")
				.value("hbacc_NONE", core::scoring::hbonds::hbacc_NONE)
 		                .value("hbacc_PBA", core::scoring::hbonds::hbacc_PBA)
		     	        .value("hbacc_CXA", core::scoring::hbonds::hbacc_CXA)
		  		.value("hbacc_CXL", core::scoring::hbonds::hbacc_CXL)
		  		.value("hbacc_IMD", core::scoring::hbonds::hbacc_IMD)
		  		.value("hbacc_IME", core::scoring::hbonds::hbacc_IME)
		  		.value("hbacc_AHX", core::scoring::hbonds::hbacc_AHX)
		  		.value("hbacc_HXL", core::scoring::hbonds::hbacc_HXL)
		  		.value("hbacc_H2O", core::scoring::hbonds::hbacc_H2O)
		  		.value("hbacc_MAX", core::scoring::hbonds::hbacc_MAX)
				;

		bp::enum_< core::scoring::hbonds::HBDonChemType>("HBDonChemType")
                                .value("hbdon_NONE", core::scoring::hbonds::hbdon_NONE)
				.value("hbdon_PBA", core::scoring::hbonds::hbdon_PBA)
				.value("hbdon_CXA", core::scoring::hbonds::hbdon_CXA)
				.value("hbdon_IMD", core::scoring::hbonds::hbdon_IMD)
				.value("hbdon_IME", core::scoring::hbonds::hbdon_IME)
				.value("hbdon_IND", core::scoring::hbonds::hbdon_IND)
				.value("hbdon_AMO", core::scoring::hbonds::hbdon_AMO)
				.value("hbdon_GDE", core::scoring::hbonds::hbdon_GDE)
				.value("hbdon_GDH", core::scoring::hbonds::hbdon_GDH)
				.value("hbdon_AHX", core::scoring::hbonds::hbdon_AHX)
				.value("hbdon_HXL", core::scoring::hbonds::hbdon_HXL)
				.value("hbdon_PHT", core::scoring::hbonds::hbdon_PHT)
				.value("hbdon_H2O", core::scoring::hbonds::hbdon_H2O)
				.value("hbdon_MAX", core::scoring::hbonds::hbdon_MAX)
				.export_values()
				;

		bp::enum_< core::scoring::hbonds::HBEvalType>("HBEvalType")
		  		.value("hbe_NONE", core::scoring::hbonds::hbe_NONE)
		  		.value("hbe_dPBAaPBAsepM1", core::scoring::hbonds::hbe_dPBAaPBAsepM1)
		  		.value("hbe_dPBAaPBAsepP1",core::scoring::hbonds::hbd_dPBAaPBAsepP1)
		  		.value("hbe_dPBAaPBAsepP2turn", core::scoring::hbonds::hbe_dPBAaPBAP2turn)
		  		.value("hbe_dPBAaPBAsepP3turn", core::scoring::hbonds::hbe_dPBAaPBAsepP3turn)
		  		.value("hbe_dPBAaPBAsepP4helix", core::scoring::hbonds::hbe_dPBAaPBAsepP4helix)
		  		.value("hbe_dPBAaPBAsepother", core::scoring::hbonds::hbe_dPBAaPBAsepother)
            			.value("hbe_dCXAaPBA", core::scoring::hbonds::hbe_dCXAaPBA)
            			.value("hbe_dIMDaPBA", core::scoring::hbonds::hbe_dIMDaPBA)
            			.value("hbe_dIMEaPBA", core::scoring::hbonds::hbe_dIMEaPBA)
            			.value("hbe_dINDaPBA", core::scoring::hbonds::hbe_dINDaPBA)
            			.value("hbe_dAMOaPBA", core::scoring::hbonds::hbe_dAMOaPBA)
            			.value("hbe_dGDEaPBA", core::scoring::hbonds::hbe_dGDEaPBA)
            			.value("hbe_dGDHaPBA", core::scoring::hbonds::hbe_dGDHaPBA)
            			.value("hbe_dAHXaPBA", core::scoring::hbonds::hbe_dAHXaPBA)
            			.value("hbe_dHXLaPBA", core::scoring::hbonds::hbe_dHXLaPBA)
            			.value("hbe_dPHTaPBA", core::scoring::hbonds::hbe_dPHTaPBA)
            			.value("hbe_dH2OaPBA", core::scoring::hbonds::hbe_dH2OaPBA)
            			.value("hbe_dPBAaCXA", core::scoring::hbonds::hbe_dPBAaCXA)
            			.value("hbe_dCXAaCXA", core::scoring::hbonds::hbe_dCXAaCXA)
            			.value("hbe_dIMDaCXA", core::scoring::hbonds::hbe_dIMDaCXA)
            			.value("hbe_dIMEaCXA", core::scoring::hbonds::hbe_dIMEaCXA)
            			.value("hbe_dINDaCXA", core::scoring::hbonds::hbe_dINDaCXA)
            			.value("hbe_dAMOaCXA", core::scoring::hbonds::hbe_dAMOaCXA)
            			.value("hbe_dGDEaCXA", core::scoring::hbonds::hbe_dGDEaCXA)
            			.value("hbe_dGDHaCXA", core::scoring::hbonds::hbe_dGDHaCXA)
            			.value("hbe_dAHXaCXA", core::scoring::hbonds::hbe_dAHXaCXA)
            			.value("hbe_dHXLaCXA", core::scoring::hbonds::hbe_dHXLaCXA)
            			.value("hbe_dPHTaCXA", core::scoring::hbonds::hbe_dPHTaCXA)
            			.value("hbe_dH2OaCXA", core::scoring::hbonds::hbe_dH2OaCXA)
            			.value("hbe_dPBAaCXL", core::scoring::hbonds::hbe_dPBAaCXL)
            			.value("hbe_dCXAaCXL", core::scoring::hbonds::hbe_dCXAaCXL)
            			.value("hbe_dIMDaCXL", core::scoring::hbonds::hbe_dIMDaCXL)
            			.value("hbe_dIMEaCXL", core::scoring::hbonds::hbe_dIMEaCXL)
            			.value("hbe_dINDaCXL", core::scoring::hbonds::hbe_dINDaCXL)
            			.value("hbe_dAMOaCXL", core::scoring::hbonds::hbe_dAMOaCXL)
            			.value("hbe_dGDEaCXL", core::scoring::hbonds::hbe_dGDEaCXL)
            			.value("hbe_dGDHaCXL", core::scoring::hbonds::hbe_dGDHaCXL)
            			.value("hbe_dAHXaCXL", core::scoring::hbonds::hbe_dAHXaCXL)
            			.value("hbe_dHXLaCXL", core::scoring::hbonds::hbe_dHXLaCXL)
            			.value("hbe_dPHTaCXL", core::scoring::hbonds::hbe_dPHTaCXL)
            			.value("hbe_dH2OaCXL", core::scoring::hbonds::hbe_dH2OaCXL)
            			.value("hbe_dPBAaIMD", core::scoring::hbonds::hbe_dPBAaIMD)
            			.value("hbe_dCXAaIMD", core::scoring::hbonds::hbe_dCXAaIMD)
            			.value("hbe_dIMDaIMD", core::scoring::hbonds::hbe_dIMDaIMD)
            			.value("hbe_dIMEaIMD", core::scoring::hbonds::hbe_dIMEaIMD)
            			.value("hbe_dINDaIMD", core::scoring::hbonds::hbe_dINDaIMD)
            			.value("hbe_dAMOaIMD", core::scoring::hbonds::hbe_dAMOaIMD)
            			.value("hbe_dGDEaIMD", core::scoring::hbonds::hbe_dGDEaIMD)
            			.value("hbe_dGDHaIMD", core::scoring::hbonds::hbe_dGDHaIMD)
            			.value("hbe_dAHXaIMD", core::scoring::hbonds::hbe_dAHXaIMD)
            			.value("hbe_dHXLaIMD", core::scoring::hbonds::hbe_dHXLaIMD)
            			.value("hbe_dPHTaIMD", core::scoring::hbonds::hbe_dPHTaIMD)
            			.value("hbe_dH2OaIMD", core::scoring::hbonds::hbe_dH2OaIMD)
            			.value("hbe_dPBAaIME", core::scoring::hbonds::hbe_dPBAaIME)
            			.value("hbe_dCXAaIME", core::scoring::hbonds::hbe_dCXAaIME)
            			.value("hbe_dIMDaIME", core::scoring::hbonds::hbe_dIMDaIME)
            			.value("hbe_dIMEaIME", core::scoring::hbonds::hbe_dIMEaIME)
            			.value("hbe_dINDaIME", core::scoring::hbonds::hbe_dINDaIME)
            			.value("hbe_dAMOaIME", core::scoring::hbonds::hbe_dAMOaIME)
            			.value("hbe_dGDEaIME", core::scoring::hbonds::hbe_dGDEaIME)
            			.value("hbe_dGDHaIME", core::scoring::hbonds::hbe_dGDHaIME)
            			.value("hbe_dAHXaIME", core::scoring::hbonds::hbe_dAHXaIME)
            			.value("hbe_dHXLaIME", core::scoring::hbonds::hbe_dHXLaIME)
            			.value("hbe_dPHTaIME", core::scoring::hbonds::hbe_dPHTaIME)
            			.value("hbe_dH2OaIME", core::scoring::hbonds::hbe_dH2OaIME)
            			.value("hbe_dPBAaAHX", core::scoring::hbonds::hbe_dPBAaAHX)
            			.value("hbe_dCXAaAHX", core::scoring::hbonds::hbe_dCXAaAHX)
            			.value("hbe_dIMDaAHX", core::scoring::hbonds::hbe_dIMDaAHX)
            			.value("hbe_dIMEaAHX", core::scoring::hbonds::hbe_dIMEaAHX)
            			.value("hbe_dINDaAHX", core::scoring::hbonds::hbe_dINDaAHX)
            			.value("hbe_dAMOaAHX", core::scoring::hbonds::hbe_dAMOaAHX)
            			.value("hbe_dGDEaAHX", core::scoring::hbonds::hbe_dGDEaAHX)
            			.value("hbe_dGDHaAHX", core::scoring::hbonds::hbe_dGDHaAHX)
            			.value("hbe_dAHXaAHX", core::scoring::hbonds::hbe_dAHXaAHX)
            			.value("hbe_dHXLaAHX", core::scoring::hbonds::hbe_dHXLaAHX)
            			.value("hbe_dPHTaAHX", core::scoring::hbonds::hbe_dPHTaAHX)
            			.value("hbe_dH2OaAHX", core::scoring::hbonds::hbe_dH2OaAHX)
            			.value("hbe_dPBAaHXL", core::scoring::hbonds::hbe_dPBAaHXL)
            			.value("hbe_dCXAaHXL", core::scoring::hbonds::hbe_dCXAaHXL)
            			.value("hbe_dIMDaHXL", core::scoring::hbonds::hbe_dIMDaHXL)
            			.value("hbe_dIMEaHXL", core::scoring::hbonds::hbe_dIMEaHXL)
            			.value("hbe_dINDaHXL", core::scoring::hbonds::hbe_dINDaHXL)
            			.value("hbe_dAMOaHXL", core::scoring::hbonds::hbe_dAMOaHXL)
            			.value("hbe_dGDEaHXL", core::scoring::hbonds::hbe_dGDEaHXL)
            			.value("hbe_dGDHaHXL", core::scoring::hbonds::hbe_dGDHaHXL)
            			.value("hbe_dAHXaHXL", core::scoring::hbonds::hbe_dAHXaHXL)
            			.value("hbe_dHXLaHXL", core::scoring::hbonds::hbe_dHXLaHXL)
            			.value("hbe_dPHTaHXL", core::scoring::hbonds::hbe_dPHTaHXL)
            			.value("hbe_dH2OaHXL", core::scoring::hbonds::hbe_dH2OaHXL)
            			.value("hbe_dPBAaH2O", core::scoring::hbonds::hbe_dPBAaH2O)
            			.value("hbe_dCXAaH2O", core::scoring::hbonds::hbe_dCXAaH2O)
            			.value("hbe_dIMDaH2O", core::scoring::hbonds::hbe_dIMDaH2O)
            			.value("hbe_dIMEaH2O", core::scoring::hbonds::hbe_dIMEaH2O)
            			.value("hbe_dINDaH2O", core::scoring::hbonds::hbe_dINDaH2O)
            			.value("hbe_dAMOaH2O", core::scoring::hbonds::hbe_dAMOaH2O)
            			.value("hbe_dGDEaH2O", core::scoring::hbonds::hbe_dGDEaH2O)
            			.value("hbe_dGDHaH2O", core::scoring::hbonds::hbe_dGDHaH2O)
            			.value("hbe_dAHXaH2O", core::scoring::hbonds::hbe_dAHXaH2O)
            			.value("hbe_dHXLaH2O", core::scoring::hbonds::hbe_dHXLaH2O)
            			.value("hbe_dPHTaH2O", core::scoring::hbonds::hbe_dPHTaH2O)
            			.value("hbe_dH2OaH2O", core::scoring::hbonds::hbe_dH2OaH2O)
                		.value("hbe_MAX", core::scoring::hbonds::hbe_MAX)
		                .export_values()
				;

		bp::enum_< core::scoring::hbonds::HBondWeightType>("HBondWeightType")
				.value("hbw_SR_BB", core::scoring::hbonds::hbw_SR_BB)
				.value("hbw_LR_BB", core::scoring::hbonds::hbw_LR_BB)
				.value("hbw_BB_SC", core::scoring::hbonds::hbw_BB_SC)
				.value("hbw_SC", core::scoring::hbonds::hbw_SC)
				.value("hbw_NONE", core::scoring::hbonds::hbw_NONE)
				.export_values()
				;

		bp::enum_< core::chemical::Hybridization>("Hybridization")
				.value("SP2_HYBRID", core::chemical::SP2_HYBRID)
				.value("SP3_HYBRID", core::chemical::SP3_HYBRID)
				.value("RING_HYBRID", core::chemical::RING_HYBRID)
				.value("UNKNOWN_HYBRID", core::chemical::UNKNOWN_HYBRID)
				.export_values()
				;

		bp::enum_< protocols::moves::PackType>("PackType")
				.value("PackType_off", protocols::moves::PackType_off)
				.value("PackType_rottrial", protocols::moves::PackType_rottrial)
				.value("PackType_full", protocols::moves::PackType_full)
				.export_values()
				;

		bp::enum_< core::util::ProfTag>("ProfTag")
				.value("TEST1", core::util::TEST1)
				.value("TEST2", core::util::TEST2)
				.value("TEST3", core::util::TEST3)
				.value("TEST4", core::util::TEST4)
				.value("TEST5", core::util::TEST5)
				.value("ATOM_TREE_UPDATE_INTERNAL_COORDS", core::util::ATOM_TREE_UPDATE_INTERNAL_COORDS)
				.value("ATOM_TREE_UPDATE_XYZ_COORDS", core::util::ATOM_TREE_UPDATE_XYZ_COORDS)
				.value("ROTAMER_TRIALS", core::util::ROTAMER_TRIALS)
				.value("PACK_ROTAMERS", core::util::PACK_ROTAMERS)
				.value("UPDATE_RESIDUE_NEIGHBORS", core::util::UPDATE_RESIDUE_NEIGHBORS)
				.value("SETUP_NBLIST", core::util::SETUP_NBLIST)
				.value("SCORE", core::util::SCORE)
				.value("CCD_CLOSE", core::util::CCD_CLOSE)
				.value("TOTAL", core::util::TOTAL)
				.value("n_prof_tags", core::util::n_prof_tags)
				.export_values()
				;

		bp::enum_< core::scoring::ProteinTorsion>("ProteinTorsion")
				.value("PHI", core::scoring::PHI)
				.value("PSI", core::scoring::PSI)
				.value("OMEGA", core::scoring::OMEGA)
				.value("CHI1", core::scoring::CHI1)
				.value("CHI2", core::scoring::CHI2)
				.value("CHI3", core::scoring::CHI3)
				.value("CHI4", core::scoring::CHI4)
				.value("protein_torsion_end", core::scoring::protein_torsion_end)
				.export_values()
				;

		bp::enum_< core::scoring::ScoreFunctionParameter>("ScoreFunctionParameter")
				.value("hydrogen_interaction_cutoff", core::scoring::hydrogen_interaction_cutoff)
				.export_values()
				;

		bp::enum_< core::scoring::ScoreFunctionVariant>("ScoreFunctionVariant")
				.value("loc_lj", core::scoring::loc_lj)
				.value("lk_sol", core::scoring::lk_sol)
				.export_values()
				;

		bp::enum_< core::scoring::ScoreType>("ScoreType")
				.value("fa_atr", core::scoring::fa_atr)
				.value("fa_rep", core::scoring::fa_rep)
				.value("fa_sol", core::scoring::fa_sol)
				.value("n_ci_2b_score_types", core::scoring::n_ci_2b_score_types)
				.value("fa_pair", core::scoring::fa_pair)
				.value("fa_plane", core::scoring::fa_plane)
				.value("hbond_sr_bb", core::scoring::hbond_sr_bb)
				.value("hbond_lr_bb", core::scoring::hbond_lr_bb)
				.value("hbond_bb_sc", core::scoring::hbond_bb_sc)
				.value("hbond_sc", core::scoring::hbond_sc)
				.value("rama", core::scoring::rama)
				.value("fa_dun", core::scoring::fa_dun)
				.value("rb_scorefxn", core::scoring::rb_scorefxn)
				.value("rb_env", core::scoring::rb_env)
				.value("rb_pair", core::scoring::rb_pair)
				.value("rb_cont", core::scoring::rb_cont)
				.value("rb_cont_cap", core::scoring::rb_cont_cap)
				.value("rb_vdw", core::scoring::rb_vdw)
				.value("rb_site_cst", core::scoring::rb_site_cst)
				.value("rb_fab", core::scoring::rb_fab)
				.value("rb_fab_cap", core::scoring::rb_fab_cap)
				.value("rb_wsl_elec", core::scoring::rb_wsl_elec)
				.value("mm_twist", core::scoring::mm_twist)
				.value("mm_bend", core::scoring::mm_bend)
				.value("mm_stretch", core::scoring::mm_stretch)
				.value("chainbreak", core::scoring::chainbreak)
				.value("python", core::scoring::python)
				.value("total_score", core::scoring::total_score)
				.value("n_score_types", core::scoring::n_score_types)
				.export_values()
				;

		bp::enum_< core::graph::Strategy>("Strategy")
				.value("NAIVE", core::graph::NAIVE)
				.value("AUTOMATIC", core::graph::AUTOMATIC)
				.value("OCTREE", core::graph::OCTREE)
				.export_values()
				;

		bp::enum_< core::id::TorsionType>("TorsionType")
				.value("BB", core::id::BB)
				.value("CHI", core::id::CHI)
				.value("JUMP", core::id::JUMP)
				.export_values()
				;

		bp::class_< core::chemical::AtomType, boost::noncopyable >( "AtomType", bp::init< std::string const &, char >(( bp::arg("name_in"), bp::arg("element_in") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"element"
						, (char ( ::core::chemical::AtomType::* )(  ) const)( &::core::chemical::AtomType::element ) )
				.def(
						"extra_parameter"
						, (::protocols::moves::Real ( ::core::chemical::AtomType::* )( int const ) const)( &::core::chemical::AtomType::extra_parameter )
						, ( bp::arg("index") ) )
				.def(
						"hybridization"
						, (::core::chemical::Hybridization const & ( ::core::chemical::AtomType::* )(  ) const)( &::core::chemical::AtomType::hybridization )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"is_acceptor"
						, (bool ( ::core::chemical::AtomType::* )(  ) const)( &::core::chemical::AtomType::is_acceptor ) )
				.def(
						"is_donor"
						, (bool ( ::core::chemical::AtomType::* )(  ) const)( &::core::chemical::AtomType::is_donor ) )
				.def(
						"is_h2o"
						, (bool ( ::core::chemical::AtomType::* )(  ) const)( &::core::chemical::AtomType::is_h2o ) )
				.def(
						"is_heavyatom"
						, (bool ( ::core::chemical::AtomType::* )(  ) const)( &::core::chemical::AtomType::is_heavyatom ) )
				.def(
						"is_hydrogen"
						, (bool ( ::core::chemical::AtomType::* )(  ) const)( &::core::chemical::AtomType::is_hydrogen ) )
				.def(
						"is_polar_hydrogen"
						, (bool ( ::core::chemical::AtomType::* )(  ) const)( &::core::chemical::AtomType::is_polar_hydrogen ) )
				.def(
						"lj_radius"
						, (::protocols::moves::Real ( ::core::chemical::AtomType::* )(  ) const)( &::core::chemical::AtomType::lj_radius ) )
				.def(
						"lj_wdepth"
						, (::protocols::moves::Real ( ::core::chemical::AtomType::* )(  ) const)( &::core::chemical::AtomType::lj_wdepth ) )
				.def(
						"lk_dgfree"
						, (::protocols::moves::Real ( ::core::chemical::AtomType::* )(  ) const)( &::core::chemical::AtomType::lk_dgfree ) )
				.def(
						"lk_lambda"
						, (::protocols::moves::Real ( ::core::chemical::AtomType::* )(  ) const)( &::core::chemical::AtomType::lk_lambda ) )
				.def(
						"lk_volume"
						, (::protocols::moves::Real ( ::core::chemical::AtomType::* )(  ) const)( &::core::chemical::AtomType::lk_volume ) )
				.def(
						"set_extra_parameter"
						, (void ( ::core::chemical::AtomType::* )( ::core::Size const,::protocols::moves::Real const ) )( &::core::chemical::AtomType::set_extra_parameter )
						, ( bp::arg("index"), bp::arg("setting") ) )
				.def(
						"set_parameter"
						, (void ( ::core::chemical::AtomType::* )( ::std::string const &,::protocols::moves::Real const ) )( &::core::chemical::AtomType::set_parameter )
						, ( bp::arg("param"), bp::arg("setting") ) )
				.def(
						"set_property"
						, (void ( ::core::chemical::AtomType::* )( ::std::string const &,bool const ) )( &::core::chemical::AtomType::set_property )
						, ( bp::arg("property"), bp::arg("setting") ) );

		bp::class_< core::chemical::AtomTypeSet, utility::pointer::owning_ptr< ::core::chemical::AtomTypeSet > >( "AtomTypeSet", bp::init< std::string const & >(( bp::arg("directory") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"add_parameters_from_file"
						, (void ( ::core::chemical::AtomTypeSet::* )( ::std::string const & ) )( &::core::chemical::AtomTypeSet::add_parameters_from_file )
						, ( bp::arg("filename") ) )
				.def(
						"atom_type_index"
						, (int ( ::core::chemical::AtomTypeSet::* )( ::std::string const & ) const)( &::core::chemical::AtomTypeSet::atom_type_index )
						, ( bp::arg("atom_type_name") ) )
				.def(
						"extra_parameter_index"
						, (int ( ::core::chemical::AtomTypeSet::* )( ::std::string const & ) const)( &::core::chemical::AtomTypeSet::extra_parameter_index )
						, ( bp::arg("name") ) )
				.def(
						"n_atomtypes"
						, (int ( ::core::chemical::AtomTypeSet::* )(  ) const)( &::core::chemical::AtomTypeSet::n_atomtypes ) )
				.def(
						"__getitem__"
						, (::core::chemical::AtomType const & ( ::core::chemical::AtomTypeSet::* )( int const ) const)( &::core::chemical::AtomTypeSet::operator[] )
						, ( bp::arg("index") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"read_file"
						, (void ( ::core::chemical::AtomTypeSet::* )( ::std::string const & ) )( &::core::chemical::AtomTypeSet::read_file )
						, ( bp::arg("filename") ) );

		bp::implicitly_convertible< std::string const &, core::chemical::AtomTypeSet >();

		bp::class_< ResidueType_wrapper, utility::pointer::owning_ptr< ::core::chemical::ResidueType > >( "ResidueType", bp::init< core::chemical::AtomTypeSetCAP, core::chemical::MMAtomTypeSetCAP >(( bp::arg("atom_types"), bp::arg("mm_atom_types") )) )
				.def(
						"Hpos_polar"
						, (::core::chemical::AtomIndices const & ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::Hpos_polar )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"aa"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const & ) )( &::core::chemical::ResidueType::aa )
						, ( bp::arg("type") ) )
				.def(
						"aa"
						, (::core::chemical::AA const & ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::aa )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"abase2"
						, (::size_t ( ::core::chemical::ResidueType::* )( int const ) const)( &::core::chemical::ResidueType::abase2 )
						, ( bp::arg("atomno") ) )
				.def(
						"accpt_pos"
						, (::core::chemical::AtomIndices const & ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::accpt_pos )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"actcoord_atoms"
						, (::core::chemical::AtomIndices const & ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::actcoord_atoms )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"add_actcoord_atom"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const & ) )( &::core::chemical::ResidueType::add_actcoord_atom )
						, ( bp::arg("atom") ) )
				.def(
						"add_atom"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const &,::std::string const &,::std::string const &,::protocols::moves::Real const ) )( &::core::chemical::ResidueType::add_atom )
						, ( bp::arg("atom_name"), bp::arg("atom_type_name"), bp::arg("mm_atom_type_name"), bp::arg("charge") ) )
				.def(
						"add_bond"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const &,::std::string const & ) )( &::core::chemical::ResidueType::add_bond )
						, ( bp::arg("atom_name1"), bp::arg("atom_name2") ) )
				.def(
						"add_chi"
						, (void ( ::core::chemical::ResidueType::* )( ::size_t const,::std::string const &,::std::string const &,::std::string const &,::std::string const & ) )( &::core::chemical::ResidueType::add_chi )
						, ( bp::arg("chino"), bp::arg("atom_name1"), bp::arg("atom_name2"), bp::arg("atom_name3"), bp::arg("atom_name4") ) )
				.def(
						"add_chi_rotamer"
						, (void ( ::core::chemical::ResidueType::* )( ::size_t const,::protocols::moves::Real const,::protocols::moves::Real const ) )( &::core::chemical::ResidueType::add_chi_rotamer )
						, ( bp::arg("chino"), bp::arg("mean"), bp::arg("sdev") ) )
				.def(
						"add_connection"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const & ) )( &::core::chemical::ResidueType::add_connection )
						, ( bp::arg("atom_name") ) )
				.def(
						"add_property"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const & ) )( &::core::chemical::ResidueType::add_property )
						, ( bp::arg("property") ) )
				.def(
						"add_variant_type"
						, (void ( ::core::chemical::ResidueType::* )( ::core::chemical::VariantType const & ) )( &::core::chemical::ResidueType::add_variant_type )
						, ( bp::arg("variant_type") ) )
				.def(
						"atom_base"
						, (::size_t ( ::core::chemical::ResidueType::* )( int const ) const)( &::core::chemical::ResidueType::atom_base )
						, ( bp::arg("atomno") ) )
				.def(
						"atom_index"
						, (::size_t ( ::core::chemical::ResidueType::* )( ::std::string const & ) const)( &::core::chemical::ResidueType::atom_index )
						, ( bp::arg("name") ) )
				.def(
						"atom_is_backbone"
						, (bool ( ::core::chemical::ResidueType::* )( ::size_t const ) const)( &::core::chemical::ResidueType::atom_is_backbone )
						, ( bp::arg("atomno") ) )
				.def(
						"atom_name"
						, (::std::string const & ( ::core::chemical::ResidueType::* )( int const ) const)( &::core::chemical::ResidueType::atom_name )
						, ( bp::arg("index") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"atom_set"
						, (::core::chemical::AtomTypeSet const & ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::atom_set )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"atom_type"
						, (::core::chemical::AtomType const & ( ::core::chemical::ResidueType::* )( int const ) const)( &::core::chemical::ResidueType::atom_type )
						, ( bp::arg("atomno") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"atom_type_index"
						, (int ( ::core::chemical::ResidueType::* )( int const ) const)( &::core::chemical::ResidueType::atom_type_index )
						, ( bp::arg("atm") ) )
				.def(
						"attached_H_begin"
						, (::size_t ( ::core::chemical::ResidueType::* )( int const ) const)( &::core::chemical::ResidueType::attached_H_begin )
						, ( bp::arg("atom") ) )
				.def(
						"attached_H_begin"
						, (::core::chemical::AtomIndices const & ( ::core::chemical::ResidueType::* )(  ) const)(&::core::chemical::ResidueType::attached_H_begin)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"attached_H_end"
						, (::size_t ( ::core::chemical::ResidueType::* )( int const ) const)( &::core::chemical::ResidueType::attached_H_end )
						, ( bp::arg("atom") ) )
				.def(
						"attached_H_end"
						, (::core::chemical::AtomIndices const & ( ::core::chemical::ResidueType::* )(  ) const)(&::core::chemical::ResidueType::attached_H_end)
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"bonded_neighbor"
						, (::core::chemical::AtomIndices const & ( ::core::chemical::ResidueType::* )( int const ) const)( &::core::chemical::ResidueType::bonded_neighbor )
						, ( bp::arg("atomno") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"chi_atoms"
						, (::core::chemical::AtomIndices const & ( ::core::chemical::ResidueType::* )( int const ) const)( &::core::chemical::ResidueType::chi_atoms )
						, ( bp::arg("chino") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"chi_atoms"
						, (::utility::vector1<utility::vector1<std::size_t, std::allocator<std::size_t> >, std::allocator<utility::vector1<std::size_t, std::allocator<std::size_t> > > > const & ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::chi_atoms )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"chi_rotamers"
						, (::utility::vector1<std::pair<double, double>, std::allocator<std::pair<double, double> > > const & ( ::core::chemical::ResidueType::* )( ::size_t const ) const)( &::core::chemical::ResidueType::chi_rotamers )
						, ( bp::arg("chino") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"clone"
						, (::core::chemical::ResidueTypeOP ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::clone ) )
				.def(
						"connection"
						, (::core::chemical::ResidueConnection const & ( ::core::chemical::ResidueType::* )( int const ) )( &::core::chemical::ResidueType::connection )
						, ( bp::arg("i") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"delete_atom"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const & ) )( &::core::chemical::ResidueType::delete_atom )
						, ( bp::arg("name") ) )
				.def(
						"finalize"
						, (void ( ::core::chemical::ResidueType::* )(  ) )( &::core::chemical::ResidueType::finalize ) )
				.def(
						"first_sidechain_atom"
						, (::size_t ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::first_sidechain_atom ) )
				.def(
						"first_sidechain_hydrogen"
						, (::size_t ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::first_sidechain_hydrogen ) )
				.def(
						"has"
						, (bool ( ::core::chemical::ResidueType::* )( ::std::string const & ) const)( &::core::chemical::ResidueType::has )
						, ( bp::arg("atom_name") ) )
				.def(
						"has_property"
						, (bool ( ::core::chemical::ResidueType::* )( ::std::string const & ) const)( &::core::chemical::ResidueType::has_property )
						, ( bp::arg("property") ) )
				.def(
						"has_variant_type"
						, (bool ( ::core::chemical::ResidueType::* )( ::core::chemical::VariantType const & ) const)( &::core::chemical::ResidueType::has_variant_type )
						, ( bp::arg("variant_type") ) )
				.def(
						"icoor"
						, (::core::chemical::AtomICoor const & ( ::core::chemical::ResidueType::* )( int const ) const)( &::core::chemical::ResidueType::icoor )
						, ( bp::arg("atm") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"is_DNA"
						, (bool ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::is_DNA ) )
				.def(
						"is_NA"
						, (bool ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::is_NA ) )
				.def(
						"is_RNA"
						, (bool ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::is_RNA ) )
				.def(
						"is_aromatic"
						, (bool ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::is_aromatic ) )
				.def(
						"is_charged"
						, (bool ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::is_charged ) )
				.def(
						"is_polar"
						, (bool ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::is_polar ) )
				.def(
						"is_polymer"
						, (bool ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::is_polymer ) )
				.def(
						"is_protein"
						, (bool ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::is_protein ) )
				.def(
						"is_terminus"
						, (bool ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::is_terminus ) )
				.def(
						"last_backbone_atom"
						, (::size_t ( ::core::chemical::ResidueType::* )(  ) const)(&::core::chemical::ResidueType::last_backbone_atom)
						, (::size_t ( ResidueType_wrapper::* )(  ) const)(&ResidueType_wrapper::default_last_backbone_atom) )
				.def(
						"lower_connect"
						, (::core::chemical::ResidueConnection const & ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::lower_connect )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"lower_connect_atom"
						, (::size_t ( ::core::chemical::ResidueType::* )(  ) const)(&::core::chemical::ResidueType::lower_connect_atom)
						, (::size_t ( ResidueType_wrapper::* )(  ) const)(&ResidueType_wrapper::default_lower_connect_atom) )
				.def(
						"mainchain_atoms"
						, (::core::chemical::AtomIndices const & ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::mainchain_atoms )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"n_connection"
						, (::size_t ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::n_connection ) )
				.def(
						"name"
						, (::std::string const & ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::name )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"name"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const & ) )( &::core::chemical::ResidueType::name )
						, ( bp::arg("name_in") ) )
				.def(
						"name1"
						, (char ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::name1 ) )
				.def(
						"name1"
						, (void ( ::core::chemical::ResidueType::* )( char const ) )( &::core::chemical::ResidueType::name1 )
						, ( bp::arg("code") ) )
				.def(
						"name3"
						, (::std::string const & ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::name3 )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"name3"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const & ) )( &::core::chemical::ResidueType::name3 )
						, ( bp::arg("name_in") ) )
				.def(
						"natoms"
						, (::size_t ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::natoms ) )
				.def(
						"nbr_atom"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const & ) )( &::core::chemical::ResidueType::nbr_atom )
						, ( bp::arg("atom_name") ) )
				.def(
						"nbr_atom"
						, (::size_t ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::nbr_atom ) )
				.def(
						"nbr_radius"
						, (void ( ::core::chemical::ResidueType::* )( ::protocols::moves::Real const ) )( &::core::chemical::ResidueType::nbr_radius )
						, ( bp::arg("radius") ) )
				.def(
						"nbr_radius"
						, (::protocols::moves::Real ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::nbr_radius ) )
				.def(
						"nbrs"
						, (::core::chemical::AtomIndices const & ( ::core::chemical::ResidueType::* )( int const ) const)( &::core::chemical::ResidueType::nbrs )
						, ( bp::arg("atomno") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"nchi"
						, (::size_t ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::nchi ) )
				.def(
						"nheavyatoms"
						, (::size_t ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::nheavyatoms ) )
				.def(
						"path_distance"
						, (int ( ::core::chemical::ResidueType::* )( int,int ) const)(&::core::chemical::ResidueType::path_distance)
						, (int ( ResidueType_wrapper::* )( int,int ) const)(&ResidueType_wrapper::default_path_distance)
						, ( bp::arg("at1"), bp::arg("at2") ) )
				.def(
						"path_distance"
						, (::utility::vector1<int, std::allocator<int> > const & ( ::core::chemical::ResidueType::* )( int ) const)(&::core::chemical::ResidueType::path_distance)
						, ( bp::arg("atom") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"require_final"
						, (void ( ::core::chemical::ResidueType::* )(  ) )( &::core::chemical::ResidueType::require_final ) )
				.def(
						"requires_actcoord"
						, (bool ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::requires_actcoord ) )
				.def(
						"residue_type_set"
						, (::core::chemical::ResidueTypeSet const & ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::residue_type_set )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"residue_type_set"
						, (void ( ::core::chemical::ResidueType::* )( ::core::chemical::ResidueTypeSetCAP ) )( &::core::chemical::ResidueType::residue_type_set )
						, ( bp::arg("set_in") ) )
				.def(
						"set_atom_base"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const &,::std::string const & ) )( &::core::chemical::ResidueType::set_atom_base )
						, ( bp::arg("atom_name1"), bp::arg("atom_name2") ) )
				.def(
						"set_atom_type"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const &,::std::string const & ) )( &::core::chemical::ResidueType::set_atom_type )
						, ( bp::arg("atom_name"), bp::arg("atom_type_name") ) )
				.def(
						"set_atomic_charge"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const &,::protocols::moves::Real const ) )( &::core::chemical::ResidueType::set_atomic_charge )
						, ( bp::arg("atm"), bp::arg("charge") ) )
				.def(
						"set_backbone_heavyatom"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const & ) )( &::core::chemical::ResidueType::set_backbone_heavyatom )
						, ( bp::arg("name") ) )
				.def(
						"set_icoor"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const &,::protocols::moves::Real const,::protocols::moves::Real const,::protocols::moves::Real const,::std::string const &,::std::string const &,::std::string const & ) )( &::core::chemical::ResidueType::set_icoor )
						, ( bp::arg("atm"), bp::arg("phi"), bp::arg("theta"), bp::arg("d"), bp::arg("stub_atom1"), bp::arg("stub_atom2"), bp::arg("stub_atom3") ) )
				.def(
						"set_lower_connect_atom"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const & ) )( &::core::chemical::ResidueType::set_lower_connect_atom )
						, ( bp::arg("atm_name") ) )
				.def(
						"set_mainchain_atoms"
						, (void ( ::core::chemical::ResidueType::* )( ::core::chemical::AtomIndices const & ) )( &::core::chemical::ResidueType::set_mainchain_atoms )
						, ( bp::arg("mainchain") ) )
				.def(
						"set_upper_connect_atom"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const & ) )( &::core::chemical::ResidueType::set_upper_connect_atom )
						, ( bp::arg("atm_name") ) )
				.def(
						"set_xyz"
						, (void ( ::core::chemical::ResidueType::* )( ::std::string const &,::core::Vector const & ) )( &::core::chemical::ResidueType::set_xyz )
						, ( bp::arg("atm"), bp::arg("xyz_in") ) )
				.def(
						"update_actcoord"
						, (void ( ::core::chemical::ResidueType::* )( ::core::conformation::Residue & ) const)( &::core::chemical::ResidueType::update_actcoord )
						, ( bp::arg("rot") ) )
				.def(
						"upper_connect"
						, (::core::chemical::ResidueConnection const & ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::upper_connect )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"upper_connect_atom"
						, (::size_t ( ::core::chemical::ResidueType::* )(  ) const)(&::core::chemical::ResidueType::upper_connect_atom)
						, (::size_t ( ResidueType_wrapper::* )(  ) const)(&ResidueType_wrapper::default_upper_connect_atom) )
				.def(
						"variant_types"
						, (::utility::vector1<std::string, std::allocator<std::string> > const & ( ::core::chemical::ResidueType::* )(  ) const)( &::core::chemical::ResidueType::variant_types )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"variants_match"
						, (bool ( ::core::chemical::ResidueType::* )( ::core::chemical::ResidueType const & ) const)( &::core::chemical::ResidueType::variants_match )
						, ( bp::arg("other") ) )
				.def(
						"xyz"
						, (::core::Vector const & ( ::core::chemical::ResidueType::* )( int const ) const)( &::core::chemical::ResidueType::xyz )
						, ( bp::arg("atm") )
						, bp::return_value_policy< bp::copy_const_reference >() );

		bp::class_< core::chemical::ResidueTypeSet, utility::pointer::owning_ptr< ::core::chemical::ResidueTypeSet > >( "ResidueTypeSet" )
				.def( bp::init< >() )
				.def( bp::init< std::string const & >(( bp::arg("directory") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"aa_map"
						, (::core::chemical::ResidueTypeCAPs const & ( ::core::chemical::ResidueTypeSet::* )( ::core::chemical::AA const & ) const)( &::core::chemical::ResidueTypeSet::aa_map )
						, ( bp::arg("aa") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"aas_defined_begin"
						, (::std::_List_const_iterator<core::chemical::AA> ( ::core::chemical::ResidueTypeSet::* )(  ) const)( &::core::chemical::ResidueTypeSet::aas_defined_begin ) )
				.def(
						"aas_defined_end"
						, (::std::_List_const_iterator<core::chemical::AA> ( ::core::chemical::ResidueTypeSet::* )(  ) const)( &::core::chemical::ResidueTypeSet::aas_defined_end ) )
				.def(
						"apply_patches"
						, (void ( ::core::chemical::ResidueTypeSet::* )( ::std::string const & ) )( &::core::chemical::ResidueTypeSet::apply_patches )
						, ( bp::arg("filename") ) )
				.def(
						"apply_patches"
						, (void ( ::core::chemical::ResidueTypeSet::* )( ::utility::vector1<std::string, std::allocator<std::string> > const & ) )( &::core::chemical::ResidueTypeSet::apply_patches )
						, ( bp::arg("filenames") ) )
				.def(
						"get_residue_variant"
						, (::core::chemical::ResidueType const & ( ::core::chemical::ResidueTypeSet::* )( ::core::chemical::ResidueType const &,::core::chemical::VariantType const & ) const)( &::core::chemical::ResidueTypeSet::get_residue_variant )
						, ( bp::arg("init_rsd"), bp::arg("new_type") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"name3_map"
						, (::core::chemical::ResidueTypeCAPs const & ( ::core::chemical::ResidueTypeSet::* )( ::std::string const & ) const)( &::core::chemical::ResidueTypeSet::name3_map )
						, ( bp::arg("name") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"name_map"
						, (::core::chemical::ResidueType const & ( ::core::chemical::ResidueTypeSet::* )( ::std::string const & ) const)( &::core::chemical::ResidueTypeSet::name_map )
						, ( bp::arg("name") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"read_files"
						, (void ( ::core::chemical::ResidueTypeSet::* )( ::utility::vector1<std::string, std::allocator<std::string> > const &,::core::chemical::AtomTypeSetCAP,::core::chemical::MMAtomTypeSetCAP ) )( &::core::chemical::ResidueTypeSet::read_files )
						, ( bp::arg("filenames"), bp::arg("atom_types"), bp::arg("mm_atom_types") ) )
				.def(
						"read_list_of_residues"
						, (void ( ::core::chemical::ResidueTypeSet::* )( ::std::string const &,::core::chemical::AtomTypeSetCAP,::core::chemical::MMAtomTypeSetCAP ) )( &::core::chemical::ResidueTypeSet::read_list_of_residues )
						, ( bp::arg("list_filename"), bp::arg("atom_types"), bp::arg("mm_atom_types") ) )
				.def(
						"select_residues"
						, (void ( ::core::chemical::ResidueTypeSet::* )( ::core::chemical::ResidueSelector const &,::core::chemical::ResidueTypeCAPs & ) const)( &::core::chemical::ResidueTypeSet::select_residues )
						, ( bp::arg("selector"), bp::arg("matches") ) );

		bp::implicitly_convertible< std::string const &, core::chemical::ResidueTypeSet >();

		bp::class_< core::conformation::Atom >( "Atom" )
				.def( bp::init< >() )
				.def( bp::init< int >(( bp::arg("type_in") )) )
				.def( bp::init< core::Vector const &, int >(( bp::arg("xyz_in"), bp::arg("type_in") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"type"
						, (void ( ::core::conformation::Atom::* )( int const ) )( &::core::conformation::Atom::type )
						, ( bp::arg("type_in") ) )
				.def(
						"type"
						, (int ( ::core::conformation::Atom::* )(  ) const)( &::core::conformation::Atom::type ) )
				.def(
						"xyz"
						, (::core::Vector const & ( ::core::conformation::Atom::* )(  ) const)( &::core::conformation::Atom::xyz )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"xyz"
						, (void ( ::core::conformation::Atom::* )( ::core::Vector const & ) )( &::core::conformation::Atom::xyz )
						, ( bp::arg("xyz_in") ) );

		bp::implicitly_convertible< int const, core::conformation::Atom >();

		bp::class_< core::conformation::Residue, utility::pointer::owning_ptr< ::core::conformation::Residue >, boost::noncopyable >( "Residue", bp::init< core::chemical::ResidueType const &, bool >(( bp::arg("rsd_type_in"), bp::arg("dummy_arg") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def( bp::init< core::chemical::ResidueType const &, core::conformation::Residue const &, core::conformation::Conformation const & >(( bp::arg("rsd_type_in"), bp::arg("current_rsd"), bp::arg("conformation") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"Hpos_polar"
						, (::core::chemical::AtomIndices const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::Hpos_polar )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"aa"
						, (::core::chemical::AA const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::aa )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"abase2"
						, (::size_t ( ::core::conformation::Residue::* )( int const ) const)( &::core::conformation::Residue::abase2 )
						, ( bp::arg("atomno") ) )
				.def(
						"accpt_pos"
						, (::core::chemical::AtomIndices const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::accpt_pos )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"actcoord"
						, (::core::Vector const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::actcoord )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"actcoord"
						, (::core::Vector & ( ::core::conformation::Residue::* )(  ) )( &::core::conformation::Residue::actcoord )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"actcoord_atoms"
						, (::core::chemical::AtomIndices const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::actcoord_atoms )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"atom"
						, (::core::conformation::Atom const & ( ::core::conformation::Residue::* )( int const ) const)( &::core::conformation::Residue::atom )
						, ( bp::arg("atm_index") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"atom"
						, (::core::conformation::Atom & ( ::core::conformation::Residue::* )( int const ) )( &::core::conformation::Residue::atom )
						, ( bp::arg("atm_index") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"atom"
						, (::core::conformation::Atom const & ( ::core::conformation::Residue::* )( ::std::string const & ) const)( &::core::conformation::Residue::atom )
						, ( bp::arg("atm_name") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"atom"
						, (::core::conformation::Atom & ( ::core::conformation::Residue::* )( ::std::string const & ) )( &::core::conformation::Residue::atom )
						, ( bp::arg("atm_name") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"atom_base"
						, (::size_t ( ::core::conformation::Residue::* )( int const ) const)( &::core::conformation::Residue::atom_base )
						, ( bp::arg("atomno") ) )
				.def(
						"atom_begin"
						, (::__gnu_cxx::__normal_iterator<core::conformation::Atom*, std::vector<core::conformation::Atom, std::allocator<core::conformation::Atom> > > ( ::core::conformation::Residue::* )(  ) )( &::core::conformation::Residue::atom_begin ) )
				.def(
						"atom_end"
						, (::__gnu_cxx::__normal_iterator<core::conformation::Atom*, std::vector<core::conformation::Atom, std::allocator<core::conformation::Atom> > > ( ::core::conformation::Residue::* )(  ) )( &::core::conformation::Residue::atom_end ) )
				.def(
						"atom_index"
						, (::size_t ( ::core::conformation::Residue::* )( ::std::string const & ) const)( &::core::conformation::Residue::atom_index )
						, ( bp::arg("atm") ) )
				.def(
						"atom_is_backbone"
						, (bool ( ::core::conformation::Residue::* )( int const ) const)( &::core::conformation::Residue::atom_is_backbone )
						, ( bp::arg("atomno") ) )
				.def(
						"atom_name"
						, (::std::string const & ( ::core::conformation::Residue::* )( int const ) const)( &::core::conformation::Residue::atom_name )
						, ( bp::arg("atm") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"atom_type"
						, (::core::chemical::AtomType const & ( ::core::conformation::Residue::* )( int const ) const)( &::core::conformation::Residue::atom_type )
						, ( bp::arg("atomno") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"atoms"
						, (::utility::vector1<core::conformation::Atom, std::allocator<core::conformation::Atom> > const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::atoms )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"atoms"
						, (::utility::vector1<core::conformation::Atom, std::allocator<core::conformation::Atom> > & ( ::core::conformation::Residue::* )(  ) )( &::core::conformation::Residue::atoms )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"attached_H_begin"
						, (::size_t ( ::core::conformation::Residue::* )( int const ) const)( &::core::conformation::Residue::attached_H_begin )
						, ( bp::arg("atom") ) )
				.def(
						"attached_H_begin"
						, (::core::chemical::AtomIndices const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::attached_H_begin )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"attached_H_end"
						, (::size_t ( ::core::conformation::Residue::* )( int const ) const)( &::core::conformation::Residue::attached_H_end )
						, ( bp::arg("atom") ) )
				.def(
						"attached_H_end"
						, (::core::chemical::AtomIndices const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::attached_H_end )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"bonded_neighbor"
						, (::core::chemical::AtomIndices const & ( ::core::conformation::Residue::* )( int const ) const)( &::core::conformation::Residue::bonded_neighbor )
						, ( bp::arg("atm") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"build_atom_ideal"
						, (::core::Vector ( ::core::conformation::Residue::* )( int const,::core::conformation::Conformation const & ) const)( &::core::conformation::Residue::build_atom_ideal )
						, ( bp::arg("atomno"), bp::arg("conformation") ) )
				.def(
						"chain"
						, (int ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::chain ) )
				.def(
						"chain"
						, (void ( ::core::conformation::Residue::* )( int const ) )( &::core::conformation::Residue::chain )
						, ( bp::arg("setting") ) )
				.def(
						"chi"
						, (::utility::vector1<double, std::allocator<double> > const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::chi )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"chi"
						, (::utility::vector1<double, std::allocator<double> > & ( ::core::conformation::Residue::* )(  ) )( &::core::conformation::Residue::chi )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"chi"
						, (::protocols::moves::Real ( ::core::conformation::Residue::* )( ::size_t const ) const)( &::core::conformation::Residue::chi )
						, ( bp::arg("chino") ) )
				.def(
						"chi_atoms"
						, (::utility::vector1<utility::vector1<std::size_t, std::allocator<std::size_t> >, std::allocator<utility::vector1<std::size_t, std::allocator<std::size_t> > > > const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::chi_atoms )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"chi_atoms"
						, (::core::chemical::AtomIndices ( ::core::conformation::Residue::* )( int const ) const)( &::core::conformation::Residue::chi_atoms )
						, ( bp::arg("chino") ) )
				.def(
						"chi_rotamers"
						, (::utility::vector1<std::pair<double, double>, std::allocator<std::pair<double, double> > > const & ( ::core::conformation::Residue::* )( ::size_t const ) const)( &::core::conformation::Residue::chi_rotamers )
						, ( bp::arg("chino") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"clone"
						, (::core::conformation::ResidueOP ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::clone ) )
				.def(
						"create_residue"
						, (::core::conformation::ResidueOP ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::create_residue ) )
				.def(
						"create_rotamer"
						, (::core::conformation::ResidueOP ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::create_rotamer ) )
				.def(
						"fill_missing_atoms"
						, (void ( ::core::conformation::Residue::* )( ::utility::vector1<bool, std::allocator<bool> >,::core::conformation::Conformation const & ) )( &::core::conformation::Residue::fill_missing_atoms )
						, ( bp::arg("missing"), bp::arg("conformation") ) )
				.def(
						"first_sidechain_atom"
						, (::size_t ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::first_sidechain_atom ) )
				.def(
						"first_sidechain_hydrogen"
						, (::size_t ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::first_sidechain_hydrogen ) )
				.def(
						"has"
						, (bool ( ::core::conformation::Residue::* )( ::std::string const & ) const)( &::core::conformation::Residue::has )
						, ( bp::arg("atm") ) )
				.def(
						"has_property"
						, (bool ( ::core::conformation::Residue::* )( ::std::string const & ) const)( &::core::conformation::Residue::has_property )
						, ( bp::arg("property") ) )
				.def(
						"has_variant_type"
						, (bool ( ::core::conformation::Residue::* )( ::core::chemical::VariantType const & ) const)( &::core::conformation::Residue::has_variant_type )
						, ( bp::arg("variant_type") ) )
				.def(
						"icoor"
						, (::core::chemical::AtomICoor const & ( ::core::conformation::Residue::* )( int const ) const)( &::core::conformation::Residue::icoor )
						, ( bp::arg("atm") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"is_DNA"
						, (bool ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::is_DNA ) )
				.def(
						"is_NA"
						, (bool ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::is_NA ) )
				.def(
						"is_RNA"
						, (bool ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::is_RNA ) )
				.def(
						"is_aromatic"
						, (bool ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::is_aromatic ) )
				.def(
						"is_charged"
						, (bool ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::is_charged ) )
				.def(
						"is_polar"
						, (bool ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::is_polar ) )
				.def(
						"is_polymer"
						, (bool ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::is_polymer ) )
				.def(
						"is_protein"
						, (bool ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::is_protein ) )
				.def(
						"is_terminus"
						, (bool ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::is_terminus ) )
				.def(
						"last_backbone_atom"
						, (::size_t ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::last_backbone_atom ) )
				.def(
						"lower_connect"
						, (::core::chemical::ResidueConnection const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::lower_connect )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"lower_connect_atom"
						, (::size_t ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::lower_connect_atom ) )
				.def(
						"mainchain_atoms"
						, (::core::chemical::AtomIndices ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::mainchain_atoms ) )
				.def(
						"mainchain_torsion"
						, (::protocols::moves::Real ( ::core::conformation::Residue::* )( int const ) const)( &::core::conformation::Residue::mainchain_torsion )
						, ( bp::arg("torsion") ) )
				.def(
						"mainchain_torsions"
						, (::utility::vector1<double, std::allocator<double> > const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::mainchain_torsions )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"mainchain_torsions"
						, (::utility::vector1<double, std::allocator<double> > & ( ::core::conformation::Residue::* )(  ) )( &::core::conformation::Residue::mainchain_torsions )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"name"
						, (::std::string const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::name )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"name1"
						, (char ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::name1 ) )
				.def(
						"name3"
						, (::std::string const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::name3 )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"natoms"
						, (::size_t ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::natoms ) )
				.def(
						"nbr_atom"
						, (::size_t ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::nbr_atom ) )
				.def(
						"nbr_radius"
						, (::protocols::moves::Real ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::nbr_radius ) )
				.def(
						"nbrs"
						, (::core::chemical::AtomIndices const & ( ::core::conformation::Residue::* )( int const ) const)( &::core::conformation::Residue::nbrs )
						, ( bp::arg("atm") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"nchi"
						, (::size_t ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::nchi ) )
				.def(
						"nheavyatoms"
						, (::size_t ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::nheavyatoms ) )
				.def(
						"path_distance"
						, (int ( ::core::conformation::Residue::* )( int,int ) const)( &::core::conformation::Residue::path_distance )
						, ( bp::arg("at1"), bp::arg("at2") ) )
				.def(
						"path_distance"
						, (::utility::vector1<int, std::allocator<int> > const & ( ::core::conformation::Residue::* )( int ) const)( &::core::conformation::Residue::path_distance )
						, ( bp::arg("atom") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"requires_actcoord"
						, (bool ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::requires_actcoord ) )
				.def(
						"residue_type_set"
						, (::core::chemical::ResidueTypeSet const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::residue_type_set )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"seqpos"
						, (int ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::seqpos ) )
				.def(
						"seqpos"
						, (void ( ::core::conformation::Residue::* )( int const ) )( &::core::conformation::Residue::seqpos )
						, ( bp::arg("setting") ) )
				.def(
						"sequence_distance"
						, (::size_t ( ::core::conformation::Residue::* )( ::core::conformation::Residue const & ) const)( &::core::conformation::Residue::sequence_distance )
						, ( bp::arg("other") ) )
				.def(
						"set_chi"
						, (void ( ::core::conformation::Residue::* )( int const,::protocols::moves::Real const ) )( &::core::conformation::Residue::set_chi )
						, ( bp::arg("chino"), bp::arg("setting") ) )
				.def(
						"type"
						, (::core::chemical::ResidueType const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::type )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"update_actcoord"
						, (void ( ::core::conformation::Residue::* )(  ) )( &::core::conformation::Residue::update_actcoord ) )
				.def(
						"upper_connect"
						, (::core::chemical::ResidueConnection const & ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::upper_connect )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"upper_connect_atom"
						, (::size_t ( ::core::conformation::Residue::* )(  ) const)( &::core::conformation::Residue::upper_connect_atom ) )

				.def("__iter__", bp::range( &core::conformation::Residue::atom_begin, &core::conformation::Residue::atom_end));

		bp::class_< core::id::DOF_ID >( "DOF_ID" )
				.def( bp::init< >() )
				.def( bp::init< core::id::AtomID const &, core::id::DOF_Type const & >(( bp::arg("atom_id_in"), bp::arg("type_in") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"atom_id"
						, (::core::id::AtomID const & ( ::core::id::DOF_ID::* )(  ) const)( &::core::id::DOF_ID::atom_id )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"atomno"
						, (int ( ::core::id::DOF_ID::* )(  ) const)( &::core::id::DOF_ID::atomno ) )
				.def(
						"rsd"
						, (int ( ::core::id::DOF_ID::* )(  ) const)( &::core::id::DOF_ID::rsd ) )
				.def(
						"type"
						, (::core::id::DOF_Type ( ::core::id::DOF_ID::* )(  ) const)( &::core::id::DOF_ID::type ) )
				.def(
						"valid"
						, (bool ( ::core::id::DOF_ID::* )(  ) const)( &::core::id::DOF_ID::valid ) );

		bp::class_< core::kinematics::MoveMap, utility::pointer::owning_ptr< ::core::kinematics::MoveMap > >( "MoveMap" )
				.def( bp::init< >() )
				.def(
						"clear"
						, (void ( ::core::kinematics::MoveMap::* )(  ) )( &::core::kinematics::MoveMap::clear ) )
				.def(
						"dof_begin"
						, (::std::_Rb_tree_const_iterator<std::pair<core::id::DOF_ID const, bool> > ( ::core::kinematics::MoveMap::* )(  ) const)( &::core::kinematics::MoveMap::dof_begin ) )
				.def(
						"dof_end"
						, (::std::_Rb_tree_const_iterator<std::pair<core::id::DOF_ID const, bool> > ( ::core::kinematics::MoveMap::* )(  ) const)( &::core::kinematics::MoveMap::dof_end ) )
				.def(
						"get"
						, (bool ( ::core::kinematics::MoveMap::* )( ::core::id::TorsionID const & ) const)( &::core::kinematics::MoveMap::get )
						, ( bp::arg("id") ) )
				.def(
						"get"
						, (bool ( ::core::kinematics::MoveMap::* )( ::core::id::DOF_Type const & ) const)( &::core::kinematics::MoveMap::get )
						, ( bp::arg("t") ) )
				.def(
						"get"
						, (bool ( ::core::kinematics::MoveMap::* )( ::core::id::DOF_ID const & ) const)( &::core::kinematics::MoveMap::get )
						, ( bp::arg("id") ) )
				.def(
						"get"
						, (bool ( ::core::kinematics::MoveMap::* )( ::core::id::TorsionType const & ) const)( &::core::kinematics::MoveMap::get )
						, ( bp::arg("t") ) )
				.def(
						"get_bb"
						, (bool ( ::core::kinematics::MoveMap::* )( int const ) const)( &::core::kinematics::MoveMap::get_bb )
						, ( bp::arg("seqpos") ) )
				.def(
						"get_chi"
						, (bool ( ::core::kinematics::MoveMap::* )( int const ) const)( &::core::kinematics::MoveMap::get_chi )
						, ( bp::arg("seqpos") ) )
				.def(
						"get_jump"
						, (bool ( ::core::kinematics::MoveMap::* )( int const ) const)( &::core::kinematics::MoveMap::get_jump )
						, ( bp::arg("jump_number") ) )
				.def(
						"set"
						, (void ( ::core::kinematics::MoveMap::* )( ::core::id::DOF_Type const &,bool const ) )( &::core::kinematics::MoveMap::set )
						, ( bp::arg("t"), bp::arg("setting") ) )
				.def(
						"set"
						, (void ( ::core::kinematics::MoveMap::* )( ::core::id::DOF_ID const &,bool const ) )( &::core::kinematics::MoveMap::set )
						, ( bp::arg("id"), bp::arg("setting") ) )
				.def(
						"set"
						, (void ( ::core::kinematics::MoveMap::* )( ::core::id::TorsionType const &,bool const ) )( &::core::kinematics::MoveMap::set )
						, ( bp::arg("t"), bp::arg("setting") ) )
				.def(
						"set"
						, (void ( ::core::kinematics::MoveMap::* )( ::core::id::TorsionID const &,bool const ) )( &::core::kinematics::MoveMap::set )
						, ( bp::arg("id"), bp::arg("setting") ) )
				.def(
						"set_bb"
						, (void ( ::core::kinematics::MoveMap::* )( int const,bool const ) )( &::core::kinematics::MoveMap::set_bb )
						, ( bp::arg("seqpos"), bp::arg("setting") ) )
				.def(
						"set_bb"
						, (void ( ::core::kinematics::MoveMap::* )( bool const ) )( &::core::kinematics::MoveMap::set_bb )
						, ( bp::arg("setting") ) )
				.def(
						"set_chi"
						, (void ( ::core::kinematics::MoveMap::* )( int const,bool const ) )( &::core::kinematics::MoveMap::set_chi )
						, ( bp::arg("seqpos"), bp::arg("setting") ) )
				.def(
						"set_chi"
						, (void ( ::core::kinematics::MoveMap::* )( bool const ) )( &::core::kinematics::MoveMap::set_chi )
						, ( bp::arg("setting") ) )
				.def(
						"set_jump"
						, (void ( ::core::kinematics::MoveMap::* )( int const,bool const ) )( &::core::kinematics::MoveMap::set_jump )
						, ( bp::arg("jump_number"), bp::arg("setting") ) )
				.def(
						"set_jump"
						, (void ( ::core::kinematics::MoveMap::* )( bool const ) )( &::core::kinematics::MoveMap::set_jump )
						, ( bp::arg("setting") ) )
				.def(
						"vary_omega"
						, (void ( ::core::kinematics::MoveMap::* )( bool const ) )( &::core::kinematics::MoveMap::vary_omega )
						, ( bp::arg("setting") ) )
				.def(
						"vary_omega"
						, (bool ( ::core::kinematics::MoveMap::* )(  ) const)( &::core::kinematics::MoveMap::vary_omega ) )
				.def("__iter__", bp::range( &core::kinematics::MoveMap::dof_begin, &core::kinematics::MoveMap::dof_end ));

		bp::class_< core::optimization::AtomTreeMinimizer >( "AtomTreeMinimizer" )
				.def( bp::init< >() )
				.def(
						"run"
						, (::protocols::moves::Real ( ::core::optimization::AtomTreeMinimizer::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const &,::core::scoring::ScoreFunction const &,::core::optimization::MinimizerOptions const & ) const)( &::core::optimization::AtomTreeMinimizer::run )
						, ( bp::arg("pose"), bp::arg("move_map"), bp::arg("scorefxn"), bp::arg("options") ) );

		bp::class_< core::optimization::MinimizerOptions, utility::pointer::owning_ptr< ::core::optimization::MinimizerOptions > >( "MinimizerOptions", bp::init< std::string const &, double, bool, bp::optional< bool, bool > >(( bp::arg("min_type_in"), bp::arg("minimize_tolerance_in"), bp::arg("use_nblist_in"), bp::arg("deriv_check_in")=(bool const)(false), bp::arg("deriv_check_verbose_in")=(bool const)(false) ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"ax_init"
						, (::protocols::moves::Real ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::ax_init ) )
				.def(
						"brent_abs_tolerance"
						, (::protocols::moves::Real ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::brent_abs_tolerance ) )
				.def(
						"bx_init"
						, (::protocols::moves::Real ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::bx_init ) )
				.def(
						"clone"
						, (::core::optimization::MinimizerOptionsOP ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::clone ) )
				.def(
						"deriv_check"
						, (bool ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::deriv_check ) )
				.def(
						"deriv_check_verbose"
						, (bool ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::deriv_check_verbose ) )
				.def(
						"min_type"
						, (::std::string const & ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::min_type )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"min_type"
						, (void ( ::core::optimization::MinimizerOptions::* )( ::std::string ) )( &::core::optimization::MinimizerOptions::min_type )
						, ( bp::arg("min_type_in") ) )
				.def(
						"min_type"
						, (::std::string & ( ::core::optimization::MinimizerOptions::* )(  ) )( &::core::optimization::MinimizerOptions::min_type )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"minimize_tolerance"
						, (::protocols::moves::Real ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::minimize_tolerance ) )
				.def(
						"minimize_tolerance"
						, (::protocols::moves::Real & ( ::core::optimization::MinimizerOptions::* )(  ) )( &::core::optimization::MinimizerOptions::minimize_tolerance )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"minimize_tolerance"
						, (void ( ::core::optimization::MinimizerOptions::* )( ::protocols::moves::Real ) )( &::core::optimization::MinimizerOptions::minimize_tolerance )
						, ( bp::arg("minimize_tolerance_in") ) )
				.def(
						"threshold"
						, (::protocols::moves::Real ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::threshold ) )
				.def(
						"threshold"
						, (::protocols::moves::Real & ( ::core::optimization::MinimizerOptions::* )(  ) )( &::core::optimization::MinimizerOptions::threshold )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"threshold"
						, (void ( ::core::optimization::MinimizerOptions::* )( ::protocols::moves::Real ) )( &::core::optimization::MinimizerOptions::threshold )
						, ( bp::arg("threshold_in") ) )
				.def(
						"use_nblist"
						, (bool ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::use_nblist ) )
				.def(
						"use_nblist"
						, (void ( ::core::optimization::MinimizerOptions::* )( bool ) )( &::core::optimization::MinimizerOptions::use_nblist )
						, ( bp::arg("use_nblist_in") ) )
				.def(
						"xx_init"
						, (::protocols::moves::Real ( ::core::optimization::MinimizerOptions::* )(  ) const)( &::core::optimization::MinimizerOptions::xx_init ) );

		bp::class_< PackerTask_wrapper, utility::pointer::owning_ptr< PackerTask_wrapper >, boost::noncopyable >( "PackerTask" )
				.def(
						"bump_check"
						, bp::pure_virtual( (bool ( ::core::pack::task::PackerTask::* )(  ) const)(&::core::pack::task::PackerTask::bump_check) ) )
				.def(
						"clone"
						, bp::pure_virtual( (::core::pack::task::PackerTaskOP ( ::core::pack::task::PackerTask::* )(  ) const)(&::core::pack::task::PackerTask::clone) ) )
				.def(
						"design_any"
						, bp::pure_virtual( (bool ( ::core::pack::task::PackerTask::* )(  ) const)(&::core::pack::task::PackerTask::design_any) ) )
				.def(
						"design_residue"
						, bp::pure_virtual( (bool ( ::core::pack::task::PackerTask::* )( int ) const)(&::core::pack::task::PackerTask::design_residue) )
						, ( bp::arg("resid") ) )
				.def(
						"include_current"
						, bp::pure_virtual( (bool ( ::core::pack::task::PackerTask::* )( ::size_t ) const)(&::core::pack::task::PackerTask::include_current) )
						, ( bp::arg("resid") ) )
				.def(
						"initialize_from_command_line"
						, bp::pure_virtual( (::core::pack::task::PackerTask & ( ::core::pack::task::PackerTask::* )(  ) )(&::core::pack::task::PackerTask::initialize_from_command_line) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"nonconst_residue_task"
						, bp::pure_virtual( (::core::pack::task::ResidueLevelTask & ( ::core::pack::task::PackerTask::* )( ::size_t ) )(&::core::pack::task::PackerTask::nonconst_residue_task) )
						, ( bp::arg("resid") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"num_to_be_packed"
						, bp::pure_virtual( (::size_t ( ::core::pack::task::PackerTask::* )(  ) const)(&::core::pack::task::PackerTask::num_to_be_packed) ) )
				.def(
						"or_include_current"
						, bp::pure_virtual( (void ( ::core::pack::task::PackerTask::* )( bool ) )(&::core::pack::task::PackerTask::or_include_current) )
						, ( bp::arg("setting") ) )
				.def(
						"or_include_current"
						, bp::pure_virtual( (void ( ::core::pack::task::PackerTask::* )( bool,::size_t ) )(&::core::pack::task::PackerTask::or_include_current) )
						, ( bp::arg("setting"), bp::arg("resid") ) )
				.def(
						"pack_residue"
						, bp::pure_virtual( (bool ( ::core::pack::task::PackerTask::* )( int ) const)(&::core::pack::task::PackerTask::pack_residue) )
						, ( bp::arg("resid") ) )
				.def(
						"read_resfile"
						, bp::pure_virtual( (::core::pack::task::PackerTask & ( ::core::pack::task::PackerTask::* )( ::std::string const & ) )(&::core::pack::task::PackerTask::read_resfile) )
						, ( bp::arg("filename") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"residue_task"
						, bp::pure_virtual( (::core::pack::task::ResidueLevelTask const & ( ::core::pack::task::PackerTask::* )( ::size_t ) const)(&::core::pack::task::PackerTask::residue_task) )
						, ( bp::arg("resid") )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"restrict_to_repacking"
						, bp::pure_virtual( (::core::pack::task::PackerTask & ( ::core::pack::task::PackerTask::* )(  ) )(&::core::pack::task::PackerTask::restrict_to_repacking) )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"restrict_to_residues"
						, bp::pure_virtual( (::core::pack::task::PackerTask & ( ::core::pack::task::PackerTask::* )( ::utility::vector1<bool, std::allocator<bool> > const & ) )(&::core::pack::task::PackerTask::restrict_to_residues) )
						, ( bp::arg("residues_allowed_to_be_packed") )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"set_bump_check"
						, bp::pure_virtual( (void ( ::core::pack::task::PackerTask::* )( bool ) )(&::core::pack::task::PackerTask::set_bump_check) )
						, ( bp::arg("setting") ) )
				.def(
						"temporarily_fix_everything"
						, bp::pure_virtual( (void ( ::core::pack::task::PackerTask::* )(  ) )(&::core::pack::task::PackerTask::temporarily_fix_everything) ) )
				.def(
						"temporarily_set_pack_residue"
						, bp::pure_virtual( (void ( ::core::pack::task::PackerTask::* )( int,bool ) )(&::core::pack::task::PackerTask::temporarily_set_pack_residue) )
						, ( bp::arg("resid"), bp::arg("setting") ) )
				.def(
						"total_residue"
						, bp::pure_virtual( (::size_t ( ::core::pack::task::PackerTask::* )(  ) const)(&::core::pack::task::PackerTask::total_residue) ) );

		{ //::core::pose::Pose
				typedef bp::class_< core::pose::Pose, utility::pointer::owning_ptr< ::core::pose::Pose > > Pose_exposer_t;
				Pose_exposer_t Pose_exposer = Pose_exposer_t( "Pose" );
				bp::scope Pose_scope( Pose_exposer );
				Pose_exposer.def( bp::init< >() );
				{ //::core::pose::Pose::aa

						typedef ::core::chemical::AA const & ( ::core::pose::Pose::*aa_function_type )( int const ) const;

						Pose_exposer.def(
								"aa"
								, aa_function_type( &::core::pose::Pose::aa )
								, ( bp::arg("seqpos") )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::pose::Pose::append_residue

						typedef void ( ::core::pose::Pose::*append_residue_function_type )( ::core::conformation::ResidueCOP,bool const,int const,int const,int const ) ;

						Pose_exposer.def(
								"append_residue"
								, append_residue_function_type( &::core::pose::Pose::append_residue )
								, ( bp::arg("new_rsd"), bp::arg("attach_by_jump")=(bool const)(false), bp::arg("jump_anchor_residue")=(int const)(0), bp::arg("jump_anchor_atomno")=(int const)(0), bp::arg("jump_root_atomno")=(int const)(0) ) );

				}
				{ //::core::pose::Pose::atom_tree

						typedef ::core::kinematics::AtomTree const & ( ::core::pose::Pose::*atom_tree_function_type )(  ) const;

						Pose_exposer.def(
								"atom_tree"
								, atom_tree_function_type( &::core::pose::Pose::atom_tree )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::pose::Pose::chain

						typedef int ( ::core::pose::Pose::*chain_function_type )( int const ) const;

						Pose_exposer.def(
								"chain"
								, chain_function_type( &::core::pose::Pose::chain )
								, ( bp::arg("seqpos") ) );

				}
				{ //::core::pose::Pose::chi

						typedef ::protocols::moves::Real ( ::core::pose::Pose::*chi_function_type )( int const,int const ) const;

						Pose_exposer.def(
								"chi"
								, chi_function_type( &::core::pose::Pose::chi )
								, ( bp::arg("chino"), bp::arg("seqpos") ) );

				}
				{ //::core::pose::Pose::clear

						typedef void ( ::core::pose::Pose::*clear_function_type )(  ) ;

						Pose_exposer.def(
								"clear"
								, clear_function_type( &::core::pose::Pose::clear ) );

				}
				{ //::core::pose::Pose::conformation

						typedef ::core::conformation::Conformation const & ( ::core::pose::Pose::*conformation_function_type )(  ) const;

						Pose_exposer.def(
								"conformation"
								, conformation_function_type( &::core::pose::Pose::conformation )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::pose::Pose::conformation

						typedef ::core::conformation::Conformation & ( ::core::pose::Pose::*conformation_function_type )(  ) ;

						Pose_exposer.def(
								"conformation"
								, conformation_function_type( &::core::pose::Pose::conformation )
								, bp::return_value_policy< bp::return_by_value >() );

				}
				{ //::core::pose::Pose::copy_segment

						typedef void ( ::core::pose::Pose::*copy_segment_function_type )( int const,::core::pose::Pose const &,int const,int const ) ;

						Pose_exposer.def(
								"copy_segment"
								, copy_segment_function_type( &::core::pose::Pose::copy_segment )
								, ( bp::arg("size"), bp::arg("src"), bp::arg("begin"), bp::arg("src_begin") ) );

				}
				{ //::core::pose::Pose::dof

						typedef ::protocols::moves::Real ( ::core::pose::Pose::*dof_function_type )( ::core::id::DOF_ID const & ) const;

						Pose_exposer.def(
								"dof"
								, dof_function_type( &::core::pose::Pose::dof )
								, ( bp::arg("id") ) );

				}
				{ //::core::pose::Pose::dump_pdb

						typedef bool ( ::core::pose::Pose::*dump_pdb_function_type )( ::std::string const & ) const;

						Pose_exposer.def(
								"dump_pdb"
								, dump_pdb_function_type( &::core::pose::Pose::dump_pdb )
								, ( bp::arg("file_name") ) );

				}
				{ //::core::pose::Pose::energies

						typedef ::core::scoring::Energies const & ( ::core::pose::Pose::*energies_function_type )(  ) const;

						Pose_exposer.def(
								"energies"
								, energies_function_type( &::core::pose::Pose::energies )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::pose::Pose::energies

						typedef ::core::scoring::Energies & ( ::core::pose::Pose::*energies_function_type )(  ) ;

						Pose_exposer.def(
								"energies"
								, energies_function_type( &::core::pose::Pose::energies )
								, bp::return_value_policy< bp::return_by_value >() );

				}
				{ //::core::pose::Pose::fold_tree

						typedef ::core::kinematics::FoldTree const & ( ::core::pose::Pose::*fold_tree_function_type )(  ) const;

						Pose_exposer.def(
								"fold_tree"
								, fold_tree_function_type( &::core::pose::Pose::fold_tree )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::pose::Pose::fold_tree

						typedef void ( ::core::pose::Pose::*fold_tree_function_type )( ::core::kinematics::FoldTree const & ) ;

						Pose_exposer.def(
								"fold_tree"
								, fold_tree_function_type( &::core::pose::Pose::fold_tree )
								, ( bp::arg("fold_tree_in") ) );

				}
				{ //::core::pose::Pose::jump

						typedef ::core::kinematics::Jump const & ( ::core::pose::Pose::*jump_function_type )( int const ) const;

						Pose_exposer.def(
								"jump"
								, jump_function_type( &::core::pose::Pose::jump )
								, ( bp::arg("jump_number") )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::pose::Pose::jump

						typedef ::core::kinematics::Jump const & ( ::core::pose::Pose::*jump_function_type )( ::core::id::AtomID const & ) const;

						Pose_exposer.def(
								"jump"
								, jump_function_type( &::core::pose::Pose::jump )
								, ( bp::arg("id") )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::pose::Pose::n_residue

						typedef ::size_t ( ::core::pose::Pose::*n_residue_function_type )(  ) const;

						Pose_exposer.def(
								"n_residue"
								, n_residue_function_type( &::core::pose::Pose::n_residue ) );

				}
				{ //::core::pose::Pose::num_jump

						typedef int ( ::core::pose::Pose::*num_jump_function_type )(  ) const;

						Pose_exposer.def(
								"num_jump"
								, num_jump_function_type( &::core::pose::Pose::num_jump ) );

				}
				{ //::core::pose::Pose::omega

						typedef ::protocols::moves::Real ( ::core::pose::Pose::*omega_function_type )( int const ) const;

						Pose_exposer.def(
								"omega"
								, omega_function_type( &::core::pose::Pose::omega )
								, ( bp::arg("seqpos") ) );

				}
				{ //::core::pose::Pose::phi

						typedef ::protocols::moves::Real ( ::core::pose::Pose::*phi_function_type )( int const ) const;

						Pose_exposer.def(
								"phi"
								, phi_function_type( &::core::pose::Pose::phi )
								, ( bp::arg("pos") ) );

				}
				{ //::core::pose::Pose::psi

						typedef ::protocols::moves::Real ( ::core::pose::Pose::*psi_function_type )( int const ) const;

						Pose_exposer.def(
								"psi"
								, psi_function_type( &::core::pose::Pose::psi )
								, ( bp::arg("seqpos") ) );

				}
				{ //::core::pose::Pose::replace_residue

						typedef void ( ::core::pose::Pose::*replace_residue_function_type )( int const,::core::conformation::Residue const &,bool const ) ;

						Pose_exposer.def(
								"replace_residue"
								, replace_residue_function_type( &::core::pose::Pose::replace_residue )
								, ( bp::arg("seqpos"), bp::arg("new_rsd_in"), bp::arg("orient_backbone") ) );

				}
				{ //::core::pose::Pose::res_begin

						typedef ::__gnu_cxx::__normal_iterator<utility::pointer::owning_ptr<core::conformation::Residue>*, std::vector<utility::pointer::owning_ptr<core::conformation::Residue>, std::allocator<utility::pointer::owning_ptr<core::conformation::Residue> > > > ( ::core::pose::Pose::*res_begin_function_type )(  ) ;

						Pose_exposer.def(
								"res_begin"
								, res_begin_function_type( &::core::pose::Pose::res_begin ) );

				}
				{ //::core::pose::Pose::res_end

						typedef ::__gnu_cxx::__normal_iterator<utility::pointer::owning_ptr<core::conformation::Residue>*, std::vector<utility::pointer::owning_ptr<core::conformation::Residue>, std::allocator<utility::pointer::owning_ptr<core::conformation::Residue> > > > ( ::core::pose::Pose::*res_end_function_type )(  ) ;

						Pose_exposer.def(
								"res_end"
								, res_end_function_type( &::core::pose::Pose::res_end ) );

				}
				{ //::core::pose::Pose::residue

						typedef ::core::conformation::Residue const & ( ::core::pose::Pose::*residue_function_type )( int const ) const;

						Pose_exposer.def(
								"residue"
								, residue_function_type( &::core::pose::Pose::residue )
								, ( bp::arg("seqpos") )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::pose::Pose::scoring_begin

						typedef void ( ::core::pose::Pose::*scoring_begin_function_type )( ::core::scoring::ScoreFunctionInfoOP ) ;

						Pose_exposer.def(
								"scoring_begin"
								, scoring_begin_function_type( &::core::pose::Pose::scoring_begin )
								, ( bp::arg("info") ) );

				}
				{ //::core::pose::Pose::scoring_end

						typedef void ( ::core::pose::Pose::*scoring_end_function_type )(  ) ;

						Pose_exposer.def(
								"scoring_end"
								, scoring_end_function_type( &::core::pose::Pose::scoring_end ) );

				}
				{ //::core::pose::Pose::secstruct

						typedef char ( ::core::pose::Pose::*secstruct_function_type )( int const ) const;

						Pose_exposer.def(
								"secstruct"
								, secstruct_function_type( &::core::pose::Pose::secstruct )
								, ( bp::arg("arg0") ) );

				}
				{ //::core::pose::Pose::sequence

						typedef ::std::string ( ::core::pose::Pose::*sequence_function_type )(  ) const;

						Pose_exposer.def(
								"sequence"
								, sequence_function_type( &::core::pose::Pose::sequence ) );

				}
				{ //::core::pose::Pose::set_chi

						typedef void ( ::core::pose::Pose::*set_chi_function_type )( int const,int const,::protocols::moves::Real const ) ;

						Pose_exposer.def(
								"set_chi"
								, set_chi_function_type( &::core::pose::Pose::set_chi )
								, ( bp::arg("chino"), bp::arg("seqpos"), bp::arg("setting") ) );

				}
				{ //::core::pose::Pose::set_dof

						typedef void ( ::core::pose::Pose::*set_dof_function_type )( ::core::id::DOF_ID const &,::protocols::moves::Real const ) ;

						Pose_exposer.def(
								"set_dof"
								, set_dof_function_type( &::core::pose::Pose::set_dof )
								, ( bp::arg("id"), bp::arg("setting") ) );

				}
				{ //::core::pose::Pose::set_jump

						typedef void ( ::core::pose::Pose::*set_jump_function_type )( int const,::core::kinematics::Jump const & ) ;

						Pose_exposer.def(
								"set_jump"
								, set_jump_function_type( &::core::pose::Pose::set_jump )
								, ( bp::arg("jump_number"), bp::arg("new_jump") ) );

				}
				{ //::core::pose::Pose::set_jump

						typedef void ( ::core::pose::Pose::*set_jump_function_type )( ::core::id::AtomID const &,::core::kinematics::Jump const & ) ;

						Pose_exposer.def(
								"set_jump"
								, set_jump_function_type( &::core::pose::Pose::set_jump )
								, ( bp::arg("id"), bp::arg("new_jump") ) );

				}
				{ //::core::pose::Pose::set_omega

						typedef void ( ::core::pose::Pose::*set_omega_function_type )( int const,::protocols::moves::Real const ) ;

						Pose_exposer.def(
								"set_omega"
								, set_omega_function_type( &::core::pose::Pose::set_omega )
								, ( bp::arg("seqpos"), bp::arg("setting") ) );

				}
				{ //::core::pose::Pose::set_phi

						typedef void ( ::core::pose::Pose::*set_phi_function_type )( int const,::protocols::moves::Real const ) ;

						Pose_exposer.def(
								"set_phi"
								, set_phi_function_type( &::core::pose::Pose::set_phi )
								, ( bp::arg("seqpos"), bp::arg("setting") ) );

				}
				{ //::core::pose::Pose::set_psi

						typedef void ( ::core::pose::Pose::*set_psi_function_type )( int const,::protocols::moves::Real const ) ;

						Pose_exposer.def(
								"set_psi"
								, set_psi_function_type( &::core::pose::Pose::set_psi )
								, ( bp::arg("seqpos"), bp::arg("setting") ) );

				}
				{ //::core::pose::Pose::set_torsion

						typedef void ( ::core::pose::Pose::*set_torsion_function_type )( ::core::id::TorsionID const &,::protocols::moves::Real const ) ;

						Pose_exposer.def(
								"set_torsion"
								, set_torsion_function_type( &::core::pose::Pose::set_torsion )
								, ( bp::arg("id"), bp::arg("setting") ) );

				}
				{ //::core::pose::Pose::set_xyz

						typedef void ( ::core::pose::Pose::*set_xyz_function_type )( ::core::id::AtomID const &,::core::PointPosition const & ) ;

						Pose_exposer.def(
								"set_xyz"
								, set_xyz_function_type( &::core::pose::Pose::set_xyz )
								, ( bp::arg("id"), bp::arg("point") ) );

				}
				{ //::core::pose::Pose::torsion

						typedef ::protocols::moves::Real ( ::core::pose::Pose::*torsion_function_type )( ::core::id::TorsionID const & ) const;

						Pose_exposer.def(
								"torsion"
								, torsion_function_type( &::core::pose::Pose::torsion )
								, ( bp::arg("id") ) );

				}
				{ //::core::pose::Pose::total_residue

						typedef ::size_t ( ::core::pose::Pose::*total_residue_function_type )(  ) const;

						Pose_exposer.def(
								"total_residue"
								, total_residue_function_type( &::core::pose::Pose::total_residue ) );

				}
				{ //::core::pose::Pose::update_actcoords

						typedef void ( ::core::pose::Pose::*update_actcoords_function_type )(  ) ;

						Pose_exposer.def(
								"update_actcoords"
								, update_actcoords_function_type( &::core::pose::Pose::update_actcoords ) );

				}
				{ //::core::pose::Pose::update_residue_neighbors

						typedef void ( ::core::pose::Pose::*update_residue_neighbors_function_type )(  ) ;

						Pose_exposer.def(
								"update_residue_neighbors"
								, update_residue_neighbors_function_type( &::core::pose::Pose::update_residue_neighbors ) );

				}
				{ //::core::pose::Pose::xyz

						typedef ::core::PointPosition const & ( ::core::pose::Pose::*xyz_function_type )( ::core::id::AtomID const & ) const;

						Pose_exposer.def(
								"xyz"
								, xyz_function_type( &::core::pose::Pose::xyz )
								, ( bp::arg("id") )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				Pose_exposer.def("__iter__", bp::range( &core::pose::Pose::res_begin, &core::pose::Pose::res_end));
		}

		bp::class_< core::scoring::EMapVector >( "EMapVector" )
				.def( bp::init< >() )
				.def(
						"accumulate"
						, (void ( ::core::scoring::EMapVector::* )( ::core::scoring::EMapVector const &,::core::scoring::ScoreTypes const & ) )( &::core::scoring::EMapVector::accumulate )
						, ( bp::arg("src"), bp::arg("l") ) )
				.def(
						"accumulate"
						, (void ( ::core::scoring::EMapVector::* )( ::core::scoring::EMapVector const &,::core::scoring::ScoreTypes const &,::protocols::moves::Real const ) )( &::core::scoring::EMapVector::accumulate )
						, ( bp::arg("src"), bp::arg("l"), bp::arg("wt") ) )
				.def(
						"begin"
						, (::protocols::moves::Real const * ( ::core::scoring::EMapVector::* )(  ) const)( &::core::scoring::EMapVector::begin )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"begin"
						, (::protocols::moves::Real * ( ::core::scoring::EMapVector::* )(  ) )( &::core::scoring::EMapVector::begin )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"clear"
						, (void ( ::core::scoring::EMapVector::* )(  ) )( &::core::scoring::EMapVector::clear ) )
				.def(
						"dot"
						, (::protocols::moves::Real ( ::core::scoring::EMapVector::* )( ::core::scoring::EMapVector const & ) const)( &::core::scoring::EMapVector::dot )
						, ( bp::arg("src") ) )
				.def(
						"end"
						, (::protocols::moves::Real const * ( ::core::scoring::EMapVector::* )(  ) const)( &::core::scoring::EMapVector::end )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"end"
						, (::protocols::moves::Real * ( ::core::scoring::EMapVector::* )(  ) )( &::core::scoring::EMapVector::end )
						, bp::return_value_policy< bp::return_by_value >() )
				.def(
						"get"
						, (::protocols::moves::Real ( ::core::scoring::EMapVector::* )( ::core::scoring::ScoreType ) )( &::core::scoring::EMapVector::get )
						, ( bp::arg("st") ) )
				.def(
						"norm_squared"
						, (::protocols::moves::Real ( ::core::scoring::EMapVector::* )( ::core::scoring::ScoreTypes const & ) )( &::core::scoring::EMapVector::norm_squared )
						, ( bp::arg("l") ) )
				.def( bp::self += bp::self )
				.def(
						"__getitem__"
						, (::protocols::moves::Real & ( ::core::scoring::EMapVector::* )( ::core::scoring::ScoreType ) )( &::core::scoring::EMapVector::operator[] )
						, ( bp::arg("st") )
						, bp::return_value_policy< bp::copy_non_const_reference >() )
				.def(
						"__getitem__"
						, (::protocols::moves::Real ( ::core::scoring::EMapVector::* )( ::core::scoring::ScoreType ) const)( &::core::scoring::EMapVector::operator[] )
						, ( bp::arg("st") ) )
				.def(
						"set"
						, (::protocols::moves::Real ( ::core::scoring::EMapVector::* )( ::core::scoring::ScoreType,::protocols::moves::Real ) )( &::core::scoring::EMapVector::set )
						, ( bp::arg("st"), bp::arg("val") ) )
				.def(
						"zero"
						, (void ( ::core::scoring::EMapVector::* )( ::core::scoring::ScoreTypes const & ) )( &::core::scoring::EMapVector::zero )
						, ( bp::arg("l") ) )
				.def(
						"zero"
						, (void ( ::core::scoring::EMapVector::* )(  ) )( &::core::scoring::EMapVector::zero ) );

		bp::class_< core::scoring::Ramachandran, utility::pointer::owning_ptr< ::core::scoring::Ramachandran > >( "Ramachandran" )
				.def( bp::init< >() )
				.def(
						"eval_procheck_rama"
						, (void ( ::core::scoring::Ramachandran::* )( ::core::pose::Pose const &,::protocols::moves::Real &,::protocols::moves::Real &,::protocols::moves::Real & ) const)( &::core::scoring::Ramachandran::eval_procheck_rama )
						, ( bp::arg("a_pose"), bp::arg("favorable"), bp::arg("allowed"), bp::arg("generous") ) )
				.def(
						"eval_rama_score_all"
						, (void ( ::core::scoring::Ramachandran::* )( ::core::pose::Pose &,::core::scoring::ScoreFunction const & ) const)( &::core::scoring::Ramachandran::eval_rama_score_all )
						, ( bp::arg("pose"), bp::arg("scorefxn") ) )
				.def(
						"eval_rama_score_residue"
						, (::protocols::moves::Real ( ::core::scoring::Ramachandran::* )( ::core::chemical::AA const,::protocols::moves::Real const,::protocols::moves::Real const ) const)( &::core::scoring::Ramachandran::eval_rama_score_residue )
						, ( bp::arg("res_aa"), bp::arg("phi"), bp::arg("psi") ) )
				.def(
						"eval_rama_score_residue"
						, (void ( ::core::scoring::Ramachandran::* )( ::core::conformation::Residue const &,::protocols::moves::Real &,::protocols::moves::Real &,::protocols::moves::Real & ) const)( &::core::scoring::Ramachandran::eval_rama_score_residue )
						, ( bp::arg("res"), bp::arg("rama"), bp::arg("drama_dphi"), bp::arg("drama_dpsi") ) )
				.def(
						"eval_rama_score_residue"
						, (void ( ::core::scoring::Ramachandran::* )( ::core::chemical::AA const,::protocols::moves::Real const,::protocols::moves::Real const,::protocols::moves::Real &,::protocols::moves::Real &,::protocols::moves::Real & ) const)( &::core::scoring::Ramachandran::eval_rama_score_residue )
						, ( bp::arg("res_aa"), bp::arg("phi"), bp::arg("psi"), bp::arg("rama"), bp::arg("drama_dphi"), bp::arg("drama_dpsi") ) )
				.def(
						"write_rama_score_all"
						, (void ( ::core::scoring::Ramachandran::* )( ::core::pose::Pose const & ) const)( &::core::scoring::Ramachandran::write_rama_score_all )
						, ( bp::arg("pose") ) );

		{ //::core::scoring::ScoreFunction
				typedef bp::class_< ScoreFunction_wrapper, utility::pointer::owning_ptr< ::core::scoring::ScoreFunction > > ScoreFunction_exposer_t;
				ScoreFunction_exposer_t ScoreFunction_exposer = ScoreFunction_exposer_t( "ScoreFunction" );
				bp::scope ScoreFunction_scope( ScoreFunction_exposer );
				ScoreFunction_exposer.def( bp::init< >() );
				ScoreFunction_exposer.def( bp::init< core::scoring::ScoreFunction const & >(( bp::arg("arg0") ))[bp::return_value_policy< bp::return_by_value >()] );
				{ //::core::scoring::ScoreFunction::accumulate_residue_total_energies

						typedef void ( ::core::scoring::ScoreFunction::*accumulate_residue_total_energies_function_type )( ::core::pose::Pose & ) const;

						ScoreFunction_exposer.def(
								"accumulate_residue_total_energies"
								, accumulate_residue_total_energies_function_type( &::core::scoring::ScoreFunction::accumulate_residue_total_energies )
								, ( bp::arg("pose") ) );

				}
				{ //::core::scoring::ScoreFunction::add_method

						typedef void ( ::core::scoring::ScoreFunction::*add_method_function_type )( ::core::scoring::methods::EnergyMethodOP ) ;

						ScoreFunction_exposer.def(
								"add_method"
								, add_method_function_type( &::core::scoring::ScoreFunction::add_method )
								, ( bp::arg("method") ) );

				}
				{ //::core::scoring::ScoreFunction::bump_check_backbone

						typedef void ( ::core::scoring::ScoreFunction::*bump_check_backbone_function_type )( ::core::conformation::Residue const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::EnergyMap & ) const;

						ScoreFunction_exposer.def(
								"bump_check_backbone"
								, bump_check_backbone_function_type( &::core::scoring::ScoreFunction::bump_check_backbone )
								, ( bp::arg("rsd1"), bp::arg("rsd2"), bp::arg("pose"), bp::arg("emap") ) );

				}
				{ //::core::scoring::ScoreFunction::bump_check_full

						typedef void ( ::core::scoring::ScoreFunction::*bump_check_full_function_type )( ::core::conformation::Residue const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::EnergyMap & ) const;

						ScoreFunction_exposer.def(
								"bump_check_full"
								, bump_check_full_function_type( &::core::scoring::ScoreFunction::bump_check_full )
								, ( bp::arg("rsd1"), bp::arg("rsd2"), bp::arg("pose"), bp::arg("emap") ) );

				}
				{ //::core::scoring::ScoreFunction::cd_2b_types

						typedef ::core::scoring::ScoreTypes const & ( ::core::scoring::ScoreFunction::*cd_2b_types_function_type )(  ) const;

						ScoreFunction_exposer.def(
								"cd_2b_types"
								, cd_2b_types_function_type( &::core::scoring::ScoreFunction::cd_2b_types )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::scoring::ScoreFunction::ci_1b_types

						typedef ::core::scoring::ScoreTypes const & ( ::core::scoring::ScoreFunction::*ci_1b_types_function_type )(  ) const;

						ScoreFunction_exposer.def(
								"ci_1b_types"
								, ci_1b_types_function_type( &::core::scoring::ScoreFunction::ci_1b_types )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::scoring::ScoreFunction::ci_2b_types

						typedef ::core::scoring::ScoreTypes const & ( ::core::scoring::ScoreFunction::*ci_2b_types_function_type )(  ) const;

						ScoreFunction_exposer.def(
								"ci_2b_types"
								, ci_2b_types_function_type( &::core::scoring::ScoreFunction::ci_2b_types )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::scoring::ScoreFunction::clone

						typedef ::core::scoring::ScoreFunctionOP ( ::core::scoring::ScoreFunction::*clone_function_type )(  ) const;

						ScoreFunction_exposer.def(
								"clone"
								, clone_function_type( &::core::scoring::ScoreFunction::clone ) );

				}
				{ //::core::scoring::ScoreFunction::eval_atom_derivative

						typedef void ( ::core::scoring::ScoreFunction::*eval_atom_derivative_function_type )( ::core::id::AtomID const &,::core::pose::Pose const &,::core::Vector &,::core::Vector & ) const;

						ScoreFunction_exposer.def(
								"eval_atom_derivative"
								, eval_atom_derivative_function_type( &::core::scoring::ScoreFunction::eval_atom_derivative )
								, ( bp::arg("atom_id"), bp::arg("pose"), bp::arg("F1"), bp::arg("F2") ) );

				}
				{ //::core::scoring::ScoreFunction::eval_cd_2b

						typedef void ( ::core::scoring::ScoreFunction::*eval_cd_2b_function_type )( ::core::conformation::Residue const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::EnergyMap & ) const;

						ScoreFunction_exposer.def(
								"eval_cd_2b"
								, eval_cd_2b_function_type( &::core::scoring::ScoreFunction::eval_cd_2b )
								, ( bp::arg("rsd1"), bp::arg("rsd2"), bp::arg("pose"), bp::arg("emap") ) );

				}
				{ //::core::scoring::ScoreFunction::eval_ci_1b

						typedef void ( ::core::scoring::ScoreFunction::*eval_ci_1b_function_type )( ::core::conformation::Residue const &,::core::scoring::EnergyMap & ) const;

						ScoreFunction_exposer.def(
								"eval_ci_1b"
								, eval_ci_1b_function_type( &::core::scoring::ScoreFunction::eval_ci_1b )
								, ( bp::arg("rsd"), bp::arg("emap") ) );

				}
				{ //::core::scoring::ScoreFunction::eval_ci_2b

						typedef void ( ::core::scoring::ScoreFunction::*eval_ci_2b_function_type )( ::core::conformation::Residue const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::EnergyMap & ) const;

						ScoreFunction_exposer.def(
								"eval_ci_2b"
								, eval_ci_2b_function_type( &::core::scoring::ScoreFunction::eval_ci_2b )
								, ( bp::arg("rsd1"), bp::arg("rsd2"), bp::arg("pose"), bp::arg("emap") ) );

				}
				{ //::core::scoring::ScoreFunction::eval_dof_derivative

						typedef ::protocols::moves::Real ( ::core::scoring::ScoreFunction::*eval_dof_derivative_function_type )( ::core::id::DOF_ID const &,::core::id::TorsionID const &,::core::pose::Pose const & ) const;

						ScoreFunction_exposer.def(
								"eval_dof_derivative"
								, eval_dof_derivative_function_type( &::core::scoring::ScoreFunction::eval_dof_derivative )
								, ( bp::arg("dof_id"), bp::arg("torsion_id"), bp::arg("pose") ) );

				}
				{ //::core::scoring::ScoreFunction::eval_onebody_energies

						typedef void ( ::core::scoring::ScoreFunction::*eval_onebody_energies_function_type )( ::core::pose::Pose & ) const;

						ScoreFunction_exposer.def(
								"eval_onebody_energies"
								, eval_onebody_energies_function_type( &::core::scoring::ScoreFunction::eval_onebody_energies )
								, ( bp::arg("pose") ) );

				}
				{ //::core::scoring::ScoreFunction::eval_twobody_neighbor_energies

						typedef void ( ::core::scoring::ScoreFunction::*eval_twobody_neighbor_energies_function_type )( ::core::pose::Pose & ) const;

						ScoreFunction_exposer.def(
								"eval_twobody_neighbor_energies"
								, eval_twobody_neighbor_energies_function_type( &::core::scoring::ScoreFunction::eval_twobody_neighbor_energies )
								, ( bp::arg("pose") ) );

				}
				{ //::core::scoring::ScoreFunction::evaluate_rotamer_background_energies

						typedef void ( ::core::scoring::ScoreFunction::*evaluate_rotamer_background_energies_function_type )( ::core::pack::rotamer_set::RotamerSet const &,::core::conformation::Residue const &,::core::pose::Pose const &,::utility::vector1<double, std::allocator<double> > & ) const;

						ScoreFunction_exposer.def(
								"evaluate_rotamer_background_energies"
								, evaluate_rotamer_background_energies_function_type( &::core::scoring::ScoreFunction::evaluate_rotamer_background_energies )
								, ( bp::arg("set1"), bp::arg("residue2"), bp::arg("pose"), bp::arg("energy_vector") ) );

				}
				{ //::core::scoring::ScoreFunction::evaluate_rotamer_pair_energies

						typedef void ( ::core::scoring::ScoreFunction::*evaluate_rotamer_pair_energies_function_type )( ::core::pack::rotamer_set::RotamerSet const &,::core::pack::rotamer_set::RotamerSet const &,::core::pose::Pose const &,::ObjexxFCL::FArray2D<double> & ) const;

						ScoreFunction_exposer.def(
								"evaluate_rotamer_pair_energies"
								, evaluate_rotamer_pair_energies_function_type( &::core::scoring::ScoreFunction::evaluate_rotamer_pair_energies )
								, ( bp::arg("set1"), bp::arg("set2"), bp::arg("pose"), bp::arg("energy_table") ) );

				}
				{ //::core::scoring::ScoreFunction::get_weight

						typedef ::protocols::moves::Real ( ::core::scoring::ScoreFunction::*get_weight_function_type )( ::core::scoring::ScoreType const & ) const;

						ScoreFunction_exposer.def(
								"get_weight"
								, get_weight_function_type( &::core::scoring::ScoreFunction::get_weight )
								, ( bp::arg("t") ) );

				}
				{ //::core::scoring::ScoreFunction::has_nonzero_weight

						typedef bool ( ::core::scoring::ScoreFunction::*has_nonzero_weight_function_type )( ::core::scoring::ScoreType const & ) const;

						ScoreFunction_exposer.def(
								"has_nonzero_weight"
								, has_nonzero_weight_function_type( &::core::scoring::ScoreFunction::has_nonzero_weight )
								, ( bp::arg("t") ) );

				}
				{ //::core::scoring::ScoreFunction::has_zero_weight

						typedef bool ( ::core::scoring::ScoreFunction::*has_zero_weight_function_type )( ::core::scoring::ScoreType const & ) const;

						ScoreFunction_exposer.def(
								"has_zero_weight"
								, has_zero_weight_function_type( &::core::scoring::ScoreFunction::has_zero_weight )
								, ( bp::arg("t") ) );

				}
				{ //::core::scoring::ScoreFunction::indicate_required_context_graphs

						typedef void ( ::core::scoring::ScoreFunction::*indicate_required_context_graphs_function_type )( ::utility::vector1<bool, std::allocator<bool> > & ) const;

						ScoreFunction_exposer.def(
								"indicate_required_context_graphs"
								, indicate_required_context_graphs_function_type( &::core::scoring::ScoreFunction::indicate_required_context_graphs )
								, ( bp::arg("context_graphs_required") ) );

				}
				{ //::core::scoring::ScoreFunction::info

						typedef ::core::scoring::ScoreFunctionInfoOP ( ::core::scoring::ScoreFunction::*info_function_type )(  ) const;

						ScoreFunction_exposer.def(
								"info"
								, info_function_type( &::core::scoring::ScoreFunction::info ) );

				}
				{ //::core::scoring::ScoreFunction::max_atomic_interaction_cutoff

						typedef ::core::Distance ( ::core::scoring::ScoreFunction::*max_atomic_interaction_cutoff_function_type )(  ) const;

						ScoreFunction_exposer.def(
								"max_atomic_interaction_cutoff"
								, max_atomic_interaction_cutoff_function_type( &::core::scoring::ScoreFunction::max_atomic_interaction_cutoff ) );

				}
				{ //::core::scoring::ScoreFunction::operator()

						typedef ::protocols::moves::Real ( ::core::scoring::ScoreFunction::*__call___function_type )( ::core::pose::Pose & ) const;
						typedef ::protocols::moves::Real ( ScoreFunction_wrapper::*default___call___function_type )( ::core::pose::Pose & ) const;

						ScoreFunction_exposer.def(
								"__call__"
								, __call___function_type(&::core::scoring::ScoreFunction::operator())
								, default___call___function_type(&ScoreFunction_wrapper::default___call__)
								, ( bp::arg("pose") ) );

				}
				{ //::core::scoring::ScoreFunction::operator[]

						typedef ::protocols::moves::Real ( ::core::scoring::ScoreFunction::*__getitem___function_type )( ::core::scoring::ScoreType const & ) const;

						ScoreFunction_exposer.def(
								"__getitem__"
								, __getitem___function_type( &::core::scoring::ScoreFunction::operator[] )
								, ( bp::arg("t") ) );

				}
				{ //::core::scoring::ScoreFunction::prepare_rotamers_for_packing

						typedef void ( ::core::scoring::ScoreFunction::*prepare_rotamers_for_packing_function_type )( ::core::pose::Pose const &,::core::pack::rotamer_set::RotamerSet & ) const;

						ScoreFunction_exposer.def(
								"prepare_rotamers_for_packing"
								, prepare_rotamers_for_packing_function_type( &::core::scoring::ScoreFunction::prepare_rotamers_for_packing )
								, ( bp::arg("pose"), bp::arg("set") ) );

				}
				{ //::core::scoring::ScoreFunction::score_types_by_method_type

						typedef ::core::scoring::ScoreTypes const & ( ::core::scoring::ScoreFunction::*score_types_by_method_type_function_type )( ::core::scoring::methods::EnergyMethodType const & ) const;

						ScoreFunction_exposer.def(
								"score_types_by_method_type"
								, score_types_by_method_type_function_type( &::core::scoring::ScoreFunction::score_types_by_method_type )
								, ( bp::arg("t") )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
				{ //::core::scoring::ScoreFunction::set_etable

						typedef void ( ::core::scoring::ScoreFunction::*set_etable_function_type )( ::std::string const & ) ;

						ScoreFunction_exposer.def(
								"set_etable"
								, set_etable_function_type( &::core::scoring::ScoreFunction::set_etable )
								, ( bp::arg("etable_name") ) );

				}
				{ //::core::scoring::ScoreFunction::set_weight

						typedef void ( ::core::scoring::ScoreFunction::*set_weight_function_type )( ::core::scoring::ScoreType const &,::protocols::moves::Real const & ) ;

						ScoreFunction_exposer.def(
								"set_weight"
								, set_weight_function_type( &::core::scoring::ScoreFunction::set_weight )
								, ( bp::arg("t"), bp::arg("setting") ) );

				}
				{ //::core::scoring::ScoreFunction::setup_for_derivatives

						typedef void ( ::core::scoring::ScoreFunction::*setup_for_derivatives_function_type )( ::core::pose::Pose & ) const;

						ScoreFunction_exposer.def(
								"setup_for_derivatives"
								, setup_for_derivatives_function_type( &::core::scoring::ScoreFunction::setup_for_derivatives )
								, ( bp::arg("pose") ) );

				}
				{ //::core::scoring::ScoreFunction::setup_for_minimizing

						typedef void ( ::core::scoring::ScoreFunction::*setup_for_minimizing_function_type )( ::core::pose::Pose &,::core::optimization::MinimizerMap const & ) const;

						ScoreFunction_exposer.def(
								"setup_for_minimizing"
								, setup_for_minimizing_function_type( &::core::scoring::ScoreFunction::setup_for_minimizing )
								, ( bp::arg("pose"), bp::arg("min_map") ) );

				}
				{ //::core::scoring::ScoreFunction::setup_for_packing

						typedef void ( ::core::scoring::ScoreFunction::*setup_for_packing_function_type )( ::core::pose::Pose & ) const;

						ScoreFunction_exposer.def(
								"setup_for_packing"
								, setup_for_packing_function_type( &::core::scoring::ScoreFunction::setup_for_packing )
								, ( bp::arg("pose") ) );

				}
				{ //::core::scoring::ScoreFunction::update_residue_for_packing

						typedef void ( ::core::scoring::ScoreFunction::*update_residue_for_packing_function_type )( ::core::pose::Pose &,::size_t ) const;

						ScoreFunction_exposer.def(
								"update_residue_for_packing"
								, update_residue_for_packing_function_type( &::core::scoring::ScoreFunction::update_residue_for_packing )
								, ( bp::arg("pose"), bp::arg("resid") ) );

				}
				{ //::core::scoring::ScoreFunction::weights

						typedef ::core::scoring::EnergyMap const & ( ::core::scoring::ScoreFunction::*weights_function_type )(  ) const;

						ScoreFunction_exposer.def(
								"weights"
								, weights_function_type( &::core::scoring::ScoreFunction::weights )
								, bp::return_value_policy< bp::copy_const_reference >() );

				}
		}

		bp::class_< EnergyMethod_wrapper, utility::pointer::owning_ptr< EnergyMethod_wrapper >, boost::noncopyable >( "EnergyMethod" )
				#.def(
				#		"add_score_type"
				#		, (void ( ::core::scoring::methods::EnergyMethod::* )( ::core::scoring::ScoreType const & ) )( &::core::scoring::methods::EnergyMethod::add_score_type )
				#		, ( bp::arg("type") ) )
				.def(
						"atomic_interaction_cutoff"
						, bp::pure_virtual( (::core::Distance ( ::core::scoring::methods::EnergyMethod::* )(  ) const)(&::core::scoring::methods::EnergyMethod::atomic_interaction_cutoff) ) )
				.def(
						"clone"
						, bp::pure_virtual( (::core::scoring::methods::EnergyMethodOP ( ::core::scoring::methods::EnergyMethod::* )(  ) const)(&::core::scoring::methods::EnergyMethod::clone) ) )
				.def(
						"eval_atom_derivative"
						, (void ( ::core::scoring::methods::EnergyMethod::* )( ::core::id::AtomID const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap const &,::core::Vector &,::core::Vector & ) const)(&::core::scoring::methods::EnergyMethod::eval_atom_derivative)
						, (void ( EnergyMethod_wrapper::* )( ::core::id::AtomID const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap const &,::core::Vector &,::core::Vector & ) const)(&EnergyMethod_wrapper::default_eval_atom_derivative)
						, ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3"), bp::arg("arg4"), bp::arg("arg5") ) )
				.def(
						"eval_dof_derivative"
						, (::protocols::moves::Real ( ::core::scoring::methods::EnergyMethod::* )( ::core::id::DOF_ID const &,::core::id::TorsionID const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap const & ) const)(&::core::scoring::methods::EnergyMethod::eval_dof_derivative)
						, (::protocols::moves::Real ( EnergyMethod_wrapper::* )( ::core::id::DOF_ID const &,::core::id::TorsionID const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap const & ) const)(&EnergyMethod_wrapper::default_eval_dof_derivative)
						, ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3"), bp::arg("arg4") ) )
				.def(
						"finalize_total_energy"
						, (void ( ::core::scoring::methods::EnergyMethod::* )( ::core::pose::Pose const &,::core::scoring::EnergyMap & ) const)(&::core::scoring::methods::EnergyMethod::finalize_total_energy)
						, (void ( EnergyMethod_wrapper::* )( ::core::pose::Pose const &,::core::scoring::EnergyMap & ) const)(&EnergyMethod_wrapper::default_finalize_total_energy)
						, ( bp::arg("arg0"), bp::arg("arg1") ) )
				.def(
						"indicate_required_context_graphs"
						, bp::pure_virtual( (void ( ::core::scoring::methods::EnergyMethod::* )( ::utility::vector1<bool, std::allocator<bool> > & ) const)(&::core::scoring::methods::EnergyMethod::indicate_required_context_graphs) )
						, ( bp::arg("context_graphs_required") ) )
				.def(
						"method_type"
						, bp::pure_virtual( (::core::scoring::methods::EnergyMethodType ( ::core::scoring::methods::EnergyMethod::* )(  ) const)(&::core::scoring::methods::EnergyMethod::method_type) ) )
				.def(
						"prepare_rotamers_for_packing"
						, (void ( ::core::scoring::methods::EnergyMethod::* )( ::core::pose::Pose const &,::core::pack::rotamer_set::RotamerSet & ) const)(&::core::scoring::methods::EnergyMethod::prepare_rotamers_for_packing)
						, (void ( EnergyMethod_wrapper::* )( ::core::pose::Pose const &,::core::pack::rotamer_set::RotamerSet & ) const)(&EnergyMethod_wrapper::default_prepare_rotamers_for_packing)
						, ( bp::arg("arg0"), bp::arg("arg1") ) )
				.def(
						"score_types"
						, (::core::scoring::ScoreTypes const & ( ::core::scoring::methods::EnergyMethod::* )(  ) const)( &::core::scoring::methods::EnergyMethod::score_types )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"setup_for_derivatives"
						, (void ( ::core::scoring::methods::EnergyMethod::* )( ::core::pose::Pose &,::core::scoring::ScoreFunction const & ) const)(&::core::scoring::methods::EnergyMethod::setup_for_derivatives)
						, (void ( EnergyMethod_wrapper::* )( ::core::pose::Pose &,::core::scoring::ScoreFunction const & ) const)(&EnergyMethod_wrapper::default_setup_for_derivatives)
						, ( bp::arg("arg0"), bp::arg("arg1") ) )
				.def(
						"setup_for_minimizing"
						, (void ( ::core::scoring::methods::EnergyMethod::* )( ::core::pose::Pose &,::core::scoring::ScoreFunction const &,::core::optimization::MinimizerMap const & ) const)(&::core::scoring::methods::EnergyMethod::setup_for_minimizing)
						, (void ( EnergyMethod_wrapper::* )( ::core::pose::Pose &,::core::scoring::ScoreFunction const &,::core::optimization::MinimizerMap const & ) const)(&EnergyMethod_wrapper::default_setup_for_minimizing)
						, ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2") ) )
				.def(
						"setup_for_packing"
						, (void ( ::core::scoring::methods::EnergyMethod::* )( ::core::pose::Pose & ) const)(&::core::scoring::methods::EnergyMethod::setup_for_packing)
						, (void ( EnergyMethod_wrapper::* )( ::core::pose::Pose & ) const)(&EnergyMethod_wrapper::default_setup_for_packing)
						, ( bp::arg("arg0") ) )
				.def(
						"setup_for_scoring"
						, (void ( ::core::scoring::methods::EnergyMethod::* )( ::core::pose::Pose &,::core::scoring::ScoreFunction const & ) const)(&::core::scoring::methods::EnergyMethod::setup_for_scoring)
						, (void ( EnergyMethod_wrapper::* )( ::core::pose::Pose &,::core::scoring::ScoreFunction const & ) const)(&EnergyMethod_wrapper::default_setup_for_scoring)
						, ( bp::arg("arg0"), bp::arg("arg1") ) )
				.def(
						"update_residue_for_packing"
						, (void ( ::core::scoring::methods::EnergyMethod::* )( ::core::pose::Pose &,::size_t ) const)(&::core::scoring::methods::EnergyMethod::update_residue_for_packing)
						, (void ( EnergyMethod_wrapper::* )( ::core::pose::Pose &,::size_t ) const)(&EnergyMethod_wrapper::default_update_residue_for_packing)
						, ( bp::arg("arg0"), bp::arg("arg1") ) );

		bp::class_< ContextIndependentOneBodyEnergy_wrapper, bp::bases< core::scoring::methods::EnergyMethod >, utility::pointer::owning_ptr< ContextIndependentOneBodyEnergy_wrapper >, boost::noncopyable >( "ContextIndependentOneBodyEnergy" )
				.def(
						"method_type"
						, (::core::scoring::methods::EnergyMethodType ( ::core::scoring::methods::ContextIndependentOneBodyEnergy::* )(  ) const)(&::core::scoring::methods::ContextIndependentOneBodyEnergy::method_type)
						, (::core::scoring::methods::EnergyMethodType ( ContextIndependentOneBodyEnergy_wrapper::* )(  ) const)(&ContextIndependentOneBodyEnergy_wrapper::default_method_type) )
				.def(
						"residue_energy"
						, bp::pure_virtual( (void ( ::core::scoring::methods::ContextIndependentOneBodyEnergy::* )( ::core::conformation::Residue const &,::core::scoring::EnergyMap & ) const)(&::core::scoring::methods::ContextIndependentOneBodyEnergy::residue_energy) )
						, ( bp::arg("rsd"), bp::arg("emap") ) )
				.def(
						"atomic_interaction_cutoff"
						, bp::pure_virtual( (::core::Distance ( ::core::scoring::methods::EnergyMethod::* )(  ) const)(&::core::scoring::methods::EnergyMethod::atomic_interaction_cutoff) ) )
				.def(
						"clone"
						, bp::pure_virtual( (::core::scoring::methods::EnergyMethodOP ( ::core::scoring::methods::EnergyMethod::* )(  ) const)(&::core::scoring::methods::EnergyMethod::clone) ) )
				.def(
						"indicate_required_context_graphs"
						, bp::pure_virtual( (void ( ::core::scoring::methods::EnergyMethod::* )( ::utility::vector1<bool, std::allocator<bool> > & ) const)(&::core::scoring::methods::EnergyMethod::indicate_required_context_graphs) )
						, ( bp::arg("context_graphs_required") ) );

		bp::class_< ContextIndependentTwoBodyEnergy_wrapper, bp::bases< core::scoring::methods::EnergyMethod >, utility::pointer::owning_ptr< ContextIndependentTwoBodyEnergy_wrapper >, boost::noncopyable >( "ContextIndependentTwoBodyEnergy" )
				.def(
						"bump_energy_backbone"
						, (void ( ::core::scoring::methods::ContextIndependentTwoBodyEnergy::* )( ::core::conformation::Residue const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap & ) const)(&::core::scoring::methods::ContextIndependentTwoBodyEnergy::bump_energy_backbone)
						, (void ( ContextIndependentTwoBodyEnergy_wrapper::* )( ::core::conformation::Residue const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap & ) const)(&ContextIndependentTwoBodyEnergy_wrapper::default_bump_energy_backbone)
						, ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3"), bp::arg("arg4") ) )
				.def(
						"bump_energy_full"
						, (void ( ::core::scoring::methods::ContextIndependentTwoBodyEnergy::* )( ::core::conformation::Residue const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap & ) const)(&::core::scoring::methods::ContextIndependentTwoBodyEnergy::bump_energy_full)
						, (void ( ContextIndependentTwoBodyEnergy_wrapper::* )( ::core::conformation::Residue const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap & ) const)(&ContextIndependentTwoBodyEnergy_wrapper::default_bump_energy_full)
						, ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3"), bp::arg("arg4") ) )
				.def(
						"eval_atom_derivative"
						, (void ( ::core::scoring::methods::ContextIndependentTwoBodyEnergy::* )( ::core::id::AtomID const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap const &,::core::Vector &,::core::Vector & ) const)(&::core::scoring::methods::ContextIndependentTwoBodyEnergy::eval_atom_derivative)
						, (void ( ContextIndependentTwoBodyEnergy_wrapper::* )( ::core::id::AtomID const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap const &,::core::Vector &,::core::Vector & ) const)(&ContextIndependentTwoBodyEnergy_wrapper::default_eval_atom_derivative)
						, ( bp::arg("arg0"), bp::arg("arg1"), bp::arg("arg2"), bp::arg("arg3"), bp::arg("arg4"), bp::arg("arg5") ) )
				.def(
						"evaluate_rotamer_background_energies"
						, (void ( ::core::scoring::methods::ContextIndependentTwoBodyEnergy::* )( ::core::pack::rotamer_set::RotamerSet const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap const &,::utility::vector1<double, std::allocator<double> > & ) const)(&::core::scoring::methods::ContextIndependentTwoBodyEnergy::evaluate_rotamer_background_energies)
						, (void ( ContextIndependentTwoBodyEnergy_wrapper::* )( ::core::pack::rotamer_set::RotamerSet const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap const &,::utility::vector1<double, std::allocator<double> > & ) const)(&ContextIndependentTwoBodyEnergy_wrapper::default_evaluate_rotamer_background_energies)
						, ( bp::arg("set"), bp::arg("residue"), bp::arg("pose"), bp::arg("sfxn"), bp::arg("weights"), bp::arg("energy_vector") ) )
				.def(
						"evaluate_rotamer_pair_energies"
						, (void ( ::core::scoring::methods::ContextIndependentTwoBodyEnergy::* )( ::core::pack::rotamer_set::RotamerSet const &,::core::pack::rotamer_set::RotamerSet const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap const &,::ObjexxFCL::FArray2D<double> & ) const)(&::core::scoring::methods::ContextIndependentTwoBodyEnergy::evaluate_rotamer_pair_energies)
						, (void ( ContextIndependentTwoBodyEnergy_wrapper::* )( ::core::pack::rotamer_set::RotamerSet const &,::core::pack::rotamer_set::RotamerSet const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap const &,::ObjexxFCL::FArray2D<double> & ) const)(&ContextIndependentTwoBodyEnergy_wrapper::default_evaluate_rotamer_pair_energies)
						, ( bp::arg("set1"), bp::arg("set2"), bp::arg("pose"), bp::arg("sfxn"), bp::arg("weights"), bp::arg("energy_table") ) )
				.def(
						"method_type"
						, (::core::scoring::methods::EnergyMethodType ( ::core::scoring::methods::ContextIndependentTwoBodyEnergy::* )(  ) const)(&::core::scoring::methods::ContextIndependentTwoBodyEnergy::method_type)
						, (::core::scoring::methods::EnergyMethodType ( ContextIndependentTwoBodyEnergy_wrapper::* )(  ) const)(&ContextIndependentTwoBodyEnergy_wrapper::default_method_type) )
				.def(
						"residue_pair_energy"
						, bp::pure_virtual( (void ( ::core::scoring::methods::ContextIndependentTwoBodyEnergy::* )( ::core::conformation::Residue const &,::core::conformation::Residue const &,::core::pose::Pose const &,::core::scoring::ScoreFunction const &,::core::scoring::EnergyMap & ) const)(&::core::scoring::methods::ContextIndependentTwoBodyEnergy::residue_pair_energy) )
						, ( bp::arg("rsd1"), bp::arg("rsd2"), bp::arg("pose"), bp::arg("sfxn"), bp::arg("emap") ) )
				.def(
						"atomic_interaction_cutoff"
						, bp::pure_virtual( (::core::Distance ( ::core::scoring::methods::EnergyMethod::* )(  ) const)(&::core::scoring::methods::EnergyMethod::atomic_interaction_cutoff) ) )
				.def(
						"clone"
						, bp::pure_virtual( (::core::scoring::methods::EnergyMethodOP ( ::core::scoring::methods::EnergyMethod::* )(  ) const)(&::core::scoring::methods::EnergyMethod::clone) ) )
				.def(
						"indicate_required_context_graphs"
						, bp::pure_virtual( (void ( ::core::scoring::methods::EnergyMethod::* )( ::utility::vector1<bool, std::allocator<bool> > & ) const)(&::core::scoring::methods::EnergyMethod::indicate_required_context_graphs) )
						, ( bp::arg("context_graphs_required") ) );

		bp::class_< ClassicRelax_wrapper, utility::pointer::owning_ptr< ::protocols::ClassicRelax > >( "ClassicRelax", bp::init< core::scoring::ScoreFunctionOP, core::pose::Pose & >(( bp::arg("_scorefxn"), bp::arg("_pose") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"moves1"
						, (::protocols::moves::MoveSetOP ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::moves1 ) )
				.def(
						"moves2"
						, (::protocols::moves::MoveSetOP ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::moves2 ) )
				.def(
						"moves3"
						, (::protocols::moves::MoveSetOP ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::moves3 ) )
				.def(
						"run"
						, (void ( ::protocols::ClassicRelax::* )(  ) )(&::protocols::ClassicRelax::run)
						, (void ( ClassicRelax_wrapper::* )(  ) )(&ClassicRelax_wrapper::default_run) )
				.def(
						"set_default"
						, (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default ) )
				.def(
						"set_default_full_packer"
						, (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default_full_packer ) )
				.def(
						"set_default_move_map"
						, (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default_move_map ) )
				.def(
						"set_default_moveset_phase1"
						, (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default_moveset_phase1 ) )
				.def(
						"set_default_moveset_phase2"
						, (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default_moveset_phase2 ) )
				.def(
						"set_default_moveset_phase3"
						, (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default_moveset_phase3 ) )
				.def(
						"set_default_pack_task"
						, (void ( ::protocols::ClassicRelax::* )(  ) )( &::protocols::ClassicRelax::set_default_pack_task ) );

		bp::class_< protocols::DockingHighRes >( "DockingHighRes", bp::init< core::pose::PoseOP, int >(( bp::arg("pose_in"), bp::arg("rb_jump") )) )
				.def(
						"bb"
						, (bool const ( ::protocols::DockingHighRes::* )(  ) )( &::protocols::DockingHighRes::bb ) )
				.def(
						"chi"
						, (bool const ( ::protocols::DockingHighRes::* )(  ) )( &::protocols::DockingHighRes::chi ) )
				.def(
						"mcm_protocol"
						, (void ( ::protocols::DockingHighRes::* )(  ) )( &::protocols::DockingHighRes::mcm_protocol ) )
				.def(
						"minimize_trial"
						, (void ( ::protocols::DockingHighRes::* )(  ) )( &::protocols::DockingHighRes::minimize_trial ) )
				.def(
						"rot_magnitude"
						, (::protocols::moves::Real const ( ::protocols::DockingHighRes::* )(  ) )( &::protocols::DockingHighRes::rot_magnitude ) )
				.def(
						"trans_magnitude"
						, (::protocols::moves::Real const ( ::protocols::DockingHighRes::* )(  ) )( &::protocols::DockingHighRes::trans_magnitude ) );

		bp::class_< protocols::moves::MonteCarlo, utility::pointer::owning_ptr< ::protocols::moves::MonteCarlo > >( "MonteCarlo", bp::init< core::pose::Pose const &, core::scoring::ScoreFunction const &, double >(( bp::arg("init_pose"), bp::arg("scorefxn"), bp::arg("temperature") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"best_pose"
						, (::core::pose::Pose const & ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::last_accepted_pose )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"best_score"
						, (::protocols::moves::Real ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::last_accepted_score ) )
				.def(
						"boltzmann"
						, (bool ( ::protocols::moves::MonteCarlo::* )( ::core::pose::Pose &,::std::string const & ) )( &::protocols::moves::MonteCarlo::boltzmann )
						, ( bp::arg("pose"), bp::arg("move_type")="unk" ) )
				.def(
						"low_pose"
						, (::core::pose::Pose const & ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::lowest_score_pose )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"low_score"
						, (::protocols::moves::Real ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::lowest_score ) )
				.def(
						"mc_accepted"
						, (int ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::mc_accepted ) )
				.def(
						"recover_low"
						, (void ( ::protocols::moves::MonteCarlo::* )( ::core::pose::Pose & ) )( &::protocols::moves::MonteCarlo::recover_low )
						, ( bp::arg("pose") ) )
				.def(
						"reset"
						, (void ( ::protocols::moves::MonteCarlo::* )( ::core::pose::Pose const & ) )( &::protocols::moves::MonteCarlo::reset )
						, ( bp::arg("pose") ) )
				.def(
						"reset_counters"
						, (void ( ::protocols::moves::MonteCarlo::* )(  ) )( &::protocols::moves::MonteCarlo::reset_counters ) )
				.def(
						"score_function"
						, (void ( ::protocols::moves::MonteCarlo::* )( ::core::scoring::ScoreFunction const & ) )( &::protocols::moves::MonteCarlo::score_function )
						, ( bp::arg("scorefxn") ) )
				.def(
						"score_function"
						, (::core::scoring::ScoreFunction const & ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::score_function )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"set_autotemp"
						, (void ( ::protocols::moves::MonteCarlo::* )( bool const,::protocols::moves::Real const ) )( &::protocols::moves::MonteCarlo::set_autotemp )
						, ( bp::arg("setting"), bp::arg("quench_temp") ) )
				.def(
						"set_temperature"
						, (void ( ::protocols::moves::MonteCarlo::* )( ::protocols::moves::Real const ) )( &::protocols::moves::MonteCarlo::set_temperature )
						, ( bp::arg("temp") ) )
				.def(
						"show_counters"
						, (void ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::show_counters ) )
				.def(
						"show_scores"
						, (void ( ::protocols::moves::MonteCarlo::* )(  ) const)( &::protocols::moves::MonteCarlo::show_scores ) );

		bp::class_< Mover_wrapper, utility::pointer::owning_ptr< Mover_wrapper >, boost::noncopyable >( "Mover", bp::init< std::string const & >(( bp::arg("type_in") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"acceptance_rate"
						, (::protocols::moves::Real ( ::protocols::moves::Mover::* )(  ) const)( &::protocols::moves::Mover::acceptance_rate ) )
				.def(
						"apply"
						, bp::pure_virtual( (void ( ::protocols::moves::Mover::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&::protocols::moves::Mover::apply) )
						, ( bp::arg("pose"), bp::arg("mm") ) )
				.def(
						"get_type"
						, (::std::string const & ( ::protocols::moves::Mover::* )(  ) const)( &::protocols::moves::Mover::get_type )
						, bp::return_value_policy< bp::copy_const_reference >() )
				.def(
						"get_weight"
						, (::protocols::moves::Real ( ::protocols::moves::Mover::* )(  ) const)( &::protocols::moves::Mover::get_weight ) )
				.def(
						"set_accepted"
						, (void ( ::protocols::moves::Mover::* )( bool ) const)( &::protocols::moves::Mover::set_accepted )
						, ( bp::arg("result") ) )
				.def(
						"set_type"
						, (void ( Mover_wrapper::* )( ::std::string const & ) const)(&Mover_wrapper::set_type)
						, ( bp::arg("new_type") ) )
				.def(
						"set_weight"
						, (void ( ::protocols::moves::Mover::* )( ::protocols::moves::Real ) )( &::protocols::moves::Mover::set_weight )
						, ( bp::arg("new_weight") ) )
				.def(
						"type"
						, (::std::string const & ( ::protocols::moves::Mover::* )(  ) const)( &::protocols::moves::Mover::type )
						, bp::return_value_policy< bp::copy_const_reference >() );

		bp::class_< MoveSet_wrapper, bp::bases< protocols::moves::Mover >, utility::pointer::owning_ptr< ::protocols::moves::MoveSet > >( "MoveSet" )
				.def( bp::init< >() )
				.def(
						"add_move"
						, (void ( ::protocols::moves::MoveSet::* )( ::protocols::moves::MoverOP const & ) )( &::protocols::moves::MoveSet::add_move )
						, ( bp::arg("new_move") ) )
				.def(
						"apply"
						, (void ( ::protocols::moves::MoveSet::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&::protocols::moves::MoveSet::apply)
						, (void ( MoveSet_wrapper::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&MoveSet_wrapper::default_apply)
						, ( bp::arg("pose"), bp::arg("mm") ) )
				.def(
						"clear"
						, (void ( ::protocols::moves::MoveSet::* )(  ) )( &::protocols::moves::MoveSet::clear ) )
				.def(
						"set_type"
						, (void ( MoveSet_wrapper::* )( ::std::string const & ) const)(&MoveSet_wrapper::set_type)
						, ( bp::arg("new_type") ) );

		bp::class_< PackMover_wrapper, bp::bases< protocols::moves::Mover >, utility::pointer::owning_ptr< ::protocols::moves::PackMover > >( "PackMover", bp::init< core::scoring::ScoreFunctionOP const &, core::pack::task::PackerTask const &, bp::optional< protocols::moves::PackType const & > >(( bp::arg("scorefxn_in"), bp::arg("task_in"), bp::arg("pack_type_in")=::protocols::moves::PackType_off ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"apply"
						, (void ( ::protocols::moves::PackMover::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&::protocols::moves::PackMover::apply)
						, (void ( PackMover_wrapper::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&PackMover_wrapper::default_apply)
						, ( bp::arg("pose"), bp::arg("arg1") ) )
				.def(
						"pack_type"
						, (::protocols::moves::PackType ( ::protocols::moves::PackMover::* )(  ) )( &::protocols::moves::PackMover::pack_type ) )
				.def(
						"pack_type"
						, (void ( ::protocols::moves::PackMover::* )( ::protocols::moves::PackType ) )( &::protocols::moves::PackMover::pack_type )
						, ( bp::arg("pt") ) )
				.def(
						"set_type"
						, (void ( PackMover_wrapper::* )( ::std::string const & ) const)(&PackMover_wrapper::set_type)
						, ( bp::arg("new_type") ) );

		bp::class_< RigidBodyMover_wrapper, bp::bases< protocols::moves::Mover >, utility::pointer::owning_ptr< ::protocols::moves::RigidBodyMover > >( "RigidBodyMover" )
				.def( bp::init< >() )
				.def(
						"apply"
						, (void ( ::protocols::moves::RigidBodyMover::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&::protocols::moves::RigidBodyMover::apply)
						, (void ( RigidBodyMover_wrapper::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&RigidBodyMover_wrapper::default_apply)
						, ( bp::arg("pose"), bp::arg("mm") ) )
				.def(
						"jump_number"
						, (void ( ::protocols::moves::RigidBodyMover::* )( int const ) )( &::protocols::moves::RigidBodyMover::jump_number )
						, ( bp::arg("jump_number_in") ) )
				.def(
						"jump_number"
						, (int ( ::protocols::moves::RigidBodyMover::* )(  ) const)( &::protocols::moves::RigidBodyMover::jump_number ) )
				.def(
						"set_center"
						, (void ( ::protocols::moves::RigidBodyMover::* )( ::core::Vector const ) )( &::protocols::moves::RigidBodyMover::set_center )
						, ( bp::arg("rot_center_in") ) )
				.def(
						"set_magnitudes"
						, (void ( ::protocols::moves::RigidBodyMover::* )( ::std::string const,::protocols::moves::Real const ) )( &::protocols::moves::RigidBodyMover::set_magnitudes )
						, ( bp::arg("type"), bp::arg("magnitude") ) )
				.def(
						"set_type"
						, (void ( RigidBodyMover_wrapper::* )( ::std::string const & ) const)(&RigidBodyMover_wrapper::set_type)
						, ( bp::arg("new_type") ) );

		bp::class_< RigidBodyPerturbMover_wrapper, bp::bases< protocols::moves::RigidBodyMover >, utility::pointer::owning_ptr< ::protocols::moves::RigidBodyPerturbMover > >( "RigidBodyPerturbMover" )
				.def(
						"set_type"
						, (void ( RigidBodyPerturbMover_wrapper::* )( ::std::string const & ) const)(&RigidBodyPerturbMover_wrapper::set_type)
						, ( bp::arg("new_type") ) );

		bp::class_< protocols::moves::RottrialOptions, utility::pointer::owning_ptr< ::protocols::moves::RottrialOptions > >( "RottrialOptions", bp::init< core::pack::task::PackerTask const &, double >(( bp::arg("task_in"), bp::arg("energycut_in") ))[bp::return_value_policy< bp::return_by_value >()] )
				.def(
						"clone"
						, (::protocols::moves::RottrialOptionsOP ( ::protocols::moves::RottrialOptions::* )(  ) const)( &::protocols::moves::RottrialOptions::clone ) )
				.def(
						"energycut"
						, (::protocols::moves::Real ( ::protocols::moves::RottrialOptions::* )(  ) const)( &::protocols::moves::RottrialOptions::energycut ) )
				.def(
						"task"
						, (::core::pack::task::PackerTask const & ( ::protocols::moves::RottrialOptions::* )(  ) const)( &::protocols::moves::RottrialOptions::task )
						, bp::return_value_policy< bp::copy_const_reference >() );

		bp::class_< ShearMover_wrapper, bp::bases< protocols::moves::Mover >, utility::pointer::owning_ptr< ::protocols::moves::ShearMover > >( "ShearMover" )
				.def( bp::init< >() )
				.def(
						"apply"
						, (void ( ::protocols::moves::ShearMover::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&::protocols::moves::ShearMover::apply)
						, (void ( ShearMover_wrapper::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&ShearMover_wrapper::default_apply)
						, ( bp::arg("pose"), bp::arg("mm") ) )
				.def(
						"nmoves"
						, (void ( ::protocols::moves::ShearMover::* )( ::size_t const ) )( &::protocols::moves::ShearMover::nmoves )
						, ( bp::arg("nmoves_in") ) )
				.def(
						"set_angle_max"
						, (void ( ::protocols::moves::ShearMover::* )( char const,::protocols::moves::Real const ) )( &::protocols::moves::ShearMover::set_angle_max )
						, ( bp::arg("type"), bp::arg("angle") ) )
				.def(
						"set_type"
						, (void ( ShearMover_wrapper::* )( ::std::string const & ) const)(&ShearMover_wrapper::set_type)
						, ( bp::arg("new_type") ) );

		bp::class_< SmallMover_wrapper, bp::bases< protocols::moves::Mover >, utility::pointer::owning_ptr< ::protocols::moves::SmallMover > >( "SmallMover" )
				.def( bp::init< >() )
				.def(
						"apply"
						, (void ( ::protocols::moves::SmallMover::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&::protocols::moves::SmallMover::apply)
						, (void ( SmallMover_wrapper::* )( ::core::pose::Pose &,::core::kinematics::MoveMap const & ) const)(&SmallMover_wrapper::default_apply)
						, ( bp::arg("pose"), bp::arg("mm") ) )
				.def(
						"nmoves"
						, (void ( ::protocols::moves::SmallMover::* )( ::size_t const ) )( &::protocols::moves::SmallMover::nmoves )
						, ( bp::arg("nmoves_in") ) )
				.def(
						"set_angle_max"
						, (void ( ::protocols::moves::SmallMover::* )( char const,::protocols::moves::Real const ) )( &::protocols::moves::SmallMover::set_angle_max )
						, ( bp::arg("type"), bp::arg("angle") ) )
				.def(
						"set_type"
						, (void ( SmallMover_wrapper::* )( ::std::string const & ) const)(&SmallMover_wrapper::set_type)
						, ( bp::arg("new_type") ) );

		bp::class_< protocols::smanager::Score >( "Score" )
				.def_readwrite( "RMS", &protocols::smanager::Score::RMS )
				.def_readwrite( "file_name", &protocols::smanager::Score::file_name )
				.def_readwrite( "score", &protocols::smanager::Score::score );

		bp::class_< protocols::smanager::ScoreManager >( "ScoreManager" )
				.def( bp::init< >() )
				.def(
						"add"
						, (void ( ::protocols::smanager::ScoreManager::* )( ::protocols::smanager::Score &,::core::pose::Pose const & ) )( &::protocols::smanager::ScoreManager::add )
						, ( bp::arg("s"), bp::arg("pose") ) )
				.def(
						"write_score_file"
						, (void ( ::protocols::smanager::ScoreManager::* )( ::std::string ) )( &::protocols::smanager::ScoreManager::write_score_file )
						, ( bp::arg("fname") ) );

		{ //::core::init

				typedef void ( *init_function_type )( ::std::string const & );

				bp::def(
						"init"
						, init_function_type( &::core::init )
						, ( bp::arg("dbloc") ) );

		}

		{ //::core::init

				typedef void ( *init_function_type )( int,char * * );

				bp::def(
						"init"
						, init_function_type( &::core::init )
						, ( bp::arg("argc"), bp::arg("argv") ) );

		}

		{ //::core::io::pdb::pose_from_pdb

				typedef void ( *pose_from_pdb_function_type )( ::core::pose::Pose &,::std::string const & );

				bp::def(
						"pose_from_pdb"
						, pose_from_pdb_function_type( &::core::io::pdb::pose_from_pdb )
						, ( bp::arg("pose"), bp::arg("filename") ) );

		}

		using namespace utility::pointer;
			using namespace protocols::moves;
			bp::implicitly_convertible< owning_ptr<SmallMover>, owning_ptr<Mover> >();
			bp::implicitly_convertible< owning_ptr<ShearMover>, owning_ptr<Mover> >();
			bp::implicitly_convertible< owning_ptr<RigidBodyPerturbMover>, owning_ptr<Mover> >();
			bp::implicitly_convertible< owning_ptr<RigidBodyMover>, owning_ptr<Mover> >();
			bp::implicitly_convertible< owning_ptr<PackMover>, owning_ptr<Mover> >();
			bp::implicitly_convertible< owning_ptr<MoveSet>, owning_ptr<Mover> >();
			bp::implicitly_convertible< owning_ptr<MoveSet_wrapper>, owning_ptr<MoveSet> >();
			bp::implicitly_convertible< owning_ptr<Mover_wrapper>, owning_ptr<Mover> >();
			bp::implicitly_convertible< owning_ptr<PackerTask_wrapper>, owning_ptr<core::pack::task::PackerTask> >();
			bp::implicitly_convertible< owning_ptr<ScoreFunction_wrapper>, owning_ptr<core::scoring::ScoreFunction> >();
			bp::implicitly_convertible< owning_ptr<ContextIndependentOneBodyEnergy_wrapper>, owning_ptr<core::scoring::methods::ContextIndependentOneBodyEnergy> >();
			bp::implicitly_convertible< owning_ptr<core::scoring::methods::ContextIndependentOneBodyEnergy>, owning_ptr<core::scoring::methods::EnergyMethod> >();
			bp::class_<     std::vector <std::string> > ( "VecStr").def(bp::vector_indexing_suite< std::vector<std::string> >());
			bp::class_< utility::vector1<std::string> > ("Vec1Str").def(bp::vector_indexing_suite< utility::vector1<std::string> >());
			bp::class_<     std::vector <int> > ("Vec1Int").def(bp::vector_indexing_suite< std::vector<int> >() );
			bp::class_< utility::vector1<int> > ( "VecInt").def(bp::vector_indexing_suite< utility::vector1<int> >() );
			bp::class_<     std::vector <bool> > ("Vec1bool").def(bp::vector_indexing_suite<      std::vector<bool> >() );
			bp::class_< utility::vector1<bool> > ( "Vecbool").def(bp::vector_indexing_suite< utility::vector1<bool> >() );

		{ //::core::io::pdb::pose_from_pdb

				typedef void ( *pose_from_pdb_function_type )( ::core::pose::Pose &,::core::chemical::ResidueTypeSet const &,::std::string const & );

				bp::def(
						"pose_from_pdb"
						, pose_from_pdb_function_type( &::core::io::pdb::pose_from_pdb )
						, ( bp::arg("pose"), bp::arg("residue_set"), bp::arg("filename") ) );

		}
}
