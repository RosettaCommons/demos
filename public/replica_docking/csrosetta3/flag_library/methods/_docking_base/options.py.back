##-*- mode:python;tab-width:3;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t;python-indent:3 -*-'
## make mammoth structure alignments

import string
from glob import glob
#from sys import argv,stderr,exit
#import sys
from os import popen,system,fdopen,mkdir,makedirs
from os import dup2,path
from os.path import exists
from os.path import *
from os.path import basename
import argparse
import sys
import shutil
### toolbox library
from library import Tracer
import library
import automatic_setup

#from _presetup import TargetLib
import traceback

# definition of options for the your method

if 'group' in locals():
	group.add_argument("-native", help="native complex" );
	group.add_argument("-pre_native", help="native complex prepacked with unbound structures' sidechains" );
	group.add_argument("-protAB", help="superimposed unbound structure" );
	group.add_argument("-P_b", help="randomized on pre_native.pdb (bound) " );
	group.add_argument("-P_u", help="randomized on protAB.pdb (unbound)" );
	group.add_argument("-partners_b", help="bound docking partners" );
	group.add_argument("-partners_u", help="unbound docking partners" );
	group.add_argument("-cst_file", help="cst_file" );
	group.add_argument("-cst_weight", help="default=5", default=5 );
#	group.add_argument("-disulf", help="disulfide bonds pairs");

if 'run_group' in locals():
	run_group.add_argument("-docking", choices=['bound','unbound'], default='unbound',help='determines which pdb file to use')
	run_group.add_argument("-protocol", choices=['standard','centroid','refine','dock_pert'] );
	run_group.add_argument("-out", help="output file name" );
	run_group.add_argument("-score", help="score weights, options: interchain_cen, score3, docking, score12..." );
	run_group.add_argument("-extra_score", choices=['docking_interface_score'], help="" );
	run_group.add_argument("-nstruct", help="of each batch if batches used, default=1", default=1 );
	run_group.add_argument("-batches", help="total decoys = nstruct*batches if use" );
	run_group.add_argument("-start", help="path to decoy-sets or pdb file for refinement (absolut)" );
	run_group.add_argument("-disulf", help="disulfide bonds pairs")



tr = Tracer( "template_method" )
# method-based code

class DockMethod(automatic_setup.BasicMethod):
	def __init__(self,name,path):
		automatic_setup.BasicMethod.__init__(self,name,path)
		self.non_file_options.append('cst_weight')
		self.non_file_options.append('docking')
		self.non_file_options.append('protocol')
		self.non_file_options.append('out')
		self.non_file_options.append('score')
		self.non_file_options.append('extra_score')
		self.non_file_options.append('nstruct')
		self.non_file_options.append('batches')
		self.non_file_options.append('start')
		self.non_file_options.append('cst_weight')

		self.option2dir['native']='pdbs'
		self.option2dir['pre_native']='pdbs'
		self.option2dir['protAB']='pdbs'
		self.option2dir['P_b']='pdbs'
		self.option2dir['P_u']='pdbs'
		self.option2dir['partners_b']='partners'
		self.option2dir['partners_u']='partners'
		self.option2dir['cst_file']='cst'
		self.option2dir['disulf']='disulf'

	def make_target_flags(self, run, setup, filename, flags, subs ):
		tr.out("make target flags...")
		args=self.get_args()

		# parameters which differs depends on bound/unbound docking
		# native and docking partners(for which only multi-chain protein is neccessary)
		if args.docking=="unbound":
			if not args.protAB:
				raise library.MissingInput("you need protAB.pdb as the native in unbound docking")
			run.add_subst('CM_NATIVE_PDB', setup.cm_path(args.protAB))
			if args.partners_u:
				run.add_subst('CM_PARTNERS', setup.cm_path(args.partners_u))
				flags.write("-partners $CM_PARTNERS\n")
		else:
			if not args.native:
				raise library.MissingInput("you need native.pdb as the native in bound docking")
			run.add_subst('CM_NATIVE_PDB', setup.cm_path(args.native))
			if args.partners_b:
				run.add_subst('CM_PARTNERS', setup.cm_path(args.partners_b))
				flags.write("-partners $CM_PARTNERS\n")
		flags.write("-in:file:native $CM_NATIVE_PDB\n")
		# input or call it start file
		if not args.start: # not input, then use the default files as start
			if args.docking=="unbound": # unbound docking
				if args.protocol == "standard" or args.protocol=="centroid":
					run.add_subst('CM_INPUT_PDB', setup.cm_path(args.P_u))
				if args.protocol == "dock_pert":
					run.add_subst('CM_INPUT_PDB', setup.cm_path(args.pre_protAB))
				if args.protocol=="refine":
					run.add_subst('CM_INPUT_PDB', setup.cn_path(args.protAB))
			else:
				if args.protocol == "standard" or args.protocol=="centroid":
					run.add_subst('CM_INPUT_PDB', setup.cm_path(args.P_b))
				if args.protocol == "dock_pert":
					run.add_subst('CM_INPUT_PDB', setup.cm_path(args.pre_native))
				if args.protocol=="refine":
					run.add_subst('CM_INPUT_PDB', setup.cn_path(args.native))
				flags.write("-in:file:s $CM_INPUT_PDB\n")
		else:
			if isfile(args.start):
				fname,fext = splitext(args.start)
				if fext=='.pdb':
					run.add_subst('CM_INPUT_PDB', args.start)
					flags.write("-in:file:s $CM_INPUT_PDB\n")
				else:
					raise library.MissingInput("file input expect .pdb format")
			else:
				if not isdir(args.start):
					raise library.MissingInput("non-pdb input expected to be a absolut path to decoys-sets")
				if not args.protocol == "refine":
					raise library.MissingInput("decoys input expect to only do refinement right now")
				path_to_input=args.start.replace('TARGET', setup.target.name)
				assert path_to_input[0]=='/', 'absolute path required for option args.start when it is not pdb file'
				print path_to_input
				import glob
				input_decoys=glob.glob(path_to_input+'/decoys_0*.out')
				print input_decoys
				batches=[]
				for i, file in enumerate(input_decoys):
					flag_file=setup.create_file("flags_batch%04d"%(i+1))
					open(setup.abspath(flag_file),'w').write('-in:file:silent %s\n-out:file:silent refine_%s\n'%(file,basename(file)))
					batches.append(setup.abspath(flag_file))
				flags.write("-run:batches "+" ".join(batches)+"\n")

		# special flags for refine
		if not args.protocol=="centroid":
			flags.write("-unboundrot %s\n"%setup.cm_path(args.protAB))
		if args.protocol=="refine":   # I have a suspicious that these disulf will work automatically in the standard/dock_pert mode, I mean it probably only breaks when doing the two low/high res phase separately
			if args.disulf:
				flags.write("-detect_disulf true\n")
				flags.write("-rebuild_disulf true\n")
				flags.write("-fix_disulf %s\n"%args.disulf)

		# parameters which are common for bound/unbound docking
		# run batches
		if args.batches:
			batches=[]
			for i in range(0, int(args.batches)):
				flag_file=setup.create_file("flags_batch%04d"%(i+1))
				open(setup.abspath(flag_file),'w').write("-out:file:silent decoys_%04d.out\n-out::suffix_%04d\n"%( (i+1),(i+1)) )
				batches.append(setup.abspath(flag_file))
			flags.write("-run:batches "+" ".join(batches)+"\n")

		# file name of output
		if args.out:
			if not args.batches:
				if not args.protocol=="refine":
					flags.write("-out:file:silent %s\n"%args.out)
				else:
					if not isdir( args.refine):
						flags.write("-out:file:silent %s\n"%args.out)

		# score
		if args.score:
			flags.write("-score:weights %s\n"%args.score)

		# cst
		if args.cst_file:
			flags.write("-cst_file %s\n"%args.cst_file)
			flags.write("-cst_weight %s\n"%args.cst_weight)

		# extra_score
		if args.extra_score:
			flags.write("-score:docking_interface_score")

		# writing everything left into flags
		flags.write("-nstruct %d\n"%int(args.nstruct))


#    def setup_file_library( self ):
# 		automatic_setup.BasicMethod.setup_file_library( self )
# 		fl = self.file_library
# 		args=self.get_args()
# 		path = flag_lib+"/methods/rosetta_dock/"

# 		if args.protocol == "refine":
# 			fl.provide_file( "flags", path, "flags_docking_refine" )
# 			fl.add_string("commandline", "@flags_docking_refine @$CM_FLAGFILE");
# 		if args.protocol == "standard":
# 			fl.provide_file( "flags", path, "flags_docking_standard" )
# 			fl.add_string( "commandline", "@flags_docking_standard @$CM_FLAGFILE");
# 		if args.protocol == "centroid":
# 			fl.provide_file( "flags", path, "flags_docking_centroid" )
# 			fl.add_string( "commandline", "@flags_docking_centroid @$CM_FLAGFILE");
# 		if args.protocol == "dock_pert":
# 			fl.provide_file( "flags", path, "flags_docking_pert" )
# 			fl.add_string( "commandline", "@flags_docking_pert @$CM_FLAGFILE");

# 		fl.executable  = "docking_protocol"
# 		# fl.provide_file( "flags", path, "flags_nmr_patches" )
# 		# fl.override("flags", "flags_denovo", '-increase_cycles %f'%float(args.cycle_factor))
# 		# fl.add_string( "commandline", "-out:file:silent decoys.out @flags_denovo @$CM_FLAGFILE");

# method = RosettaDockMethod(method_name, method_path)
