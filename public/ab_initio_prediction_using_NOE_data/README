ab_initio_prediction_using_NOE_data

We will use the chemical shifts to improve the fragments from which Rosetta builds up structures, and the NOEs to guide the Rosetta calculations towards the native structure. The Rosetta calculation steps are described separately in the following. For detailed description, see Sgourakis NG et al JACS,2011,133(16):6288-98:

Determination of the Structures of Symmetric Protein Oligomers from NMR Chemical Shifts and Residual Dipolar Couplings

mkdir starting_inputs
mkdir rosetta_inputs

starting_inputs::
NOEs:
	NOE_data.upl
fasta:
	testA.fasta

scripts:
	bmrb2talos.com
	cst_map_toCB.py
	cull_silent.pl
	make_fragments.pl
	run_talos
	superimpose.py
	upl2mini.csh

flags in scripts:
	score_flags
	scores.score.cfg

Detailed steps:

I Formatting NOE to be used by Rosetta
	First, convert NOE format upl to cst
	scripts/upl2mini.csh starting_inputs/NOE_data.upl > rosetta_inputs/NOE.cst

	Second, generate centroid file for NOE
	scripts/cst_map_toCB.py rosetta_inputs/NOE.cst  > rosetta_inputs/NOE.centroid.cst 

II. Using chemical shifts to pick fragments.
We need to obtain chemical shift and then convert it into a format that the Rosetta fragment picker can use. 

	1.Get raw chemical shift data (raw.cs.bmrb) from  http://rest.bmrb.wisc.edu/bmrb/ using fasta sequence.

	2.We use the script bmrb2talos.com to convert to talos format

	scripts/bmrb2talos.com raw.cs.bmrb  > cs.talos

	3. Download talos from NMRPipe, edit run_talos accordingly and then run in mfr folder.

	mkdir mfr
	cd mfr/
	cp ../cs.talos .
	tcsh ../scripts/run_talos 

	4. Rename the fasta file to t000_.fasta and generate fragments. This will produce a pssm checkpoint file called t000_.checkpoint
	mkdir nnmake
 	cd nnmake
 	cp ../../starting_inputs/testA.fasta .
 	mv testA.fasta t000_.fasta
 	../../scripts/make_fragments.pl -fasta t000_.fasta  -nofrags -nosam &

	5.Now we will create fragments in newpicker folder. Go into newpicker directory and modify score_flags to have correct file names and paths. scores.score.cfg contains weights to guide fragment picking.

	mkdir newpicker
	cd newpicker
	cp ../../scripts/score_flags .
	cp ../../scripts/scores.score.cfg .
	fragment_picker.linuxgccrelease @score_flags

	You should have fragment files with names something like
	frags.score.9mers
	frags.score.3mers

III. Run Rosetta with the fragments made above and use NOEs to guide search

minirosetta.default.linuxgccrelease -cst_fa_file rosetta_inputs/NOE.cst -in:file:fasta starting_inputs/testA.fasta -file:frag3 rosetta_inputs/newpicker/frags.score.3mers -file:frag9 rosetta_inputs/newpicker/frags.score.9mers -nstruct 1 -out:file:silent csrosetta.out -database /work/bjelic/minirosettadatabase201106/minirosetta_database -run:protocol abrelax 

(this will generate 10000 models which is a good number for a 100 residue
protein. Make this smaller or larger depending on your available computer
time,
etc).

IV. Process output

First, extract the low energy models:
grep SCORE csrosetta.out | sort –nk2 | head

The second column contains the energies of the lowest energy 10 models.
Select as the cutoff the energy on the last line

Now run:
cull_silent.pl csrosetta.out “score < cutoff”
above this will produce csrosetta.select.silent which contains the lowest energy 10 models.
  
extract_pdbs.static.linuxgccrelease -mute all -database ${PATH}/minirosetta_database/ -in::file::silent csrosetta.out -in::file:tags S_00000001  

Check convergence by superimposing the ten low energy models in pymol (or use superimpose.py)

To see how NOE constraints are satisfied by a model:
~/mini/bin/r_cst_tool.linuxgccrelease -in:file:s lowscore_1.pdb -cst_file rosetta_inputs/NOE.cst
r_cst_tool.linuxgccrelease is a pilot program by Oliver Lange in ~/mini/src/apps/pilot/olli/
