How to create models using RDC data and chemical shifts

For detailed description, see 
Sgourakis NG, Lange OF, DiMaio F, André I, Fitzkee NC, Rossi P, Montelione GT, Bax A, Baker D. (2011) Determination of the structures of symmetric protein oligomers from NMR chemical shifts and residual dipolar couplings. JACS 133:6288-98. 

Input files:  
Chemical shifts:  16096.str 
RDCs:  rdc_table.tab
Fasta:  2KCT.fasta

Scripts:
bmrb2talos.com
run_talos

We will use the chemical shifts to improve the fragments from which Rosetta builds up structures, and the RDCs to guide the Rosetta calculations towards the native structure.  The fragment picking step and the Rosetta calculation step are described separately in the following.

I.  Using chemical shifts to pick fragments.  
We first need to convert the chemical shifts into a format that the Rosetta fragment picker can use.  This is accomplished using a script called bmrb2talos.com:

bmrb2talos.com 16096.str  > cs.tab

Now, edit the run_talos script by substituting in place of the three question marks your talos file  “cs.tab”

You will also need to download nmrPipe from http://spin.niddk.nih.gov/. Let's assume it is in the directory $nmrPipe, and add this directory to your man path in nmrInit.linux.com (in the attached file, this directory is called/work/YOU/nmrPipe)
You will need to download talos. We assume that this is located in /work/YOU)

Now, type:  tcsh run_talos

Talos should run and produce some outputs

Now we need to make a pssm file which is another input into the fragment picker.

Rename the fasta file t000_.fasta

Now, type:  make_fragments.pl –nosum –nofrags –nohoms –nojufo t000_.fasta

This will produce a pssm checkpoint file called t000_.checkpoint

Now we will create fragments.  Make a directory called newpicker.  Go into that directory, and copy into there the files: 

scores.score.cfg  (a weight file)
score_flags (flag file)

Edit the score_flags file to point to the checkpoint file and the files that were generated by Talos

Run the fragment picker:
picker.default.linuxgccrelease @score_flags

Go for lunch

When you come back, you should have fragment files with names something like frags.score.9mers
frags.score.3mers

II.  Run Rosetta with the fragments made above and RDCs to guide search

First, convert the rdc file to the necessary format using 
prepare_rdc.sh rdc_table.tab 

to produce  new file  med1.rdc

minirosetta.default.linuxgccrelease @abrelax_flags –in:file:rdc med1.rdc -in:file:fasta t000_.fasta  -file:frag3 frags.score.3mers  -file:frag9 frags.score.9mers –rdc:fix_normAzz 1.0 –nstruct 10000 –out:file:silent csrosetta.out

(this will generate 10000 models which is a good number for a 100 residue protein.  Make this smaller or larger depending on your available computer time, etc).

III. Process output

First, extract the low energy models:

grep SCORE csrosetta.out | sort –nk2 | head 

The second column contains the energies of the lowest energy 10 models.  Select as the cutoff the energy on the last line

Now run:

cull_silent.pl csrosetta.out “score < cutoff”    where cutoff is the value defined above

this will produce csrosetta.select.silent which contains the lowest energy 10 models.

Extract_pdbs.default.linux.gccrelease –in:file:silent csrosetta.select.silent –database {database path}
Check convergence by superimposing the ten low energy models in pymol (or use superimpose.py)

Check for agreement with the input rdc data:


For i in *.pdb; do r_score_score_rdc.default.linuxgccrelease –in:file:rdc med1.rdc –in:file:s $i | grep Q; done;

This will compute the agreement with the rdcs (Q factor) of each of the low energy models.

The Q factor should be below 0.3 for good models, and the convergence of the lowest energy models should be quite evident.

If not, generate more models or obtain more data.  



 




